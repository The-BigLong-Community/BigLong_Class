package math;

//Importing Arrays for creating an array of long i.e. long[] for the whole BigLong class.
import java.util.Arrays;

//Importing Random for the use of the BigLong class
import java.util.Random;

//Importing Scanner class for readLine() method
import java.util.Scanner;

//Importing few classes from the math package for usage
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.Map;


/**
 * The `BigLong` class represents an arbitrarily large integer number. It provides operations
 * for arithmetic calculations, comparison, and conversion with other `BigLong` instances
 * or other numeric types.
 *
 * <p>
 * The `BigLong` class is designed to handle integers that exceed the capacity of the built-in
 * numeric types such as `int`, `long`, or `BigInteger`. It supports various operations on
 * large numbers, including addition, subtraction, multiplication, division, and modulo.
 * </p>
 *
 * <p>
 * The `BigLong` class internally stores the digits of the integer value as an array of longs.
 * Each digit represents a decimal place, and the digits are stored in little-endian order,
 * with the least significant digit at index 0.
 * </p>
 *
 * <p>
 * Note: The `BigLong` class is immutable, meaning that its value cannot be changed after
 * it is created. All arithmetic operations return a new `BigLong` instance with the result.
 * </p>
 *
 * <p>
 * Example usage:
 * <pre>
 * {@code
 * BigLong num1 = new BigLong("123456789");
 * BigLong num2 = new BigLong("987654321");
 *
 * BigLong sum = num1.add(num2);
 * BigLong difference = num1.subtract(num2);
 * BigLong product = num1.multiply(num2);
 * BigLong quotient = num1.divide(num2);
 * BigLong modulo = num1.modulo(num2);
 *
 * System.out.println("Sum: " + sum.toString());
 * System.out.println("Difference: " + difference.toString());
 * System.out.println("Product: " + product.toString());
 * System.out.println("Quotient: " + quotient.toString());
 * System.out.println("Modulo: " + modulo.toString());
 * }
 * </pre>
 * </p>
 *
 * <p>
 * <strong>Constructor Summary:</strong>
 * </p>
 * <ul>
 *     <li>{@code BigLong()}</li>
 *     <li>{@code BigLong(byte value)}</li>
 *     <li>{@code BigLong(short value)}</li>
 *     <li>{@code BigLong(int value)}</li>
 *     <li>{@code BigLong(long value)}</li>
 *     <li>{@code BigLong(String value)}</li>
 *     <li>{@code BigLong(BigInteger value)}</li>
 *     <li>{@code BigLong(float value)}</li>
 *     <li>{@code BigLong(double value)}</li>
 *     <li>{@code BigLong(BigDecimal value)}</li>
 *     <li>  </li>
 *     <li>{@code BigLong(long[] value)}</li>
 * </ul>
 *
 * <p>
 * <strong>Method Summary:</strong>
 * </p>
 * 
 * <ul>
 *     <strong>ADD METHODS</strong>
 *     <p>
 *     <li>{@code BigLong add(BigLong other)}</li>
 *     <li>{@code BigLong add(BigInteger other)}</li>
 *     <li>{@code BigLong add(long other)}</li>
 *     <li>{@code BigLong add(int other)}</li>
 *     <li>{@code BigLong add(short other)}</li>
 *     <li>{@code BigLong add(byte other)}</li>
 *     <li>{@code BigLong add(float other)}</li>
 *     <li>{@code BigLong add(double other)}</li>
 *     <li>{@code BigLong add(BigDecimal other)}</li>
 *     <li>{@code BigLong add(BigLong[] other)}</li>
 *     <li>{@code BigLong add(BigInteger[] other)}</li>
 *     <li>{@code BigLong add(long[] other)}</li>
 *     <li>{@code BigLong add(int[] other)}</li>
 *     <li>{@code BigLong add(short[] other)}</li>
 *     <li>{@code BigLong add(byte[] other)}</li>
 *     <li>{@code BigLong add(float[] other)}</li>
 *     <li>{@code BigLong add(double[] other)}</li>
 *     <li>{@code BigLong add(BigDecimal[] other)}</li>
 *     <p> </p>
 *     <p> </p>
 *     <p> 
 *     				STATIC ADD METHOS
 *     </p>
 *     <li>{@code static BigLong add(BigLong a, BigLong b)}</li>
 *     <li>{@code static BigLong add(BigLong a, byte b)}</li>
 *     <li>{@code static BigLong add(BigLong a, short b)}</li>
 *     <li>{@code static BigLong add(BigLong a, int b)}</li>
 *     <li>{@code static BigLong add(BigLong a, long b)}</li>
 *     <li>{@code static BigLong add(BigLong a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(BigLong a, float b)}</li>
 *     <li>{@code static BigLong add(BigLong a, double b)}</li>
 *     <li>{@code static BigLong add(BigLong a, BigDecimal b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, BigLong b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, byte b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, short b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, int b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, long b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, float b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, double b)}</li>
 *     <li>{@code static BigLong add(BigInteger a, BigDecimal b)}</li>
 *     <li>{@code static BigLong add(long a, BigLong b)}</li>
 *     <li>{@code static BigLong add(long a, byte b)}</li>
 *     <li>{@code static BigLong add(long a, short b)}</li>
 *     <li>{@code static BigLong add(long a, int b)}</li>
 *     <li>{@code static BigLong add(long a, long b)}</li>
 *     <li>{@code static BigLong add(long a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(long a, float b)}</li>
 *     <li>{@code static BigLong add(long a, double b)}</li>
 *     <li>{@code static BigLong add(long a, BigDecimal b)}</li>
 *     <li>{@code static BigLong add(int a, BigLong b)}</li>
 *     <li>{@code static BigLong add(int a, byte b)}</li>
 *     <li>{@code static BigLong add(int a, short b)}</li>
 *     <li>{@code static BigLong add(int a, int b)}</li>
 *     <li>{@code static BigLong add(int a, long b)}</li>
 *     <li>{@code static BigLong add(int a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(int a, float b)}</li>
 *     <li>{@code static BigLong add(int a, double b)}</li>
 *     <li>{@code static BigLong add(int a, BigDecimal b)}</li>
 *     <li>{@code static BigLong add(short a, BigLong b)}</li>
 *     <li>{@code static BigLong add(short a, byte b)}</li>
 *     <li>{@code static BigLong add(short a, short b)}</li>
 *     <li>{@code static BigLong add(short a, int b)}</li>
 *     <li>{@code static BigLong add(short a, long b)}</li>
 *     <li>{@code static BigLong add(short a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(short a, float b)}</li>
 *     <li>{@code static BigLong add(short a, double b)}</li>
 *     <li>{@code static BigLong add(short a, BigDecimal b)}</li>
 *     <li>{@code static BigLong add(byte a, BigLong b)}</li>
 *     <li>{@code static BigLong add(byte a, byte b)}</li>
 *     <li>{@code static BigLong add(byte a, short b)}</li>
 *     <li>{@code static BigLong add(byte a, int b)}</li>
 *     <li>{@code static BigLong add(byte a, long b)}</li>
 *     <li>{@code static BigLong add(byte a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(byte a, float b)}</li>
 *     <li>{@code static BigLong add(byte a, double b)}</li>
 *     <li>{@code static BigLong add(byte a, BigDecimal b)}</li>
 *     <li>{@code static BigLong add(float a, BigLong b)}</li>
 *     <li>{@code static BigLong add(float a, byte b)}</li>
 *     <li>{@code static BigLong add(float a, short b)}</li>
 *     <li>{@code static BigLong add(float a, int b)}</li>
 *     <li>{@code static BigLong add(float a, long b)}</li>
 *     <li>{@code static BigLong add(float a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(float a, float b)}</li>
 *     <li>{@code static BigLong add(float a, double b)}</li>
 *     <li>{@code static BigLong add(float a, BigDecimal b)}</li>
 *     <li>{@code static BigLong add(double a, BigLong b)}</li>
 *     <li>{@code static BigLong add(double a, byte b)}</li>
 *     <li>{@code static BigLong add(double a, short b)}</li>
 *     <li>{@code static BigLong add(double a, int b)}</li>
 *     <li>{@code static BigLong add(double a, long b)}</li>
 *     <li>{@code static BigLong add(double a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(double a, float b)}</li>
 *     <li>{@code static BigLong add(double a, double b)}</li>
 *     <li>{@code static BigLong add(double a, BigDecimal b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, BigLong b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, byte b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, short b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, int b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, long b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, BigInteger b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, float b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, double b)}</li>
 *     <li>{@code static BigLong add(BigDecimal a, BigDecimal b)}</li>
 *     </p>
 *     <p>
 *     -------------------------------------------------------------------------------
 *     </p>
 *     <strong>SUBTRACT METHODS</strong>
 *     <p>
 *     <li>{@code BigLong subtract(BigLong other)}</li>
 *     <li>{@code BigLong subtract(BigInteger other)}</li>
 *     <li>{@code BigLong subtract(long other)}</li>
 *     <li>{@code BigLong subtract(int other)}</li>
 *     <li>{@code BigLong subtract(short other)}</li>
 *     <li>{@code BigLong subtract(byte other)}</li>
 *     <li>{@code BigLong subtract(float other)}</li>
 *     <li>{@code BigLong subtract(double other)}</li>
 *     <li>{@code BigLong subtract(BigDecimal other)}</li>
 *     <p> </p>
 *     <p> </p>
 *     <p> 
 *     				STATIC SUBTRACT METHOS
 *     </p>
 *     <li>{@code static BigLong subtract(BigLong a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(BigLong a, byte b)}</li>
 *     <li>{@code static BigLong subtract(BigLong a, short b)}</li>
 *     <li>{@code static BigLong subtract(BigLong a, int b)}</li>
 *     <li>{@code static BigLong subtract(BigLong a, long b)}</li>
 *     <li>{@code static BigLong subtract(BigLong a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(BigLong a, float b)}</li>
 *     <li>{@code static BigLong subtract(BigLong a, double b)}</li>
 *     <li>{@code static BigLong subtract(BigLong a, BigDecimal b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, byte b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, short b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, int b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, long b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, float b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, double b)}</li>
 *     <li>{@code static BigLong subtract(BigInteger a, BigDecimal b)}</li>
 *     <li>{@code static BigLong subtract(long a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(long a, byte b)}</li>
 *     <li>{@code static BigLong subtract(long a, short b)}</li>
 *     <li>{@code static BigLong subtract(long a, int b)}</li>
 *     <li>{@code static BigLong subtract(long a, long b)}</li>
 *     <li>{@code static BigLong subtract(long a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(long a, float b)}</li>
 *     <li>{@code static BigLong subtract(long a, double b)}</li>
 *     <li>{@code static BigLong subtract(long a, BigDecimal b)}</li>
 *     <li>{@code static BigLong subtract(int a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(int a, byte b)}</li>
 *     <li>{@code static BigLong subtract(int a, short b)}</li>
 *     <li>{@code static BigLong subtract(int a, int b)}</li>
 *     <li>{@code static BigLong subtract(int a, long b)}</li>
 *     <li>{@code static BigLong subtract(int a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(int a, float b)}</li>
 *     <li>{@code static BigLong subtract(int a, double b)}</li>
 *     <li>{@code static BigLong subtract(int a, BigDecimal b)}</li>
 *     <li>{@code static BigLong subtract(short a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(short a, byte b)}</li>
 *     <li>{@code static BigLong subtract(short a, short b)}</li>
 *     <li>{@code static BigLong subtract(short a, int b)}</li>
 *     <li>{@code static BigLong subtract(short a, long b)}</li>
 *     <li>{@code static BigLong subtract(short a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(short a, float b)}</li>
 *     <li>{@code static BigLong subtract(short a, double b)}</li>
 *     <li>{@code static BigLong subtract(short a, BigDecimal b)}</li>
 *     <li>{@code static BigLong subtract(byte a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(byte a, byte b)}</li>
 *     <li>{@code static BigLong subtract(byte a, short b)}</li>
 *     <li>{@code static BigLong subtract(byte a, int b)}</li>
 *     <li>{@code static BigLong subtract(byte a, long b)}</li>
 *     <li>{@code static BigLong subtract(byte a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(byte a, float b)}</li>
 *     <li>{@code static BigLong subtract(byte a, double b)}</li>
 *     <li>{@code static BigLong subtract(byte a, BigDecimal b)}</li>
 *     <li>{@code static BigLong subtract(float a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(float a, byte b)}</li>
 *     <li>{@code static BigLong subtract(float a, short b)}</li>
 *     <li>{@code static BigLong subtract(float a, int b)}</li>
 *     <li>{@code static BigLong subtract(float a, long b)}</li>
 *     <li>{@code static BigLong subtract(float a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(float a, float b)}</li>
 *     <li>{@code static BigLong subtract(float a, double b)}</li>
 *     <li>{@code static BigLong subtract(float a, BigDecimal b)}</li>
 *     <li>{@code static BigLong subtract(double a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(double a, byte b)}</li>
 *     <li>{@code static BigLong subtract(double a, short b)}</li>
 *     <li>{@code static BigLong subtract(double a, int b)}</li>
 *     <li>{@code static BigLong subtract(double a, long b)}</li>
 *     <li>{@code static BigLong subtract(double a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(double a, float b)}</li>
 *     <li>{@code static BigLong subtract(double a, double b)}</li>
 *     <li>{@code static BigLong subtract(double a, BigDecimal b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, BigLong b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, byte b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, short b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, int b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, long b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, BigInteger b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, float b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, double b)}</li>
 *     <li>{@code static BigLong subtract(BigDecimal a, BigDecimal b)}</li>
 *     </p>
 *     <p>
 *     --------------------------------------------------------------------------------
 *     </p>
 *     <strong>MULTIPLY	 METHODS</strong>
 *     <p>
 *     <li>{@code BigLong multiply(BigLong other)}</li>
 *     <li>{@code BigLong multiply(BigInteger other)}</li>
 *     <li>{@code BigLong multiply(long other)}</li>
 *     <li>{@code BigLong multiply(int other)}</li>
 *     <li>{@code BigLong multiply(short other)}</li>
 *     <li>{@code BigLong multiply(byte other)}</li>
 *     <li>{@code BigLong multiply(float other)}</li>
 *     <li>{@code BigLong multiply(double other)}</li>
 *     <li>{@code BigLong multiply(BigDecimal other)}</li>
 *     <li>{@code BigLong multiply(BigLong[] other)}</li>
 *     <li>{@code BigLong multiply(BigInteger[] other)}</li>
 *     <li>{@code BigLong multiply(long[] other)}</li>
 *     <li>{@code BigLong multiply(int[] other)}</li>
 *     <li>{@code BigLong multiply(short[] other)}</li>
 *     <li>{@code BigLong multiply(byte[] other)}</li>
 *     <li>{@code BigLong multiply(float[] other)}</li>
 *     <li>{@code BigLong multiply(double[] other)}</li>
 *     <li>{@code BigLong multiply(BigDecimal[] other)}</li>
 *     <p> </p>
 *     <p> </p>
 *     <p> 
 *     				STATIC MULTIPLY METHOS
 *     </p>
 *     <li>{@code static BigLong multiply(BigLong a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(BigLong a, byte b)}</li>
 *     <li>{@code static BigLong multiply(BigLong a, short b)}</li>
 *     <li>{@code static BigLong multiply(BigLong a, int b)}</li>
 *     <li>{@code static BigLong multiply(BigLong a, long b)}</li>
 *     <li>{@code static BigLong multiply(BigLong a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(BigLong a, float b)}</li>
 *     <li>{@code static BigLong multiply(BigLong a, double b)}</li>
 *     <li>{@code static BigLong multiply(BigLong a, BigDecimal b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, byte b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, short b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, int b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, long b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, float b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, double b)}</li>
 *     <li>{@code static BigLong multiply(BigInteger a, BigDecimal b)}</li>
 *     <li>{@code static BigLong multiply(long a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(long a, byte b)}</li>
 *     <li>{@code static BigLong multiply(long a, short b)}</li>
 *     <li>{@code static BigLong multiply(long a, int b)}</li>
 *     <li>{@code static BigLong multiply(long a, long b)}</li>
 *     <li>{@code static BigLong multiply(long a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(long a, float b)}</li>
 *     <li>{@code static BigLong multiply(long a, double b)}</li>
 *     <li>{@code static BigLong multiply(long a, BigDecimal b)}</li>
 *     <li>{@code static BigLong multiply(int a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(int a, byte b)}</li>
 *     <li>{@code static BigLong multiply(int a, short b)}</li>
 *     <li>{@code static BigLong multiply(int a, int b)}</li>
 *     <li>{@code static BigLong multiply(int a, long b)}</li>
 *     <li>{@code static BigLong multiply(int a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(int a, float b)}</li>
 *     <li>{@code static BigLong multiply(int a, double b)}</li>
 *     <li>{@code static BigLong multiply(int a, BigDecimal b)}</li>
 *     <li>{@code static BigLong multiply(short a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(short a, byte b)}</li>
 *     <li>{@code static BigLong multiply(short a, short b)}</li>
 *     <li>{@code static BigLong multiply(short a, int b)}</li>
 *     <li>{@code static BigLong multiply(short a, long b)}</li>
 *     <li>{@code static BigLong multiply(short a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(short a, float b)}</li>
 *     <li>{@code static BigLong multiply(short a, double b)}</li>
 *     <li>{@code static BigLong multiply(short a, BigDecimal b)}</li>
 *     <li>{@code static BigLong multiply(byte a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(byte a, byte b)}</li>
 *     <li>{@code static BigLong multiply(byte a, short b)}</li>
 *     <li>{@code static BigLong multiply(byte a, int b)}</li>
 *     <li>{@code static BigLong multiply(byte a, long b)}</li>
 *     <li>{@code static BigLong multiply(byte a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(byte a, float b)}</li>
 *     <li>{@code static BigLong multiply(byte a, double b)}</li>
 *     <li>{@code static BigLong multiply(byte a, BigDecimal b)}</li>
 *     <li>{@code static BigLong multiply(float a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(float a, byte b)}</li>
 *     <li>{@code static BigLong multiply(float a, short b)}</li>
 *     <li>{@code static BigLong multiply(float a, int b)}</li>
 *     <li>{@code static BigLong multiply(float a, long b)}</li>
 *     <li>{@code static BigLong multiply(float a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(float a, float b)}</li>
 *     <li>{@code static BigLong multiply(float a, double b)}</li>
 *     <li>{@code static BigLong multiply(float a, BigDecimal b)}</li>
 *     <li>{@code static BigLong multiply(double a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(double a, byte b)}</li>
 *     <li>{@code static BigLong multiply(double a, short b)}</li>
 *     <li>{@code static BigLong multiply(double a, int b)}</li>
 *     <li>{@code static BigLong multiply(double a, long b)}</li>
 *     <li>{@code static BigLong multiply(double a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(double a, float b)}</li>
 *     <li>{@code static BigLong multiply(double a, double b)}</li>
 *     <li>{@code static BigLong multiply(double a, BigDecimal b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, BigLong b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, byte b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, short b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, int b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, long b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, BigInteger b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, float b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, double b)}</li>
 *     <li>{@code static BigLong multiply(BigDecimal a, BigDecimal b)}</li>
 *     </p>
 *     <p>
 *     --------------------------------------------------------------------------------
 *     </p>
 *     <strong>DIVIDE METHODS</strong>
 *     <p>
 *     <li>{@code BigLong divide(BigLong other)}</li>
 *     <li>{@code BigLong divide(BigInteger other)}</li>
 *     <li>{@code BigLong divide(long other)}</li>
 *     <li>{@code BigLong divide(int other)}</li>
 *     <li>{@code BigLong divide(short other)}</li>
 *     <li>{@code BigLong divide(byte other)}</li>
 *     <li>{@code BigLong divide(float other)}</li>
 *     <li>{@code BigLong divide(double other)}</li>
 *     <li>{@code BigLong divide(BigDecimal other)}</li>
 *     <p> </p>
 *     <p> </p>
 *     <p> 
 *     				STATIC DIVIDE METHOS
 *     </p>
 *     <li>{@code static BigLong divide(BigLong a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(BigLong a, byte b)}</li>
 *     <li>{@code static BigLong divide(BigLong a, short b)}</li>
 *     <li>{@code static BigLong divide(BigLong a, int b)}</li>
 *     <li>{@code static BigLong divide(BigLong a, long b)}</li>
 *     <li>{@code static BigLong divide(BigLong a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(BigLong a, float b)}</li>
 *     <li>{@code static BigLong divide(BigLong a, double b)}</li>
 *     <li>{@code static BigLong divide(BigLong a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, byte b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, short b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, int b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, long b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, float b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, double b)}</li>
 *     <li>{@code static BigLong divide(BigInteger a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divide(long a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(long a, byte b)}</li>
 *     <li>{@code static BigLong divide(long a, short b)}</li>
 *     <li>{@code static BigLong divide(long a, int b)}</li>
 *     <li>{@code static BigLong divide(long a, long b)}</li>
 *     <li>{@code static BigLong divide(long a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(long a, float b)}</li>
 *     <li>{@code static BigLong divide(long a, double b)}</li>
 *     <li>{@code static BigLong divide(long a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divide(int a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(int a, byte b)}</li>
 *     <li>{@code static BigLong divide(int a, short b)}</li>
 *     <li>{@code static BigLong divide(int a, int b)}</li>
 *     <li>{@code static BigLong divide(int a, long b)}</li>
 *     <li>{@code static BigLong divide(int a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(int a, float b)}</li>
 *     <li>{@code static BigLong divide(int a, double b)}</li>
 *     <li>{@code static BigLong divide(int a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divide(short a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(short a, byte b)}</li>
 *     <li>{@code static BigLong divide(short a, short b)}</li>
 *     <li>{@code static BigLong divide(short a, int b)}</li>
 *     <li>{@code static BigLong divide(short a, long b)}</li>
 *     <li>{@code static BigLong divide(short a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(short a, float b)}</li>
 *     <li>{@code static BigLong divide(short a, double b)}</li>
 *     <li>{@code static BigLong divide(short a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divide(byte a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(byte a, byte b)}</li>
 *     <li>{@code static BigLong divide(byte a, short b)}</li>
 *     <li>{@code static BigLong divide(byte a, int b)}</li>
 *     <li>{@code static BigLong divide(byte a, long b)}</li>
 *     <li>{@code static BigLong divide(byte a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(byte a, float b)}</li>
 *     <li>{@code static BigLong divide(byte a, double b)}</li>
 *     <li>{@code static BigLong divide(byte a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divide(float a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(float a, byte b)}</li>
 *     <li>{@code static BigLong divide(float a, short b)}</li>
 *     <li>{@code static BigLong divide(float a, int b)}</li>
 *     <li>{@code static BigLong divide(float a, long b)}</li>
 *     <li>{@code static BigLong divide(float a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(float a, float b)}</li>
 *     <li>{@code static BigLong divide(float a, double b)}</li>
 *     <li>{@code static BigLong divide(float a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divide(double a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(double a, byte b)}</li>
 *     <li>{@code static BigLong divide(double a, short b)}</li>
 *     <li>{@code static BigLong divide(double a, int b)}</li>
 *     <li>{@code static BigLong divide(double a, long b)}</li>
 *     <li>{@code static BigLong divide(double a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(double a, float b)}</li>
 *     <li>{@code static BigLong divide(double a, double b)}</li>
 *     <li>{@code static BigLong divide(double a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, BigLong b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, byte b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, short b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, int b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, long b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, BigInteger b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, float b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, double b)}</li>
 *     <li>{@code static BigLong divide(BigDecimal a, BigDecimal b)}</li>
 *     </p>
 *     <p>
 *     --------------------------------------------------------------------------------
 *     </p>
 *     <strong>DIVIDE TO BIGDECIMAL METHODS</strong>
 *     <p>
 *     <li>{@code BigLong divideToBigDecimal(BigLong other)}</li>
 *     <li>{@code BigLong divideToBigDecimal(BigInteger other)}</li>
 *     <li>{@code BigLong divideToBigDecimal(long other)}</li>
 *     <li>{@code BigLong divideToBigDecimal(int other)}</li>
 *     <li>{@code BigLong divideToBigDecimal(short other)}</li>
 *     <li>{@code BigLong divideToBigDecimal(byte other)}</li>
 *     <li>{@code BigLong divideToBigDecimal(float other)}</li>
 *     <li>{@code BigLong divideToBigDecimal(double other)}</li>
 *     <li>{@code BigLong divideToBigDecimal(BigDecimal other)}</li>
 *     <p> </p>
 *     <p> </p>
 *     <p> 
 *     				STATIC DIVIDE TO BIGDECIMAL METHOS
 *     </p>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigLong a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigInteger a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(long a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(int a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(short a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(byte a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(float a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(double a, BigDecimal b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, BigLong b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, byte b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, short b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, int b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, long b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, BigInteger b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, float b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, double b)}</li>
 *     <li>{@code static BigLong divideToBigDecimal(BigDecimal a, BigDecimal b)}</li>
 *     <p>
 *     <strong>OTHER DIVIDE TO BIGDECIMAL METHODS</strong>
 *     </p>
 *     
 *      <p>
 *     <li>{@code BigLong divideToBigDecimal(BigLong other, RoundingMode r)}</li>
 *     <li>{@code BigLong divideToBigDecimal(BigInteger other, RoundingMode r)}</li>
 *     <li>{@code BigLong divideToBigDecimal(long other, RoundingMode r)}</li>
 *     <li>{@code BigLong divideToBigDecimal(int other, RoundingMode r)}</li>
 *     <li>{@code BigLong divideToBigDecimal(short other, RoundingMode r)}</li>
 *     <li>{@code BigLong divideToBigDecimal(byte other, RoundingMode r)}</li>
 *     <li>{@code BigLong divideToBigDecimal(float other, RoundingMode r)}</li>
 *     <li>{@code BigLong divideToBigDecimal(double other, RoundingMode r)}</li>
 *     <li>{@code BigLong divideToBigDecimal(BigDecimal other, RoundingMode r)}</li>
 *     </p>
 *     
 *     <p>
 *     <li>{@code BigLong divideToBigDecimal(BigLong other, RoundingMode r, int precision)}</li>
 *     <li>{@code BigLong divideToBigDecimal(BigInteger other, RoundingMode r, int precision)}</li>
 *     <li>{@code BigLong divideToBigDecimal(long other, RoundingMode r, int precision)}</li>
 *     <li>{@code BigLong divideToBigDecimal(int other, RoundingMode r, int precision)}</li>
 *     <li>{@code BigLong divideToBigDecimal(short other, RoundingMode r, int precision)}</li>
 *     <li>{@code BigLong divideToBigDecimal(byte other, RoundingMode r, int precision)}</li>
 *     <li>{@code BigLong divideToBigDecimal(float other, RoundingMode r, int precision)}</li>
 *     <li>{@code BigLong divideToBigDecimal(double other, RoundingMode r, int precision)}</li>
 *     <li>{@code BigLong divideToBigDecimal(BigDecimal other, RoundingMode r, int precision)}</li>
 *     </p>
 *     <p>
 *     --------------------------------------------------------------------------------
 *     </p>
 *     <strong>MODULO METHODS</strong>
 *     <p>
 *     <li>{@code BigLong modulo(BigLong other)}</li>
 *     <li>{@code BigLong modulo(BigInteger other)}</li>
 *     <li>{@code BigLong modulo(long other)}</li>
 *     <li>{@code BigLong modulo(int other)}</li>
 *     <li>{@code BigLong modulo(short other)}</li>
 *     <li>{@code BigLong modulo(byte other)}</li>
 *     <li>{@code BigLong modulo(float other)}</li>
 *     <li>{@code BigLong modulo(double other)}</li>
 *     <li>{@code BigLong modulo(BigDecimal other)}</li>
 *     <p> </p>
 *     <p> </p>
 *     <p> 
 *     				STATIC MODULO METHOS
 *     </p>
 *     <li>{@code static BigLong modulo(BigLong a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(BigLong a, byte b)}</li>
 *     <li>{@code static BigLong modulo(BigLong a, short b)}</li>
 *     <li>{@code static BigLong modulo(BigLong a, int b)}</li>
 *     <li>{@code static BigLong modulo(BigLong a, long b)}</li>
 *     <li>{@code static BigLong modulo(BigLong a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(BigLong a, float b)}</li>
 *     <li>{@code static BigLong modulo(BigLong a, double b)}</li>
 *     <li>{@code static BigLong modulo(BigLong a, BigDecimal b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, byte b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, short b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, int b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, long b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, float b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, double b)}</li>
 *     <li>{@code static BigLong modulo(BigInteger a, BigDecimal b)}</li>
 *     <li>{@code static BigLong modulo(long a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(long a, byte b)}</li>
 *     <li>{@code static BigLong modulo(long a, short b)}</li>
 *     <li>{@code static BigLong modulo(long a, int b)}</li>
 *     <li>{@code static BigLong modulo(long a, long b)}</li>
 *     <li>{@code static BigLong modulo(long a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(long a, float b)}</li>
 *     <li>{@code static BigLong modulo(long a, double b)}</li>
 *     <li>{@code static BigLong modulo(long a, BigDecimal b)}</li>
 *     <li>{@code static BigLong modulo(int a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(int a, byte b)}</li>
 *     <li>{@code static BigLong modulo(int a, short b)}</li>
 *     <li>{@code static BigLong modulo(int a, int b)}</li>
 *     <li>{@code static BigLong modulo(int a, long b)}</li>
 *     <li>{@code static BigLong modulo(int a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(int a, float b)}</li>
 *     <li>{@code static BigLong modulo(int a, double b)}</li>
 *     <li>{@code static BigLong modulo(int a, BigDecimal b)}</li>
 *     <li>{@code static BigLong modulo(short a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(short a, byte b)}</li>
 *     <li>{@code static BigLong modulo(short a, short b)}</li>
 *     <li>{@code static BigLong modulo(short a, int b)}</li>
 *     <li>{@code static BigLong modulo(short a, long b)}</li>
 *     <li>{@code static BigLong modulo(short a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(short a, float b)}</li>
 *     <li>{@code static BigLong modulo(short a, double b)}</li>
 *     <li>{@code static BigLong modulo(short a, BigDecimal b)}</li>
 *     <li>{@code static BigLong modulo(byte a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(byte a, byte b)}</li>
 *     <li>{@code static BigLong modulo(byte a, short b)}</li>
 *     <li>{@code static BigLong modulo(byte a, int b)}</li>
 *     <li>{@code static BigLong modulo(byte a, long b)}</li>
 *     <li>{@code static BigLong modulo(byte a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(byte a, float b)}</li>
 *     <li>{@code static BigLong modulo(byte a, double b)}</li>
 *     <li>{@code static BigLong modulo(byte a, BigDecimal b)}</li>
 *     <li>{@code static BigLong modulo(float a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(float a, byte b)}</li>
 *     <li>{@code static BigLong modulo(float a, short b)}</li>
 *     <li>{@code static BigLong modulo(float a, int b)}</li>
 *     <li>{@code static BigLong modulo(float a, long b)}</li>
 *     <li>{@code static BigLong modulo(float a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(float a, float b)}</li>
 *     <li>{@code static BigLong modulo(float a, double b)}</li>
 *     <li>{@code static BigLong modulo(float a, BigDecimal b)}</li>
 *     <li>{@code static BigLong modulo(double a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(double a, byte b)}</li>
 *     <li>{@code static BigLong modulo(double a, short b)}</li>
 *     <li>{@code static BigLong modulo(double a, int b)}</li>
 *     <li>{@code static BigLong modulo(double a, long b)}</li>
 *     <li>{@code static BigLong modulo(double a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(double a, float b)}</li>
 *     <li>{@code static BigLong modulo(double a, double b)}</li>
 *     <li>{@code static BigLong modulo(double a, BigDecimal b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, BigLong b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, byte b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, short b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, int b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, long b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, BigInteger b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, float b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, double b)}</li>
 *     <li>{@code static BigLong modulo(BigDecimal a, BigDecimal b)}</li>
 *     </p>
 *     <p>
 *     --------------------------------------------------------------------------------
 *     </p>
 *     
 * </ul>
 *
 * <p>
 * <strong>Helper Methods:</strong>
 * </p>
 * <ul>
 *     <li>{@code int getLength()}</li>
 *     <li>{@code BigLong parseBigLong(String s)}</li>
 *     <li>{@code BigLong factorial(int n)}</li>
 *     <li>{@code BigLong pow(BigLong exponent)}</li>
 *     <li>{@code BigLong gcd(BigLong other)}</li>
 *     <li>{@code BigLong lcm(BigLong other)}</li>
 *     <li>{@code boolean isPrime()}</li>
 *     <li>{@code boolean isEven()}</li>
 *     <li>{@code boolean isOdd()}</li>
 *     <li>{@code boolean isZero()}</li>
 *     <li>{@code BigLong toBinary()}</li>
 *     <li>{@code BigLong toOctal()}</li>
 *     <li>{@code BigLong toHexadecimal()}</li>
 *     <li>{@code int compareTo(BigLong other)}</li>
 *     <li>{@code BigLong valueOf(BigLong other)}</li>
 *     <li>{@code void multiplyByTen()}</li>
 *     <li>{@code BigLong multiplyByPowerOfTen(int pow)}</li>
 *     <li>{@code BigLong divideByTen()}</li>
 *     <li>{@code boolean isNegative()}</li>
 *     <li>{@code int signum()}</li>
 *     <li>{@code BigLong trim()}</li>
 *     <li>{@code boolean equals(BigLong b)}</li>
 *     <li>{@code boolean isGreaterThan(BigLong other)}</li>
 *     <li>{@code boolean lesserThan(BigLong other)}</li>
 *     <li>{@code boolean isGreaterThanOrEqualTo(BigLong other)}</li>
 *     <li>{@code boolean lesserThanOrEqualTo(BigLong other)}</li>
 *     <li>{@code BigLong clone()}</li>
 *     <li>{@code int hashCode()}</li>
 *     <li>{@code String toString()}</li>
 *     <li>{@code BigLong destroy()}</li>
 * </ul>
 *
 *<p>
 * <strong>Conversion Methods:</strong>
 * </p>
 * <ul>
 *     <li>{@code BigLong toInt()}</li>
 *     <li>{@code BigLong toByte()}</li>
 *     <li>{@code BigLong toShort()}</li>
 *     <li>{@code BigLong toLong()}</li>
 *     <li>{@code BigLong toBigInteger()}</li>
 *     <li>{@code BigLong toDouble()}</li>
 *     <li>{@code BigLong toFloat()}</li>
 *     <li>{@code BigLong toBigDecimal()}</li>
 * </ul>
 * 
 * 
 * <p>
 * <strong>Static Constants:</strong>
 * </p>
 * <ul>
 *     <li>{@code BigLong ZERO}</li>
 *     <li>{@code BigLong ONE}</li>
 *     <li>{@code BigLong TWO}</li>
 *     <li>{@code BigLong TEN}</li>
 * </ul>
 *
 * <p>
 * <strong>Thread Safety:</strong>
 * </p>
 * <p>
 * The `BigLong` class is immutable and thread-safe. Multiple threads can safely
 * use instances of `BigLong` without the need for external synchronization.
 * </p>
 *
 * <p>
 * <strong>Performance Considerations:</strong>
 * </p>
 * <p>
 * The `BigLong` class provides efficient arithmetic operations for large numbers,
 * but the performance will depend on the size of the numbers involved. Operations
 * on larger numbers will take more time and memory compared to smaller numbers.
 * </p>
 *
 * <p>
 * <strong>Note:</strong> The performance of the `BigLong` class may not be as efficient
 * as the built-in numeric types for smaller numbers. It is recommended to use the
 * `BigLong` class only when dealing with integers that exceed the capacity of the
 * built-in types.
 * </p>
 *
 * <p>
 * <strong>Implementation Notes:</strong>
 * </p>
 * <p>
 * The `BigLong` class is implemented using an array of longs to store the digits of
 * the number. The arithmetic operations are performed based on the decimal place
 * values of the digits, following the rules of addition, subtraction, multiplication,
 * division, and modulo.
 * </p>
 *
 * <p>
 * The class provides a set of helper methods for common operations such as factorial,
 * power, greatest common divisor (GCD), least common multiple (LCM), primality testing, 
 * and checking for even/odd/zero.
 * </p>
 *
 * <p>
 * The class also provides the necessary constructors, accessor methods, and overrides
 * for object equality and hash code calculation.
 * </p>
 *
 * <p>
 * The class also provides the ability of memoization(Dynamic Programming) to save vital
 * resources of the machine that it is using.
 * @see <a herf = "https://en.wikipedia.org/wiki/Memoization">Memoization</a>
 * </p>
 * 
 * <p>
 * <li><strong>Author:</strong> Mohith. P</li>
 * <li><strong>Version:</strong> 2.0</li>
 * <li><strong>Built On:</strong> Java 20.0.1</li>
 * <li><strong>Built With:</strong> Eclipse IDE(2023 - 06)</li>
 * 
 * </p>
 **/

public class BigLong
{

	/**
	 * <p> 
	 * A BigLong constant that store the value of <strong>0</strong>.
	 * </p>
	 * 
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = BigLong.ZERO;
     *     BigLong num2 = BigLong.valueOf(num1);
     *     System.out.println(num2.toString()); // Output: 0
     * </pre>
	 * */
	public static final BigLong ZERO = new BigLong("0");
	

	/**
	 * <p> 
	 * A BigLong constant that store the value of <strong>1</strong>.
	 * </p>
	 * 
	 * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = BigLong.ONE;
     *     BigLong num2 = BigLong.valueOf(num1);
     *     System.out.println(num2.toString()); // Output: 1
     * </pre>
	 * */
	public static final BigLong ONE = new BigLong("1");
	

	/**
	 * <p> 
	 * A BigLong constant that store the value of <strong>2</strong>.
	 * </p>
	 * 
	 * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = BigLong.TWO;
     *     BigLong num2 = BigLong.valueOf(num1);
     *     System.out.println(num2.toString()); // Output: 2
     * </pre>
	 * */
	public static final BigLong TWO = new BigLong("2");
	

	/**
	 * <p> 
	 * A BigLong constant that store the value of <strong>10</strong>.
	 * </p>
	 * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = BigLong.TEN;
     *     BigLong num2 = BigLong.valueOf(num1);
     *     System.out.println(num2.toString()); // Output: 10
     * </pre>
	 * */
	public static final BigLong TEN = new BigLong("10"); 
	
	
	//Other important constants use in the program.
	private static final int BASE = 10;
	private long[] value;
	private boolean negative;
	private static final long RADIX = 10_000_000_000L; // 10^10

	
	/**
	 * Memoization cache for hexadecimal representations of `BigLong` numbers.
	 *
	 * <p>
	 * The `memoizationCacheForHex` map is used to store previously calculated hexadecimal representations of `BigLong` numbers. This memoization cache is used to improve performance by avoiding redundant calculations when converting `BigLong` numbers to hexadecimal strings.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the hexadecimal representations, store the hexadecimal string as the value in this cache using the `BigLong` number as the key.
	 * </p>
	 */
	private static Map<BigLong, String> memoizationCacheForHex = new HashMap<>();

	
	/**
	 * Memoization cache for octal representations of `BigLong` numbers.
	 *
	 * <p>
	 * The `memoizationCacheForOct` map is used to store previously calculated octal representations of `BigLong` numbers. This memoization cache is used to improve performance by avoiding redundant calculations when converting `BigLong` numbers to octal strings.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the octal representations, store the octal string as the value in this cache using the `BigLong` number as the key.
	 * </p>
	 */
	private static Map<BigLong, String> memoizationCacheForOct = new HashMap<>();

	
	/**
	 * Memoization cache for binary representations of `BigLong` numbers.
	 *
	 * <p>
	 * The `memoizationCacheForBin` map is used to store previously calculated binary representations of `BigLong` numbers. This memoization cache is used to improve performance by avoiding redundant calculations when converting `BigLong` numbers to binary strings.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the binary representations, store the binary string as the value in this cache using the `BigLong` number as the key.
	 * </p>
	 */
	private static Map<BigLong, String> memoizationCacheForBin = new HashMap<>();

	
	/**
	 * Memoization cache for powering `BigLong` numbers to a specific exponent.
	 *
	 * <p>
	 * The `memoizationCacheForPow` map is used to store previously calculated results of powering `BigLong` numbers to specific exponents. This memoization cache is used to improve performance by avoiding redundant exponentiation calculations.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the exponentiation results, store the result `BigLong` as the value in this cache using a `PowCacheKey` as the key.
	 * </p>
	 */
	private static Map<PowCacheKey, BigLong> memoizationCacheForPow = new HashMap<>();

	
	/**
	 * Memoization cache for calculating factorials of `BigLong` numbers.
	 *
	 * <p>
	 * The `memoizationCacheForFact` map is used to store previously calculated factorials of `BigLong` numbers. This memoization cache is used to improve performance by avoiding redundant factorial calculations.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the factorial results, store the result `BigLong` as the value in this cache using the `BigLong` number as the key.
	 * </p>
	 */
	private static Map<BigLong, BigLong> memoizationCacheForFact = new HashMap<>();

	
	/**
	 * Memoization cache for calculating remainders (modulo) of division operations involving `BigLong` numbers.
	 *
	 * <p>
	 * The `memoizationCacheForModulus` map is used to store previously calculated remainders (modulo) of division operations involving `BigLong` numbers. This memoization cache is used to improve performance by avoiding redundant modulo calculations.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the modulo results, store the result `BigLong` as the value in this cache using a `ModulusCacheKey` as the key.
	 * </p>
	 */
	private static Map<ModulusCacheKey, BigLong> memoizationCacheForModulus = new HashMap<>();

	
	/**
	 * Memoization cache for division operations involving `BigLong` numbers.
	 *
	 * <p>
	 * The `memoizationCacheForDivide` map is used to store previously calculated results of division operations involving `BigLong` numbers. This memoization cache is used to improve performance by avoiding redundant division calculations.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the division results, store the result `BigLong` as the value in this cache using a `DivideCacheKey` as the key.
	 * </p>
	 */
	private static Map<DivideCacheKey, BigLong> memoizationCacheForDivide = new HashMap<>();

	
	/**
	 * Memoization cache for dividing `BigLong` numbers and returning `BigDecimal` results with specific precision.
	 *
	 * <p>
	 * The `divideToBigDecimalCache1`, `divideToBigDecimalCache2`, and `divideToBigDecimalCache3` maps are used to store previously calculated `BigDecimal` results of division operations involving `BigLong` numbers with specific precisions and rounding modes. These memoization caches are used to improve performance by avoiding redundant division calculations.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the `BigDecimal` division results, store the result `BigDecimal` as the value in the appropriate cache using a `DivideToBigDecimalCacheKey1`, `DivideToBigDecimalCacheKey2`, or `DivideToBigDecimalCacheKey3` as the key.
	 * </p>
	 */
	private static Map<DivideToBigDecimalCacheKey1, BigDecimal> divideToBigDecimalCache1 = new HashMap<>();
	
	
	/**
	 * Memoization cache for dividing `BigLong` numbers and returning `BigDecimal` results with specific precision.
	 *
	 * <p>
	 * The `divideToBigDecimalCache1`, `divideToBigDecimalCache2`, and `divideToBigDecimalCache3` maps are used to store previously calculated `BigDecimal` results of division operations involving `BigLong` numbers with specific precisions and rounding modes. These memoization caches are used to improve performance by avoiding redundant division calculations.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the `BigDecimal` division results, store the result `BigDecimal` as the value in the appropriate cache using a `DivideToBigDecimalCacheKey1`, `DivideToBigDecimalCacheKey2`, or `DivideToBigDecimalCacheKey3` as the key.
	 * </p>
	 */
	private static Map<DivideToBigDecimalCacheKey2, BigDecimal> divideToBigDecimalCache2 = new HashMap<>();
	
	
	/**
	 * Memoization cache for dividing `BigLong` numbers and returning `BigDecimal` results with specific precision.
	 *
	 * <p>
	 * The `divideToBigDecimalCache1`, `divideToBigDecimalCache2`, and `divideToBigDecimalCache3` maps are used to store previously calculated `BigDecimal` results of division operations involving `BigLong` numbers with specific precisions and rounding modes. These memoization caches are used to improve performance by avoiding redundant division calculations.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * To memoize the `BigDecimal` division results, store the result `BigDecimal` as the value in the appropriate cache using a `DivideToBigDecimalCacheKey1`, `DivideToBigDecimalCacheKey2`, or `DivideToBigDecimalCacheKey3` as the key.
	 * </p>
	 */
	private static Map<DivideToBigDecimalCacheKey3, BigDecimal> divideToBigDecimalCache3 = new HashMap<>();;



    
	/**
	 * Constructs a new `BigLong` instance with the value zero.
	 *
	 * <p>
	 * The default constructor creates a new `BigLong` instance with the value zero.
	 * </p>
	 *
	 * <p>
	 * Example usage:
	 * <pre>
	 * {@code
	 * BigLong num = new BigLong();
	 * System.out.println(num); // Output: 0
	 * }
	 * </pre>
	 * </p>
	 */
	public BigLong() {
	    this.value = new long[] {0};
	    this.negative = false;
	}

		
	/**
	 * Constructs a new `BigLong` instance with the specified value and sign.
	 *
	 * <p>
	 * The constructor creates a new `BigLong` instance with the specified value and sign. The value is represented as an array of longs, where each element represents a decimal place. The sign determines whether the number is positive or negative.
	 * </p>
	 *
	 * <p>
	 * Note: The constructor automatically trims any leading zeros from the value array.
	 * </p>
	 *
	 * <p>
	 * Example usage:
	 * <pre>
	 * {@code
	 * long[] value = {1, 2, 3, 4, 5};
	 * boolean negative = false;
	 * BigLong num = new BigLong(value, negative);
	 * System.out.println(num); // Output: 54321
	 * }
	 * </pre>
	 * </p>
	 *
	 * @param value    The array representing the value of the number.
	 * @param negative The sign of the number. Set to true for negative, false for positive.
	 */
	public BigLong(long[] value, boolean negative) {
	    this.value = value;
	    this.negative = negative;
	    this.trim();
	}

	
	/**
	 * Constructs a new BigLong instance from the given string value.
	 *
	 * <p>
	 * The string value should represent a valid decimal number. The string can optionally end with 'L' to indicate a long value.
	 * </p>
	 *
	 * <p>
	 * The constructor converts the string value into an internal representation of the number, stored as an array of longs.
	 * Each long represents a decimal digit of the number, with the least significant digit at index 0.
	 * </p>
	 *
	 * <p>
	 * If the string value contains invalid characters or does not represent a valid decimal number, an IllegalArgumentException is thrown.
	 * </p>
	 *
	 * <p>
	 * Example usage:
	 * <pre>
	 * {@code
	 * BigLong num1 = new BigLong("123456789");
	 * BigLong num2 = new BigLong("987654321L");
	 * BigLong num3 = new BigLong("-1234567890L");
	 * }
	 * </pre>
	 * </p>
	 *
	 * @param value The string value representing the number.
	 * @throws IllegalArgumentException If the string value contains invalid characters or does not represent a valid decimal number.
	 */
	public BigLong(String value) {
	    int length = value.length();
	    if (value.endsWith("L")) {
	        length--; // Exclude the 'L' suffix from the length
	    }
	    
	    if(value.startsWith("-"))
	    {
	    	this.negative = true;
	    	value = value.substring(1,length);
	    	length--;
	    }
	    
	    else if(value.startsWith("+"))
	    {
	    	this.negative = false;
	    	value = value.substring(1,length);
	    	length--;
	    }
	    
	    this.value = new long[length];

	    for (int i = 0; i < length; i++) {
	        char ch = value.charAt(length - 1 - i);
	        if (Character.isDigit(ch)) {
	            this.value[i] = ch - '0';
	        } else {
	            throw new IllegalArgumentException("Invalid character in BigLong string: " + ch + " at index " + i);
	        }
	    }
	}

	
    
//---------------------------------------------------------------------------------------------------------------------------------|
//---------------------------------------------------------------------------------------------------------------------------------|
/*                               INTEGERAL CONSTRUCTORS [INCLUDING ARRAY CONSTRUCTORS]
 *                               -----------------------------------------------------
 *                                     
  These Constructors below will take the "BIGLONG","INTEGER","SHORT","BYTE" and "BIGINTEGER" values.
  After Creating them, it will be sent to the BigLong(String value) constructor for evaluation.
*/    

    
    
	/**
	 * Constructs a new BigLong instance from the given BigLong object.
	 *
	 * <p>
	 * The constructor creates a new BigLong instance with the same value as the given BigLong 
	 * object.
	 * </p>
	 *
	 * @param other The BigLong object to create a new instance from.
	 */
	public BigLong(BigLong other) {
	    this.value = Arrays.copyOf(other.value, other.value.length);
	    this.negative = other.negative;
	    this.trim();
	}

    
	/**
	 * Constructs a new BigLong instance from the given long value.
	 *
	 * <p>
	 * The constructor creates a new BigLong instance with the value of the given long. If the value is negative,
	 * the BigLong will have a negative sign, otherwise, it will have a positive sign.
	 * </p>
	 *
	 * @param value The long value to create a new instance from.
	 */
	public BigLong(long value) {
	    this(Long.toString(value));
	    if(value >= 0)
	    	this.negative = false;
	    else
	    	this.negative = true;
	}

    
	/**
	 * Constructs a new BigLong instance from the given integer value.
	 *
	 * <p>
	 * The constructor creates a new BigLong instance with the value of the given integer. The integer is converted
	 * to a string representation and passed to the {@link #BigLong(String)} constructor to create the BigLong instance.
	 * </p>
	 *
	 * @param n The integer value to create a new instance from.
	 */
	public BigLong(int n) {
	    this(Integer.toString(n));
	    if(n >= 0)
	    	this.negative = false;
	    else
	    	this.negative = true;
	}

    
	/**
	 * Constructs a new BigLong instance from the given short value.
	 *
	 * <p>
	 * The constructor creates a new BigLong instance with the value of the given short. The short is converted
	 * to a string representation and passed to the {@link #BigLong(String)} constructor to create the BigLong instance.
	 * </p>
	 *
	 * @param n The short value to create a new instance from.
	 */
	public BigLong(short n) {
	    this(Short.toString(n));
	    if(n >= 0)
	    	this.negative = false;
	    else
	    	this.negative = true;
	}
	
	
	/**
	 * Constructs a new BigLong instance from the given byte value.
	 *
	 * <p>
	 * The constructor creates a new BigLong instance with the value of the given byte. The byte is converted
	 * to a string representation and passed to the {@link #BigLong(String)} constructor to create the BigLong instance.
	 * </p>
	 *
	 * @param n The byte value to create a new instance from.
	 */
	public BigLong(byte n) {
	    this(Byte.toString(n));
	    if(n >= 0)
	    	this.negative = false;
	    else
	    	this.negative = true;
	}

    
	/**
	 * Constructs a new BigLong instance from the given BigInteger value.
	 *
	 * <p>
	 * The constructor creates a new BigLong instance with the value of the given BigInteger. The BigInteger is converted
	 * to a string representation using the {@link BigInteger#toString()} method and passed to the {@link #BigLong(String)}
	 * constructor to create the BigLong instance.
	 * </p>
	 *
	 * @param n The BigInteger value to create a new instance from.
	 */
	public BigLong(BigInteger n) {
	    this(n.toString());
	    if(n.compareTo(BigInteger.ZERO) == 1 || n.compareTo(BigInteger.ZERO) == 0)
	    	this.negative = false;
	    else
	    	this.negative = true;
	}


/** 
  This constructor takes an array of long integers as an argument and sets the value of the BigLong object to the same array.
**/
	public BigLong(long[] value) 
    {
      this.value = value;
    }
      

//---------------------------------------------------------------------------------------------------------------------------------|
//---------------------------------------------------------------------------------------------------------------------------------|
/*                           FLOATING POINT CONSTRUCTORS [INCLUDING ARRAY CONSTRUCTORS]
 *                           ----------------------------------------------------------
 *                                        
These Constructors below will round the "DOUBLE", "FLOAT" and "BIGDECIMAL" values.
After rounding them, it will be sent to the BigLong(String value) constructor for evaluation.
*/

	
	/**
	 * Constructs a {@code BigLong} from a {@code double} value.
	 *
	 * <p>
	 * The {@code BigLong} constructor creates a new instance by converting a {@code double} value to a {@code BigLong}.
	 * It rounds the {@code double} value to the nearest integer using {@link Math#round(double)}, converts the rounded value
	 * to a {@code BigInteger}, and then initializes the {@code BigLong} accordingly. The constructor also sets the sign
	 * of the {@code BigLong} based on the sign of the original {@code double} value.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@code n} - The {@code double} value to create a {@code BigLong} from.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 * double doubleValue = -12345.678;
	 * BigLong bigLongValue = new BigLong(doubleValue);
	 * System.out.println("BigLong value: " + bigLongValue); // Output: -12346
	 * </pre>
	 *
	 * <p>
	 * <strong>Note:</strong>
	 * </p>
	 * <p>
	 * The {@code double} value is rounded to the nearest integer before converting it to a {@code BigLong}.
	 * The sign of the {@code BigLong} is set based on the sign of the original {@code double} value.
	 * </p>
	 *
	 * @param n The {@code double} value to create a {@code BigLong} from.
	 */
	public BigLong(double n) {
	    this(new BigInteger(Long.toString(Math.round(n))));
	    if (n >= 0) {
	        this.negative = false;
	    } else {
	        this.negative = true;
	    }
	}


    /**
     * Constructs a {@code BigLong} from a {@code float} value.
     *
     * <p>
     * The {@code BigLong} constructor creates a new instance by converting a {@code float} value to a {@code BigLong}.
     * It rounds the {@code float} value to the nearest integer using {@link Math#round(float)}, converts the rounded value
     * to a {@code long}, and then initializes the {@code BigLong} accordingly.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>{@code n} - The {@code float} value to create a {@code BigLong} from.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * float floatValue = 12345.678f;
     * BigLong bigLongValue = new BigLong(floatValue);
     * System.out.println("BigLong value: " + bigLongValue); // Output: 12346
     * </pre>
     *
     * <p>
     * <strong>Note:</strong>
     * </p>
     * <p>
     * The {@code float} value is rounded to the nearest integer before converting it to a {@code BigLong}.
     * </p>
     *
     * @param n The {@code float} value to create a {@code BigLong} from.
     */
    public BigLong(float n) {
        this(Long.toString(Math.round(n)));
    }

   
    /**
     * Constructs a {@code BigLong} from a {@link BigDecimal} value.
     *
     * <p>
     * The {@code BigLong} constructor creates a new instance by converting a {@link BigDecimal} value to a {@code BigLong}.
     * It extracts the integer part of the {@code BigDecimal} as a {@link BigInteger} and initializes the {@code BigLong}
     * accordingly. Additionally, it determines whether the {@code BigLong} should represent a negative value based on the
     * sign of the {@code BigDecimal}.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>{@code decimal} - The {@link BigDecimal} value to create a {@code BigLong} from.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * BigDecimal decimalValue = new BigDecimal("12345.678");
     * BigLong bigLongValue = new BigLong(decimalValue);
     * System.out.println("BigLong value: " + bigLongValue); // Output: 12345
     * </pre>
     *
     * <p>
     * <strong>Note:</strong>
     * </p>
     * <p>
     * The {@code BigLong} will be considered negative if the input {@link BigDecimal} is less than zero, and non-negative
     * otherwise.
     * </p>
     *
     * @param decimal The {@link BigDecimal} value to create a {@code BigLong} from.
     */
    public BigLong(BigDecimal decimal) {
        this(decimal.toBigInteger());
        if (decimal.compareTo(BigDecimal.ZERO) >= 0)
            this.negative = false;
        else
            this.negative = true;
    }



//---------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------
//                                                  HELPER METHODS
//                                                  --------------
   
    /**
     * Reads a line of input from the standard input (System.in) and parses it as a BigLong.
     *
     * <p>
     * The {@code readLine} method reads a line of text from the standard input, expecting it to represent a numerical value.
     * It then creates a new {@link BigLong} instance from the parsed input string and returns it.
     * </p>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <p>
     * A {@link BigLong} instance representing the numerical value read from the standard input.
     * </p>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * BigLong number = BigLong.readLine();
     * System.out.println("Entered number: " + number);
     * </pre>
     *
     * <p>
     * <strong>Note:</strong>
     * </p>
     * <p>
     * This method assumes that the input provided via standard input (System.in) is a valid numerical representation that can be
     * parsed into a {@link BigLong}. If the input cannot be parsed as a valid numerical value, it may result in a runtime exception.
     * </p>
     *
     * @return A {@link BigLong} instance representing the numerical value read from the standard input.
     *
     * @see BigLong#BigLong(String)
     */
    public static BigLong readLine() 
    {
        Scanner sc = new Scanner(System.in);
        String S = sc.next();
        sc.close();
        return new BigLong(S);
    }

    
   /**
    * Parses the specified string and returns a new `BigLong` instance representing the parsed value.
    *
    * <p>
    * The `parseBigLong` method parses the specified string and constructs a new `BigLong` instance with the
    * value represented by the string. The string must contain only numeric characters (0-9) and an optional
    * leading minus sign (-) to indicate a negative value.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *     <li>{@code s} - The string to be parsed as a `BigLong`.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *     <li>A new `BigLong` instance representing the parsed value.</li>
    * </ul>
    *
    * <p>
    * <strong>Throws:</strong>
    * </p>
    * <ul>
    *     <li>{@code NumberFormatException} - If the string does not contain a valid numeric representation.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     String str = "123456789";
    *     BigLong num = BigLong.parseBigLong(str);
    *     System.out.println(num); // Output: 123456789
    * </pre>
    */
   public static BigLong parseBigLong(String s)
   {
	   return new BigLong(s);
   }
   
   
   /**
    * Compares this `BigLong` with the specified `BigLong` for order.
    *
    * <p>
    * The `compareTo` method compares this `BigLong` with the specified `BigLong` to determine their relative order.
    * It returns a negative integer, zero, or a positive integer if this `BigLong` is less than, equal to, or greater than
    * the specified `BigLong`, respectively.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *     <li>{@code other} - The `BigLong` to be compared with this `BigLong`.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *     <li>A negative integer if this `BigLong` is less than the specified `BigLong`.</li>
    *     <li>Zero if this `BigLong` is equal to the specified `BigLong`.</li>
    *     <li>A positive integer if this `BigLong` is greater than the specified `BigLong`.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("123");
    *     BigLong num2 = new BigLong("456");
    *     int result = num1.compareTo(num2);
    *     System.out.println(result); // Output: -1
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * The `compareTo` method compares the lengths of the internal arrays representing the values of the `BigLong` instances.
    * If the lengths are different, the method returns a comparison result based on the lengths.
    * If the lengths are the same, the method iterates through the arrays from the most significant digit to the least
    * significant digit and compares the digits at each position. The comparison result is determined by the first non-equal
    * pair of digits encountered, or zero if all digits are equal.
    * </p>
    */
   public int compareTo(BigLong other) 
   {
     if (this.value.length < other.value.length) 
        return -1;
     else if (this.value.length > other.value.length) 
        return 1; 
     else 
     {
        for (int i = this.value.length - 1; i >= 0; i--) 
        {
           if (this.value[i] < other.value[i]) 
           {
               return -1;
           }
           else if (this.value[i] > other.value[i]) 
           {
               return 1;
           }
        }
        return 0;
      }
   }
   
   
   /**
    * Returns a `BigLong` instance with the same value as the specified `BigLong`.
    *
    * <p>
    * The `valueOf` method creates a new `BigLong` instance with the same value as the specified `BigLong`.
    * It is a convenience method to obtain a new instance with the same value as an existing `BigLong` object.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *     <li>{@code value} - The `BigLong` instance to obtain the value from.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *     <li>A new `BigLong` instance with the same value as the specified `BigLong`.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("123");
    *     BigLong num2 = BigLong.valueOf(num1);
    *     System.out.println(num2.toString()); // Output: 123
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method creates a new `BigLong` instance using the constructor that takes a `long[]` array as the value.
    * It copies the internal array of the specified `BigLong` to ensure that the new instance has a separate
    * internal representation.
    * </p>
    */
   public static BigLong valueOf(BigLong value) 
   {
	  return new BigLong(value.value);
   }
  
   
   /**
    * Multiplies this `BigLong` number by ten.
    *
    * <p>
    * The `multiplyByTen` method multiplies the value of this `BigLong` number by ten. It shifts the digits
    * one place to the left and adds a zero in the units place.
    * </p>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num = new BigLong("123");
    *     num.multiplyByTen();
    *     System.out.println(num.toString()); // Output: 1230
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method multiplies each digit of the `BigLong` number by ten and stores the result in a new array.
    * It also keeps track of the carry while performing the multiplication. If there is a non-zero carry after
    * the multiplication, it adds it as the most significant digit of the result. If the result has leading zeros,
    * they are trimmed off.
    * </p>
    */
   public void multiplyByTen() 
   {
	   if (this.value.length == 1 && this.value[0] == 0) 
	   {
	       // No need to multiply if the value is already 0
	       return;
       }

	   int length = this.value.length;
	   long[] result = new long[length + 1];
	   long carry = 0;

	   for (int i = length - 1; i >= 0; i--) 
	   {
	       long product = this.value[i] * 10 + carry;
	       result[i + 1] = product % 10;
	       carry = product / 10;
	   }

	   if (carry != 0) 
	   {
	       result[0] = carry;
	   } 
	   else 
	   {
	       // Remove any leading zeros
	       int k = 0;
	       while (k < result.length - 1 && result[k] == 0) 
	       {
	           k++;
	       }
	       long[] trimmedResult = new long[result.length - k];
	       System.arraycopy(result, k, trimmedResult, 0, trimmedResult.length);
	       result = trimmedResult;
	   }

	   this.value = result;
   }
   
   
   /**
    * Checks if this `BigLong` number is zero.
    *
    * <p>
    * The `isZero` method checks if this `BigLong` number is equal to zero and returns `true` if it is,
    * and `false` otherwise.
    * </p>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    * <li>`true` if this `BigLong` number is equal to zero, `false` otherwise.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("0");
    *     boolean isZero1 = num1.isZero();
    *     System.out.println("Is zero? " + isZero1); // Output: Is zero? true
    *
    *     BigLong num2 = new BigLong("123456789");
    *     boolean isZero2 = num2.isZero();
    *     System.out.println("Is zero? " + isZero2); // Output: Is zero? false
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method checks if the `BigLong` number has a single digit in its value array, which is zero.
    * If the length of the value array is 1 and the digit at index 0 is zero, it returns `true`, indicating
    * that the `BigLong` number is zero. Otherwise, it returns `false`.
    * </p>
    *
    * @return `true` if this `BigLong` number is equal to zero, `false` otherwise.
    */
   public boolean isZero() 
   {
      return value.length == 1 && value[0] == 0;
   }
	
   
   /**
    * Multiplies this `BigLong` number by a power of ten.
    *
    * <p>
    * The `multiplyByPowerOfTen` method multiplies this `BigLong` number by a power of ten and returns the result
    * as a new `BigLong` instance.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    * <li>`n` - The power of ten by which to multiply this `BigLong` number. Must be non-negative.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    * <li>A new `BigLong` instance representing the result of multiplying this `BigLong` by the specified power of ten.</li>
    * </ul>
    *
    * <p>
    * <strong>Throws:</strong>
    * </p>
    * <ul>
    * <li>`IllegalArgumentException` - If the specified power of ten `n` is negative.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("123456789");
    *     BigLong result1 = num1.multiplyByPowerOfTen(3);
    *     System.out.println("Result: " + result1.toString()); // Output: Result: 123456789000
    *
    *     BigLong num2 = new BigLong("-987654321");
    *     BigLong result2 = num2.multiplyByPowerOfTen(5);
    *     System.out.println("Result: " + result2.toString()); // Output: Result: -98765432100000
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method performs the multiplication by a power of ten algorithm by creating a new `BigLong` instance
    * with an expanded array length to accommodate the additional zeros. It then copies the original digits of
    * this `BigLong` number to the new array starting from the specified index. The result is a new `BigLong`
    * instance with the multiplied value.
    * </p>
    *
    * @param n The power of ten by which to multiply this `BigLong` number. Must be non-negative.
    * @return A new `BigLong` instance representing the result of multiplying this `BigLong` by the specified power of ten.
    * @throws IllegalArgumentException If the specified power of ten `n` is negative.
    */
   public BigLong multiplyByPowerOfTen(int n) 
   {
	   if (n < 0) 
	   {
	       throw new IllegalArgumentException("n must be non-negative");
	   }

	   int length = value.length;
	   long[] result = new long[length + n];
	   System.arraycopy(value, 0, result, n, length);
	   return new BigLong(result);
   }
   
   
   /**
    * Divides this `BigLong` number by ten.
    *
    * <p>
    * The `divideByTen` method divides this `BigLong` number by ten and returns the result as a new `BigLong` instance.
    * </p>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    * <li>A new `BigLong` instance representing the result of dividing this `BigLong` by ten.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("123456789");
    *     BigLong result1 = num1.divideByTen();
    *     System.out.println("Result: " + result1.toString()); // Output: Result: 12345678
    *
    *     BigLong num2 = new BigLong("-987654321");
    *     BigLong result2 = num2.divideByTen();
    *     System.out.println("Result: " + result2.toString()); // Output: Result: -98765432
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method performs the division by ten algorithm by dividing each digit of the `BigLong` number by ten
    * and updating the resulting array. It removes any leading zeros in the resulting array and returns a new
    * `BigLong` instance with the trimmed result.
    * </p>
    *
    * @return A new `BigLong` instance representing the result of dividing this `BigLong` by ten.
    */
   public BigLong divideByTen() 
   {
	   if (this.value.length == 1 && this.value[0] == 0) 
	   {
	       // If the number is zero, return zero
	       return new BigLong(0);
	   }

	   long[] result = new long[this.value.length];
	   int carry = 0;
	   for (int i = this.value.length - 1; i >= 0; i--) 
	   {
	       long temp = this.value[i] + carry * BASE;
	       result[i] = temp / 10;
	       carry = (int) (temp % 10);
	   }

	   // Remove any leading zeros
	   int k = result.length - 1;
	   while (k > 0 && result[k] == 0) 
	   {
	       k--;
	   }

	   long[] trimmedResult = new long[k + 1];
	   System.arraycopy(result, 0, trimmedResult, 0, k + 1);
	   return new BigLong(trimmedResult);
   }


   /**
    * Checks whether this `BigLong` is negative.
    *
    * <p>
    * Returns `true` if this `BigLong` is less than zero, and `false` otherwise.
    * </p>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    * <li>`true` if this `BigLong` is negative.</li>
    * <li>`false` if this `BigLong` is zero or positive.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("-123456789");
    *     boolean isNegative1 = num1.isNegative();
    *     System.out.println("Is Negative: " + isNegative1); // Output: Is Negative: true
    *
    *     BigLong num2 = new BigLong("0");
    *     boolean isNegative2 = num2.isNegative();
    *     System.out.println("Is Negative: " + isNegative2); // Output: Is Negative: false
    *
    *     BigLong num3 = new BigLong("987654321");
    *     boolean isNegative3 = num3.isNegative();
    *     System.out.println("Is Negative: " + isNegative3); // Output: Is Negative: false
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method checks the signum of the `BigLong` using the `signum()` method. If the signum is -1,
    * indicating a negative value, it returns `true`; otherwise, it returns `false`.
    * </p>
    *
    * @return `true` if this `BigLong` is negative, `false` otherwise.
    */
   public boolean isNegative() 
   {
	    return this.signum() == -1;
   }
   
   
   /**
    * Returns the signum function of this `BigLong`.
    *
    * <p>
    * The signum function determines the sign of a number and returns -1, 0, or 1, indicating
    * whether the number is negative, zero, or positive, respectively.
    * </p>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    * <li>-1 if this `BigLong` is negative.</li>
    * <li>0 if this `BigLong` is zero.</li>
    * <li>1 if this `BigLong` is positive.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("-123456789");
    *     int sign1 = num1.signum();
    *     System.out.println("Signum: " + sign1); // Output: Signum: -1
    *
    *     BigLong num2 = new BigLong("0");
    *     int sign2 = num2.signum();
    *     System.out.println("Signum: " + sign2); // Output: Signum: 0
    *
    *     BigLong num3 = new BigLong("987654321");
    *     int sign3 = num3.signum();
    *     System.out.println("Signum: " + sign3); // Output: Signum: 1
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method iterates through the digits of the `BigLong` value starting from the most significant
    * digit and checks if any digit is greater than zero. If a non-zero digit is found, the method returns
    * -1 if the `BigLong` is marked as negative, and 1 otherwise. If all digits are zero, the method returns 0.
    * </p>
    *
    * @return The signum of this `BigLong` (-1 if negative, 0 if zero, 1 if positive).
    */
   public int signum() 
   {
	    for (int i = this.value.length - 1; i >= 0; i--) 
	    {
	        if (this.value[i] > 0) 
	        {
	            return this.negative ? -1 : 1;
	        }
	    }
	    return 0;
	}
   
   
   /**
    * Returns a new `BigLong` instance with leading zeros removed.
    *
    * <p>
    * This method creates a new `BigLong` instance that has the same value as this `BigLong`,
    * but with any leading zeros removed. If the value of this `BigLong` contains only zeros,
    * the result will be a `BigLong` with a single digit of zero.
    * </p>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <p>
    * A new `BigLong` instance with leading zeros removed.
    * </p>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num = new BigLong("000123");
    *     BigLong trimmed = num.trim();
    *     System.out.println("Trimmed value: " + trimmed); // Output: Trimmed value: 123
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method starts from the most significant digit of the `BigLong` value and iterates
    * backwards until it finds the first non-zero digit. It then creates a new `BigLong` instance
    * with the digits from the first non-zero digit to the least significant digit, effectively
    * removing any leading zeros. If the original `BigLong` value does not contain any leading zeros,
    * this method returns the original `BigLong` instance itself.
    * </p>
    *
    * @return A new `BigLong` instance with leading zeros removed.
    */
   public BigLong trim() 
   {
	    int i = this.value.length - 1;
	    while (i > 0 && this.value[i] == 0) 
	    {
	        i--;
	    }
	    if (i == this.value.length - 1) 
	    {
	        return this;
	    }
	    long[] trimmed = new long[i + 1];
	    System.arraycopy(this.value, 0, trimmed, 0, i + 1);
	    return new BigLong(trimmed);
	}


   /**
    * Checks if this `BigLong` is equal to the specified `BigLong`.
    *
    * <p>
    * This method compares the value of this `BigLong` with the value of the specified `BigLong` and checks if they are equal.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <p>
    * {@code other} - The `BigLong` to compare against.
    * </p>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <p>
    * {@code true} if this `BigLong` is equal to the specified `BigLong`, {@code false} otherwise.
    * </p>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("123");
    *     BigLong num2 = new BigLong("123");
    *     boolean isEqual = num1.equals(num2);
    *     System.out.println("Is num1 equal to num2? " + isEqual); // Output: Is num1 equal to num2? true
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method checks if the lengths of the digit arrays of the two `BigLong` instances are equal.
    * If they are not equal, it immediately returns `false`, indicating that the two `BigLong` instances are not equal.
    * If the lengths are equal, it then iterates over the digits of the arrays and checks if each corresponding digit is equal.
    * If at any point a non-equal digit is found, it returns `false`.
    * If all digits are equal, it returns `true`, indicating that the two `BigLong` instances are equal.
    * </p>
    *
    * @param other The `BigLong` to compare against.
    * @return {@code true} if this `BigLong` is equal to the specified `BigLong`, {@code false} otherwise.
    */
   public boolean equals(BigLong other) 
   {
	    if (this.value.length != other.value.length) 
	    {
	        return false;
	    }
	    for (int i = 0; i < this.value.length; i++) 
	    {
	        if (this.value[i] != other.value[i]) 
	        {
	            return false;
	        }
	    }
	    return true;
	}
   
   
   /**
    * Checks if this `BigLong` is strictly greater than the specified `BigLong`.
    *
    * <p>
    * This method compares the value of this `BigLong` with the value of the specified `BigLong` and checks if this `BigLong` is strictly greater than it.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <p>
    * {@code other} - The `BigLong` to compare against.
    * </p>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <p>
    * {@code true} if this `BigLong` is strictly greater than the specified `BigLong`, {@code false} otherwise.
    * </p>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num1 = new BigLong("123");
    *     BigLong num2 = new BigLong("456");
    *     boolean isGreater = num2.isGreaterThan(num1);
    *     System.out.println("Is num2 greater than num1? " + isGreater); // Output: Is num2 greater than num1? true
    * </pre>
    *
    * <p>
    * <strong>Implementation Note:</strong>
    * </p>
    * <p>
    * This method internally uses the {@link #compareTo(BigLong)} method to compare the values of the two `BigLong` instances.
    * If the result of the comparison is greater than 0, it means that this `BigLong` is strictly greater than the specified `BigLong`.
    * </p>
    *
    * @param other The `BigLong` to compare against.
    * @return {@code true} if this `BigLong` is strictly greater than the specified `BigLong`, {@code false} otherwise.
    *
    * @see #compareTo(BigLong)
    */
	public boolean isGreaterThan(BigLong other) 
	{
	    if (this.compareTo(other) > 0) 
	    {
	        return true;
	    }
	    return false;
	}

	
	/**
	 * Checks if this `BigLong` is strictly less than the specified `BigLong`.
	 *
	 * <p>
	 * This method compares the value of this `BigLong` with the value of the specified `BigLong` and checks if this `BigLong` is strictly less than it.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <p>
	 * {@code other} - The `BigLong` to compare against.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>
	 * {@code true} if this `BigLong` is strictly less than the specified `BigLong`, {@code false} otherwise.
	 * </p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num1 = new BigLong("123");
	 *     BigLong num2 = new BigLong("456");
	 *     boolean isLesser = num1.lesserThan(num2);
	 *     System.out.println("Is num1 lesser than num2? " + isLesser); // Output: Is num1 lesser than num2? true
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * This method internally uses the {@link #compareTo(BigLong)} method to compare the values of the two `BigLong` instances.
	 * If the result of the comparison is less than 0, it means that this `BigLong` is strictly less than the specified `BigLong`.
	 * </p>
	 *
	 * @param other The `BigLong` to compare against.
	 * @return {@code true} if this `BigLong` is strictly less than the specified `BigLong`, {@code false} otherwise.
	 *
	 * @see #compareTo(BigLong)
	 */
	public boolean isLesserThan(BigLong other) 
	{
	    if (this.compareTo(other) < 0) 
	    {
	        return true;
	    }
	    return false;
	}

	
	/**
	 * Checks if this `BigLong` is greater than or equal to the specified `BigLong`.
	 *
	 * <p>
	 * This method compares the value of this `BigLong` with the value of the specified `BigLong` and returns `true`
	 * if this `BigLong` is greater than or equal to the specified `BigLong`, and `false` otherwise.
	 * </p>
	 *
	 * <p>
	 * The comparison is performed by invoking the `compareTo` method, which compares the values of two `BigLong` instances
	 * and returns an integer representing their relative order. A return value of 0 indicates that the two values are equal,
	 * a value less than 0 indicates that this `BigLong` is less than the specified `BigLong`, and a value greater than 0
	 * indicates that this `BigLong` is greater than the specified `BigLong`.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@code other} - The `BigLong` to compare against.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>
	 * `true` if this `BigLong` is greater than or equal to the specified `BigLong`, `false` otherwise.
	 * </p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num1 = new BigLong("123");
	 *     BigLong num2 = new BigLong("456");
	 *     boolean result = num1.isGreaterThanOrEqualTo(num2);
	 *     System.out.println("Is num1 >= num2? " + result); // Output: Is num1 >= num2? false
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * This method internally calls the `compareTo` method to perform the comparison. It checks the return value of `compareTo`
	 * and returns `true` if the value is 0 (indicating equality) or 1 (indicating that this `BigLong` is greater than the specified `BigLong`).
	 * Otherwise, it returns `false`.
	 * </p>
	 *
	 * @param other The `BigLong` to compare against.
	 * @return `true` if this `BigLong` is greater than or equal to the specified `BigLong`, `false` otherwise.
	 *
	 * @see #compareTo(BigLong)
	 */
	public boolean isGreaterThanOrEqualTo(BigLong other) 
	{
	    int cmp = compareTo(other);
	    return cmp == 0 || cmp == 1;
	}


	/**
	 * Checks if this `BigLong` is less than or equal to the specified `BigLong`.
	 *
	 * <p>
	 * This method compares the value of this `BigLong` with the value of the specified `BigLong` and returns `true`
	 * if this `BigLong` is less than or equal to the specified `BigLong`, and `false` otherwise.
	 * </p>
	 *
	 * <p>
	 * The comparison is performed by invoking the `compareTo` method, which compares the values of two `BigLong` instances
	 * and returns an integer representing their relative order. A return value of 0 indicates that the two values are equal,
	 * a value less than 0 indicates that this `BigLong` is less than the specified `BigLong`, and a value greater than 0
	 * indicates that this `BigLong` is greater than the specified `BigLong`.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@code other} - The `BigLong` to compare against.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>
	 * `true` if this `BigLong` is less than or equal to the specified `BigLong`, `false` otherwise.
	 * </p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num1 = new BigLong("123");
	 *     BigLong num2 = new BigLong("456");
	 *     boolean result = num1.lesserThanOrEqualTo(num2);
	 *     System.out.println("Is num1 <= num2? " + result); // Output: Is num1 <= num2? true
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * This method internally calls the `compareTo` method to perform the comparison. It checks the return value of `compareTo`
	 * and returns `true` if the value is 0 (indicating equality) or -1 (indicating that this `BigLong` is less than the specified `BigLong`).
	 * Otherwise, it returns `false`.
	 * </p>
	 *
	 * @param other The `BigLong` to compare against.
	 * @return `true` if this `BigLong` is less than or equal to the specified `BigLong`, `false` otherwise.
	 *
	 * @see #compareTo(BigLong)
	 */
	public boolean isLesserThanOrEqualTo(BigLong other) 
	{
	    int cmp = compareTo(other);
	    return cmp == 0 || cmp == -1;
	}
	
	
	/**
	 * Returns the negation of this `BigLong`.
	 *
	 * <p>
	 * This method returns a new `BigLong` instance that represents the negation (opposite sign) of this `BigLong`.
	 * If this `BigLong` is positive (non-negative), its negation with a negative sign is returned.
	 * If this `BigLong` is negative, its negation with a positive sign is returned, effectively converting it to its positive equivalent.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>
	 * A new `BigLong` instance representing the negation of this `BigLong`.
	 * </p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num1 = new BigLong("123");
	 *     BigLong negatedValue = num1.negate();
	 *     System.out.println("Negated value: " + negatedValue); // Output: Negated value: -123
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * This method creates a new `BigLong` instance with the same underlying value array as this `BigLong`,
	 * but with the opposite sign. The `negative` flag is flipped to reflect the new sign.
	 * </p>
	 *
	 * @return A new `BigLong` instance representing the negation of this `BigLong`.
	 *
	 * @see #abs()
	 * @see #negate()
	 */
	public BigLong negate() 
	{
	    return new BigLong(Arrays.copyOf(this.value, this.value.length), !this.negative);
	}
	
	
	/**
	 * Returns the negation of the specified `BigLong`.
	 *
	 * <p>
	 * This method returns a new `BigLong` instance that represents the negation (opposite sign) of the specified `BigLong`.
	 * If the specified `BigLong` is positive (non-negative), its negation with a negative sign is returned.
	 * If the specified `BigLong` is negative, its negation with a positive sign is returned, effectively converting it to its positive equivalent.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <p>
	 * {@code n} - The `BigLong` to negate.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>
	 * A new `BigLong` instance representing the negation of the specified `BigLong`.
	 * </p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num1 = new BigLong("-123");
	 *     BigLong negatedValue = BigLong.negate(num1);
	 *     System.out.println("Negated value: " + negatedValue); // Output: Negated value: 123
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * This method creates a new `BigLong` instance with the same underlying value array as the specified `BigLong`,
	 * but with the opposite sign. The `negative` flag is flipped to reflect the new sign.
	 * </p>
	 *
	 * @param n The `BigLong` to negate.
	 * @return A new `BigLong` instance representing the negation of the specified `BigLong`.
	 *
	 * @see #negate()
	 */
	public static BigLong negate(BigLong n)
	{
		return n.negate();
	}

	
	/**
	 * Returns the length of the internal value array.
	 *
	 * <p>
	 * The method returns the number of elements in the internal value array. Each element represents a decimal place in the number.
	 * </p>
	 *
	 * <p>
	 * Example usage:
	 * <pre>
	 * {@code
	 * BigLong num = new BigLong("123456789");
	 * int length = num.getLength();
	 * System.out.println(length); // Output: 9
	 * }
	 * </pre>
	 * </p>
	 *
	 * @return The length of the internal value array.
	 */
	public int getLength() {
	    return value.length;
	}

	
	/**
	 * Returns the absolute value of this `BigLong`.
	 *
	 * <p>
	 * This method returns a new `BigLong` instance that represents the absolute value of this `BigLong`.
	 * If this `BigLong` is already positive (non-negative), it is returned as is. If this `BigLong` is negative,
	 * the negation of this `BigLong` is returned, effectively converting it to its positive equivalent.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>
	 * A new `BigLong` instance representing the absolute value of this `BigLong`.
	 * </p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num1 = new BigLong("-123");
	 *     BigLong absValue = num1.abs();
	 *     System.out.println("Absolute value: " + absValue); // Output: Absolute value: 123
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * This method checks the value of the `negative` flag in this `BigLong`. If it is `true`, indicating a negative value,
	 * the `negate` method is called to obtain the negation of this `BigLong`. Otherwise, this `BigLong` is returned as is,
	 * since it is already positive (non-negative).
	 * </p>
	 *
	 * @return A new `BigLong` instance representing the absolute value of this `BigLong`.
	 *
	 * @see #negate()
	 * @see <a herf = "https://en.wikipedia.org/wiki/Absolute_value">Abs value</a>
	 */
	public BigLong abs() 
	{
	    return this.negative ? this.negate() : this;
	}
	

	/**
	 * Returns the absolute value of the given `BigLong`.
	 *
	 * <p>
	 * This method returns a new `BigLong` instance that represents the absolute value of the given `BigLong`.
	 * If the given `BigLong` is already positive (non-negative), it is returned as is. If the given `BigLong` is negative,
	 * the negation of the given `BigLong` is returned, effectively converting it to its positive equivalent.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li><strong>n:</strong> The `BigLong` for which to calculate the absolute value.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>
	 * A new `BigLong` instance representing the absolute value of the given `BigLong`.
	 * </p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num1 = new BigLong("-123");
	 *     BigLong absValue = BigLong.abs(num1);
	 *     System.out.println("Absolute value: " + absValue); // Output: Absolute value: 123
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * This method delegates to the `abs` method of the `BigLong` class for the given `BigLong` instance to calculate the absolute value.
	 * </p>
	 *
	 * @param n The `BigLong` for which to calculate the absolute value.
	 * @return A new `BigLong` instance representing the absolute value of the given `BigLong`.
	 *
	 * @see #abs()
	 * @see #negate()
 	 * @see <a herf = "https://en.wikipedia.org/wiki/Absolute_value">Abs value</a>
	 */
	public static BigLong abs(BigLong n)
	{
		return n.abs();
	}


	/**
	 * Creates and returns a copy of this `BigLong` object.
	 *
	 * <p>
	 * The `clone()` method creates and returns a new `BigLong` object that is an identical
	 * copy of the current instance. The new object will have the same value and the same
	 * internal representation as the original object.
	 * </p>
	 *
	 * <p>
	 * The `clone()` method provides a way to create an independent copy of a `BigLong` object.
	 * Modifying the copy will not affect the original object, and vice versa.
	 * </p>
	 *
	 * <p>
	 * Example usage:
	 * <pre>
	 * {@code
	 * BigLong num1 = new BigLong("123456789");
	 * BigLong num2 = num1.clone();
	 *
	 * // num2 is a separate copy of num1
	 * System.out.println(num1.toString());  // "123456789"
	 * System.out.println(num2.toString());  // "123456789"
	 *
	 * num2 = num2.add(new BigLong("100"));
	 *
	 * // Modifying num2 does not affect num1
	 * System.out.println(num1.toString());  // "123456789"
	 * System.out.println(num2.toString());  // "123456889"
	 * }
	 * </pre>
	 * </p>
	 *
	 * <p>
	 * <strong>Return Value:</strong>
	 * </p>
	 * <p>
	 * A new `BigLong` object that is a clone of the current instance.
	 * </p>
	 *
	 * <p>
	 * <strong>Thread Safety:</strong>
	 * </p>
	 * <p>
	 * The `clone()` method of the `BigLong` class is thread-safe. It creates a new object
	 * with an independent state and does not modify the internal state of the original object.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Notes:</strong>
	 * </p>
	 * <p>
	 * The `clone()` method creates a new `BigLong` object by invoking the appropriate
	 * constructor with the current instance as the argument. This ensures that the new
	 * object has the same value and internal representation as the original object.
	 * </p>
	 *
	 * <p>
	 * <strong>Note:</strong>
	 * </p>
	 * <p>
	 * The `clone()` method creates a shallow copy of the `BigLong` object. If the `BigLong`
	 * object contains references to other mutable objects, the copied object will still
	 * share those references with the original object. Modifying the shared references may
	 * affect both the original and the cloned object.
	 * </p>
	 *
	 * @return A new `BigLong` object that is a clone of the current instance.
	 *
	 * @see java.lang.Object#clone()
	 */
	public BigLong clone() {
	    return new BigLong(this);
	}

	
	/**
	 * Calculates the factorial of the given non-negative integer using iterative multiplication and returns the result as a BigLong object.
	 *
	 * <p>
	 * The factorial of a non-negative integer n, denoted as n!, is the product of all positive integers less than or equal to n.
	 * For example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120.
	 * </p>
	 *
	 * <p>
	 * This method calculates the factorial using an iterative approach, which is more efficient and does not rely on external libraries.
	 * It memoizes intermediate results to improve performance for repeated factorial calculations.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@code n} - The non-negative integer for which to calculate the factorial.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>
	 * The factorial of the given number as a BigLong. The result is computed iteratively and memoized for improved performance.
	 * </p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong result = factorial(new BigLong(5));
	 *     System.out.println("Factorial of 5: " + result);
	 * </pre>
	 *
	 * <p>
	 * <strong>Thread Safety:</strong>
	 * </p>
	 * <p>
	 * This method is not "thread-safe" for the memoization cache. It creates a new instance of the PythonInterpreter for each invocation,
	 * which may lead to resource contention and unexpected behavior in concurrent environments.
	 * </p>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * The factorial calculation is performed using an iterative approach without relying on external libraries. The result is memoized
	 * to improve performance for repeated calculations.
	 * </p>
	 *
	 * @param n The non-negative integer for which to calculate the factorial.
	 * @return The factorial of the given number as a BigLong Object.
	 *
	 * @see <a href="https://en.wikipedia.org/wiki/Factorial">Factorial</a>
	 */
	public static BigLong factorial(BigLong n) {
	    if (n.isZero()) {
	        return BigLong.ONE; // 0! = 1
	    }

	    if (memoizationCacheForFact.containsKey(n)) {
	        return memoizationCacheForFact.get(n);
	    }

	    BigLong result = BigLong.ONE;
	    BigLong originalN = new BigLong(n); // Create a copy to use as the cache key

	    while (!n.isZero()) {
	        result = result.multiply(n);
	        n = n.subtract(BigLong.ONE);
	    }
	    
	    // Memoize the result using the originalN as the key
	    memoizationCacheForFact.put(originalN, result);
	    return result;
	}


	/**
	 * Raises this `BigLong` to the power of the specified exponent and returns the result as a new `BigLong` instance.
	 *
	 * <p>
	 * The `pow` method calculates the power of this `BigLong` raised to the power of the specified exponent using standard
	 * Java operations for exponentiation. It performs the computation recursively by dividing the exponent by 2 and squaring
	 * the result, which eliminates redundant calculations. The method returns a new `BigLong` object representing the calculated power.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@code exponent} - The exponent to raise this `BigLong` to.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A new `BigLong` instance representing the calculated power.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Throws:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@code NumberFormatException} - If the exponent cannot be parsed as a valid numeric value.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong base = new BigLong("2");
	 *     BigLong exponent = new BigLong("10");
	 *     BigLong result = base.pow(exponent);
	 *     System.out.println(result); // Output: 1024
	 * </pre>
	 * 
	 * @see <a href="https://en.wikipedia.org/wiki/Exponentiation">Power</a>
	 */
	public BigLong pow(BigLong exponent) {
	    if (exponent.compareTo(BigLong.ZERO) < 0) {
	        throw new IllegalArgumentException("Exponent must be non-negative");
	    }

	    // Create a cache key using the base and exponent
	    PowCacheKey cacheKey = new PowCacheKey(this, exponent);

	    // Check if the result is already memoized
	    if (memoizationCacheForPow.containsKey(cacheKey)) {
	        return memoizationCacheForPow.get(cacheKey);
	    }

	    // Base case: Anything raised to the power of 0 is 1
	    if (exponent.equals(BigLong.ZERO)) {
	        return BigLong.ONE;
	    }

	    // Divide the exponent by 2 and calculate the result recursively
	    BigLong result;
	    if (exponent.modulo(BigLong.TWO).equals(BigLong.ZERO)) {
	        BigLong halfPow = pow(exponent.divide(BigLong.TWO));
	        result = halfPow.multiply(halfPow);
	    } else {
	        BigLong halfPow = pow(exponent.divide(BigLong.TWO));
	        result = halfPow.multiply(halfPow).multiply(this);
	    }

	    // Memoize the result for future use
	    memoizationCacheForPow.put(cacheKey, result);
	    return result;
	}


	/**
	 * Calculates the power of the specified base raised to the power of the specified exponent and returns the result as a 
	 * new `BigLong` instance.
	 *
	 * <p>
	 * The `pow` method calculates the power of the specified base raised to the power of the specified exponent. It 
	 * internally calls the `pow` method of the base `BigLong` object to perform the computation. The method simply 
	 * delegates the calculation to the `pow` method of the base object and returns the result.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@code base} - The base value.</li>
	 *     <li>{@code exponent} - The exponent value.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A new `BigLong` instance representing the calculated power.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong base = new BigLong("2");
	 *     BigLong exponent = new BigLong("10");
	 *     BigLong result = BigLong.pow(base, exponent);
	 *     System.out.println(result); // Output: 1024
	 * </pre>
	 * 
	 * @see #pow(BigLong)
	 */
	public  static BigLong pow(BigLong base, BigLong pow)
	{
		return base.pow(pow);
	}
	
	
	/**
	 * Converts the `BigLong` number to its binary representation and returns the result as a new `BigLong` instance.
	 *
	 * <p>
	 * The `toBinary` method converts the given `BigLong` number to its binary representation using standard Java operations.
	 * It repeatedly divides the number by 2 and checks the remainder to determine the binary digits. The resulting binary
	 * string is used to create a new `BigLong` instance representing the binary value.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A new `BigLong` instance representing the binary representation of the current `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     BigLong binary = num.toBinary();
	 *     System.out.println(binary); // Output: 11110001001000000
	 * </pre>
	 * </p>
     * @see <a herf = "https://en.wikipedia.org/wiki/Binary_number">Binary</a>
	 */
	public BigLong toBinary() {
	    
	    // If the number is zero, return a new BigLong with value "0".
	    if (this.isZero()) {
	        return new BigLong("0");
	    }

	    if (memoizationCacheForBin.containsKey(this)) {
	        return new BigLong(memoizationCacheForBin.get(this));
	    }
	    
	    // Create a copy of this BigLong to avoid modifying the original.
	    BigLong copy = this.clone();

	    // Create a StringBuilder to build the binary representation.
	    StringBuilder binary = new StringBuilder();

	    // Continue until the number becomes zero.
	    while (!copy.isZero()) {
	        // Check if the least significant bit is 1.
	        if (copy.isOdd()) {
	            binary.insert(0, '1');
	        } else {
	            binary.insert(0, '0');
	        }

	        // Right shift the number by one (equivalent to division by 2).
	        copy = copy.divideByTen();
	    }

	    memoizationCacheForBin.put(this, binary.toString());
	    return new BigLong(binary.toString());
	}

	
	/**
	 * Converts the given `BigLong` number to its binary representation and returns the result as a new `BigLong` instance.
	 *
	 * <p>
	 * The `toBinary` method is a static method that takes a `BigLong` number as an argument and converts it to its binary 
	 * representation using the `toBinary` method of the `BigLong` class. It simply delegates the conversion to the 
	 * instance-level `toBinary` method and returns the result.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li><code>n</code> - The `BigLong` number to convert to binary.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A new `BigLong` instance representing the binary representation of the given `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     BigLong binary = BigLong.toBinary(num);
	 *     System.out.println(binary); // Output: 11110001001000000
	 * </pre>
	 * </p>
     * 
     * @see <a herf = "https://en.wikipedia.org/wiki/Binary_number">Binary</a>
	 */
	public static BigLong toBinary(BigLong n) {
	    return n.toBinary();
	}


	/**
	 * Converts the `BigLong` number to its octal representation and returns the result as a new `BigLong` instance.
	 *
	 * <p>
	 * The `toOctal` method converts the given `BigLong` number to its octal representation by repeatedly dividing
	 * the number by 8 and extracting the remainder to determine the octal digits. The resulting octal string is then used
	 * to create a new `BigLong` instance representing the octal value.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A new `BigLong` instance representing the octal representation of the current `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     BigLong octal = num.toOctal();
	 *     System.out.println(octal); // Output: 361100
	 * </pre>
	 * </p>
     * 
     * @see <a herf = "https://en.wikipedia.org/wiki/Octal">Octal</a>
	 */
	public BigLong toOctal() {
	    // If the number is zero, return a new BigLong with value "0".
	    if (this.isZero()) {
	        return new BigLong("0");
	    }

	    if (memoizationCacheForOct.containsKey(this)) {
	        return new BigLong(memoizationCacheForOct.get(this));
	    }

	    // Create a copy of this BigLong to avoid modifying the original.
	    BigLong copy = this.clone();

	    // Create a StringBuilder to build the octal representation.
	    StringBuilder octal = new StringBuilder();

	    // Continue until the number becomes zero.
	    while (!copy.isZero()) {
	        // Extract the last three digits to convert to octal.
	        BigLong octalDigit = copy.modulo(new BigLong("8"));
	        
	        // Prepend the octal digit to the result.
	        octal.insert(0, octalDigit.toString());

	        // Right shift the number by three bits (equivalent to division by 8).
	        copy = copy.divideByTen().divideByTen().divideByTen();
	    }

	    memoizationCacheForOct.put(this, octal.toString());
	    return new BigLong(octal.toString());
	}

	
	/**
	 * Converts the given `BigLong` number to its octal representation and returns the result as a new `BigLong` instance.
	 *
	 * <p>
	 * The `toOctal` method takes a `BigLong` number as input and converts it to its octal representation by repeatedly dividing
	 * the number by 8 and extracting the remainder to determine the octal digits. The resulting octal string is used 
	 * to create a new `BigLong` instance representing the octal value.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>`n` - The `BigLong` number to convert to octal.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A new `BigLong` instance representing the octal representation of the given `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     BigLong octal = BigLong.toOctal(num);
	 *     System.out.println(octal); // Output: 361100
	 * </pre>
	 * </p>
     * 
     * @see <a herf = "https://en.wikipedia.org/wiki/Octal">Octal</a>
	 */
	public static BigLong toOctal(BigLong n)
	{
	    return n.toOctal();
	}
	
	
	/**
	 * Converts the `BigLong` number to its hexadecimal representation and returns the result as a string.
	 *
	 * <p>
	 * The `toHexadecimal` method converts the `BigLong` number to its hexadecimal representation. It performs the conversion
	 * by repeatedly dividing the number by 16 and extracting the remainder to determine the hexadecimal digits.
	 * The resulting hexadecimal string is returned as a Java string.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A string representing the hexadecimal representation of the `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     String hex = num.toHexadecimal();
	 *     System.out.println(hex); // Output: "1E240"
	 * </pre>
	 * </p>
     * 
     * <a herf = "https://en.wikipedia.org/wiki/Hexadecimal">Hexadecimal</a>
	 */
	public String toHexadecimal() {
	    
	    // If the number is zero, return "0".
	    if (this.isZero()) {
	        return "0";
	    }

	    if (memoizationCacheForHex.containsKey(this)) {
	        return memoizationCacheForHex.get(this);
	    }

	    // Create a copy of this BigLong to avoid modifying the original.
	    BigLong copy = this.clone();

	    // Define the hexadecimal characters.
	    String hexChars = "0123456789ABCDEF";

	    // Create a StringBuilder to build the hexadecimal representation.
	    StringBuilder hexadecimal = new StringBuilder();

	    // Continue until the number becomes zero.
	    while (!copy.isZero()) {
	        // Extract the last four bits to convert to hexadecimal.
	        BigLong hexDigit = copy.modulo(new BigLong("16"));
	        
	        // Prepend the hexadecimal digit to the result.
	        hexadecimal.insert(0, hexChars.charAt(hexDigit.toInt()));

	        // Right shift the number by four bits (equivalent to division by 16).
	        copy = copy.divideByTen().divideByTen().divideByTen().divideByTen();
	    }
	    memoizationCacheForHex.put(this, hexadecimal.toString());
	    return hexadecimal.toString();
	}

	
	/**
	 * Converts the specified `BigLong` number to its hexadecimal representation and returns the result as a string.
	 *
	 * <p>
	 * The `toHexadecimal` method converts the specified `BigLong` number to its hexadecimal representation. It performs the
	 * conversion by repeatedly dividing the number by 16 and extracting the remainder to determine the hexadecimal digits.
	 * The resulting hexadecimal string is returned as a Java string.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>
	 *         <code>n</code> - The `BigLong` number to be converted to hexadecimal.
	 *     </li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A string representing the hexadecimal representation of the specified `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     String hex = BigLong.toHexadecimal(num);
	 *     System.out.println(hex); // Output: "1E240"
	 * </pre>
	 * </p>
	 *
	 * @param n The `BigLong` number to be converted to hexadecimal.
	 * @return A string representing the hexadecimal representation of the specified `BigLong` number.
     * 
     * <a herf = "https://en.wikipedia.org/wiki/Hexadecimal">Hexadecimal</a>
	 */
	public static String toHexadecimal(BigLong n) {
	    return n.toHexadecimal();
	}
	

	/**
	 * Returns a string representation of the `BigLong` number.
	 *
	 * <p>
	 * The `toString` method returns a string representation of the `BigLong` number. The digits of the number are 
	 * concatenated in reverse order, from the most significant digit to the least significant digit, to form the string 
	 * representation.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A string representation of the `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     String str = num.toString();
	 *     System.out.println(str); // Output: "654321"
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * The `toString` method uses a `StringBuilder` to efficiently build the string representation of the `BigLong` number. 
	 * It iterates over the digits in reverse order and appends them to the `StringBuilder`. The resulting string is then 
	 * returned.
	 * </p>
	 */
	public String toString() 
	{
		   StringBuilder sb = new StringBuilder();
		   if(this.negative == true && !this.equals(ZERO))
		   {
			   sb.append('-');
		   }
		   for (int i = this.value.length - 1; i >= 0; i--) 
		   {
		       sb.append(this.value[i]);
		   }
		   return sb.toString();
	}
	
	
	/**
	 * Returns a string representation of the specified `BigLong` number.
	 *
	 * <p>
	 * The `toString` method returns a string representation of the specified `BigLong` number. The digits of the number are concatenated in reverse order, from the most significant digit to the least significant digit, to form the string representation.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@code n} - The `BigLong` number to convert to a string.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A string representation of the specified `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     String str = BigLong.toString(num);
	 *     System.out.println(str); // Output: "123456"
	 * </pre>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * The `toString` method internally invokes the `toString` method of the `BigLong` class, which returns the string 
	 * representation of the specified `BigLong` number.
	 * </p>
	 *
	 * @param n The `BigLong` number to convert to a string.
	 * @return A string representation of the specified `BigLong` number.
	 */
	public static String toString(BigLong n)
	   {
		   return BigLong.toString(n);
	   }
	   
	   
	/**
	 * Converts the `BigLong` number to an `int` value.
	 *
	 * <p>
	 * The `toInt` method converts the `BigLong` number to a 32-bit signed integer (`int`) value. If the `BigLong` number exceeds the range of the `int` type, an `ArithmeticException` is thrown.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>An `int` value representing the `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Throws:</strong>
	 * </p>
	 * <ul>
	 *     <li>`ArithmeticException` - If the `BigLong` number exceeds the range of the `int` type.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     int intValue = num.toInt();
	 *     System.out.println(intValue); // Output: 123456
	 * </pre>
	 *
	 * @return An `int` value representing the `BigLong` number.
	 * @throws ArithmeticException If the `BigLong` number exceeds the range of the `int` type.
	 */
	public int toInt() {
	    if (this.value.length > 10) {
	        throw new ArithmeticException("Overflow");
	    }
	    int result = 0;
	    for (int i = this.value.length - 1; i >= 0; i--) {
	        result = result * 10 + (int) this.value[i];
	    }
	    return this.negative ? -result : result;
	}
	
	
	/**
	 * Converts the specified `BigLong` number to an `int` value.
	 *
	 * <p>
	 * The `toInt` method converts the specified `BigLong` number to a 32-bit signed integer (`int`) value. If the `BigLong` number exceeds the range of the `int` type, an `ArithmeticException` is thrown.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>`n` - The `BigLong` number to convert.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>An `int` value representing the `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Throws:</strong>
	 * </p>
	 * <ul>
	 *     <li>`ArithmeticException` - If the `BigLong` number exceeds the range of the `int` type.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("123456");
	 *     int intValue = BigLong.toInt(num);
	 *     System.out.println(intValue); // Output: 123456
	 * </pre>
	 *
	 * @param n The `BigLong` number to convert.
	 * @return An `int` value representing the `BigLong` number.
	 * @throws ArithmeticException If the `BigLong` number exceeds the range of the `int` type.
	 */
	public static int toInt(BigLong n)
	 {
	 	return BigLong.toInt(n);
	 }
	   	
	   	
	 /**
	  * Converts the `BigLong` number to a `byte` value.
	  *
	  * <p>
	  * The `toByte` method converts the `BigLong` number to an 8-bit signed integer (`byte`) value. If the `BigLong` 
	  * number exceeds the range of the `byte` type, an `ArithmeticException` is thrown.
	  * </p>
	  *
	  * <p>
	  * <strong>Returns:</strong>
	  * </p>
	  * <ul>
	  *     <li>A `byte` value representing the `BigLong` number.</li>
	  * </ul>
	  *
	  * <p>
	  * <strong>Throws:</strong>
	  * </p>
	  * <ul>
	  *     <li>`ArithmeticException` - If the `BigLong` number exceeds the range of the `byte` type.</li>
	  * </ul>
	  *
	  * <p>
	  * <strong>Usage Example:</strong>
	  * </p>
	  * <pre>
	  *     BigLong num = new BigLong("42");
	  *     byte byteValue = num.toByte();
	  *     System.out.println(byteValue); // Output: 42
	  * </pre>
	  *
	  * @return A `byte` value representing the `BigLong` number.
	  * @throws ArithmeticException If the `BigLong` number exceeds the range of the `byte` type.
	  */
	public byte toByte() {
		 int intValue = toInt();
		 if (intValue < Byte.MIN_VALUE || intValue > Byte.MAX_VALUE) {
		     throw new ArithmeticException("Overflow");
		 }
		 return (byte) intValue;
	}
	   
	   
	/**
	 * Converts the specified `BigLong` number to a `byte` value.
	 *
	 * <p>
	 * The `toByte` method converts the specified `BigLong` number to an 8-bit signed integer (`byte`) value. If the 
	 * `BigLong` number exceeds the range of the `byte` type, an `ArithmeticException` is thrown.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li>`n` - The `BigLong` number to be converted.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A `byte` value representing the `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Throws:</strong>
	 * </p>
	 * <ul>
	 *     <li>`ArithmeticException` - If the `BigLong` number exceeds the range of the `byte` type.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong num = new BigLong("42");
	 *     byte byteValue = BigLong.toByte(num);
	 *     System.out.println(byteValue); // Output: 42
	 * </pre>
	 *
	 * @param n The `BigLong` number to be converted.
	 * @return A `byte` value representing the `BigLong` number.
	 * @throws ArithmeticException If the `BigLong` number exceeds the range of the `byte` type.
	 */
	public static byte toByte(BigLong n)
	{
	   return BigLong.toByte(n);
	}
	   
	   
   /**
    * Converts the specified `BigLong` number to a `short` value.
    *
    * <p>
    * The `toShort` method converts the specified `BigLong` number to a 16-bit signed integer (`short`) value. If the 
    * `BigLong` number exceeds the range of the `short` type, an `ArithmeticException` is thrown.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *     <li>`n` - The `BigLong` number to be converted.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *     <li>A `short` value representing the `BigLong` number.</li>
    * </ul>
    *
    * <p>
    * <strong>Throws:</strong>
    * </p>
    * <ul>
    *     <li>`ArithmeticException` - If the `BigLong` number exceeds the range of the `short` type.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num = new BigLong("12345");
    *     short shortValue = BigLong.toShort(num);
    *     System.out.println(shortValue); // Output: 12345
    * </pre>
    *
    * @param n The `BigLong` number to be converted.
    * @return A `short` value representing the `BigLong` number.
    * @throws ArithmeticException If the `BigLong` number exceeds the range of the `short` type.
    */
   public short toShort() {
	    int intValue = toInt();
	    if (intValue < Short.MIN_VALUE || intValue > Short.MAX_VALUE) {
	        throw new ArithmeticException("Overflow");
	    }
	    return (short) intValue;
	}
   
   
   /**
    * Converts the specified `BigLong` number to a `short` value.
    *
    * <p>
    * The `toShort` method converts the specified `BigLong` number to a 16-bit signed integer (`short`) value. If the 
    * `BigLong` number exceeds the range of the `short` type, an `ArithmeticException` is thrown.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *     <li>`n` - The `BigLong` number to be converted.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *     <li>A `short` value representing the `BigLong` number.</li>
    * </ul>
    *
    * <p>
    * <strong>Throws:</strong>
    * </p>
    * <ul>
    *     <li>`ArithmeticException` - If the `BigLong` number exceeds the range of the `short` type.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num = new BigLong("12345");
    *     short shortValue = BigLong.toShort(num);
    *     System.out.println(shortValue); // Output: 12345
    * </pre>
    *
    * @param n The `BigLong` number to be converted.
    * @return A `short` value representing the `BigLong` number.
    * @throws ArithmeticException If the `BigLong` number exceeds the range of the `short` type.
    */
   public static short toShort(BigLong n)
   {
	   return n.toShort();
   }
   
   
   /**
    * Converts the specified `BigLong` number to a `long` value.
    *
    * <p>
    * The `toLong` method converts the specified `BigLong` number to a 64-bit signed integer (`long`) value. If the 
    * `BigLong` number exceeds the range of the `long` type, an `ArithmeticException` is thrown.
    * </p>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *     <li>A `long` value representing the `BigLong` number.</li>
    * </ul>
    *
    * <p>
    * <strong>Throws:</strong>
    * </p>
    * <ul>
    *     <li>`ArithmeticException` - If the `BigLong` number exceeds the range of the `long` type.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num = new BigLong("1234567890123456789");
    *     long longValue = num.toLong();
    *     System.out.println(longValue); // Output: 1234567890123456789
    * </pre>
    *
    * @return A `long` value representing the `BigLong` number.
    * @throws ArithmeticException If the `BigLong` number exceeds the range of the `long` type.
    */
   public long toLong() {
	   if (this.value.length > 19) {
		   throw new ArithmeticException("Overflow");
	   }
	   long result = 0;
	   for (int i = this.value.length - 1; i >= 0; i--) {
           result = result * 10 + this.value[i];
	   }
	   return this.negative ? -result : result;
	}
   
   
   /**
    * Converts the specified `BigLong` number to a `long` value.
    *
    * <p>
    * The `toLong` method converts the specified `BigLong` number to a 64-bit signed integer (`long`) value. If the `BigLong` number exceeds the range of the `long` type, an `ArithmeticException` is thrown.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *     <li>`n` - The `BigLong` number to be converted.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *     <li>A `long` value representing the `BigLong` number.</li>
    * </ul>
    *
    * <p>
    * <strong>Throws:</strong>
    * </p>
    * <ul>
    *     <li>`ArithmeticException` - If the `BigLong` number exceeds the range of the `long` type.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    *     BigLong num = new BigLong("1234567890123456789");
    *     long longValue = BigLong.toLong(num);
    *     System.out.println(longValue); // Output: 1234567890123456789
    * </pre>
    *
    * @param n The `BigLong` number to be converted.
    * @return A `long` value representing the `BigLong` number.
    * @throws ArithmeticException If the `BigLong` number exceeds the range of the `long` type.
    */
   	public static long toLong(BigLong n)
  	{
   		return n.toLong();
  	}
	   
   	
   	/**
   	 * Converts the `BigLong` number to a `BigInteger`.
   	 *
   	 * <p>
   	 * The `toBigInteger` method converts the `BigLong` number to a `BigInteger` object. It creates a new `BigInteger` instance using the string representation of the `BigLong` number.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>A `BigInteger` object representing the `BigLong` number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Usage Example:</strong>
  	 * </p>
   	 * <pre>
   	 *     BigLong num = new BigLong("1234567890123456789");
   	 *     BigInteger bigIntegerValue = num.toBigInteger();
   	 *     System.out.println(bigIntegerValue); // Output: 1234567890123456789
   	 * </pre>
   	 *
   	 * @return A `BigInteger` object representing the `BigLong` number.
   	 */
   	public BigInteger toBigInteger() {
   		String stringValue = toString();
	    return new BigInteger(stringValue);
	}
   	
   	
   	/**
   	*Converts the BigLong number to a BigInteger.
   	*
   	*<p>
   	*	The toBigInteger method converts the BigLong number to a BigInteger object. It 
   	*	creates a new BigInteger instance using the string representation of the BigLong 
  	*	number.
   	*</p>
   	*<p>
   	*<strong>Returns:</strong>
   	*</p>
   	*<ul>
   	*	<li>A `BigInteger` object representing the `BigLong` number.</li>
  	*</ul>
   	*<p>
   	*<strong>Usage Example:</strong>
   	*</p>
   	*<pre>
   	*	BigLong num = new BigLong("1234567890123456789");
   	*	BigInteger bigIntegerValue = num.toBigInteger();
   	*	System.out.println(bigIntegerValue); // Output: 1234567890123456789
   	*</pre>
   	*
   	*@return A BigInteger object representing the BigLong number.
   	*/
  	public BigDecimal toBigDecimal() {
	    String stringValue = toString();
	    return new BigDecimal(stringValue);
	}
   	
   	
   	/**
   	 * Converts the BigLong number to a BigDecimal.
   	 *
   	 * <p>
   	 * The toBigDecimal method converts the BigLong number to a BigDecimal object. It creates a new BigDecimal instance
   	 * using the string representation of the BigLong number.
  	 * </p>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
  	 * <ul>
   	 *   <li>A BigDecimal object representing the BigLong number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Usage Example:</strong>
   	 * </p>
   	 * <pre>
   	 * 		BigLong num = new BigLong("1234567890123456789");
   	 * 		BigDecimal bigDecimalValue = BigLong.toBigDecimal(num);
   	 * 		System.out.println(bigDecimalValue); // Output: 1234567890123456789
   	 * </pre>
   	 *
   	 * @param n The BigLong number to be converted to BigDecimal.
   	 * @return A BigDecimal object representing the BigLong number.
   	 */
   	public static BigDecimal toBigDecimal(BigLong n)
   	{
   		return n.toBigDecimal();
   	}
  
	   	
   	/**
  	 * Converts the BigLong number to a double.
   	 *
   	 * <p>
   	 * The toDouble method converts the BigLong number to a double value by parsing the string representation of the BigLong.
  	 * </p>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
  	 * </p>
  	 * <ul>
   	 *   <li>A double value representing the BigLong number.</li>
   	 * </ul>
  	 *
   	 * <p>
   	 * <strong>Usage Example:</strong>
   	 * </p>
   	 * <pre>
   	 * 		BigLong num = new BigLong("1234567890123456789");
   	 * 		double doubleValue = num.toDouble();
   	 * 		System.out.println(doubleValue); // Output: 1.2345678901234568E18
   	 * </pre>
   	 *
   	 * @return A double value representing the BigLong number.
   	 */
   	public double toDouble() {
	    String stringValue = toString();
	    return Double.parseDouble(stringValue);
	}
   	
   	
   	/**
   	 * Converts the specified BigLong number to a double.
   	 *
   	 * <p>
 	 * The toDouble method converts the given BigLong number to a double value by parsing the string representation of the BigLong.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *   <li>A double value representing the BigLong number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Usage Example:</strong>
   	 * </p>
   	 * <pre>
   	 * 		BigLong num = new BigLong("1234567890123456789");
   	 * 		double doubleValue = BigLong.toDouble(num);
   	 * 		System.out.println(doubleValue); // Output: 1.2345678901234568E18
   	 * </pre>
   	 *
   	 * @param n The BigLong number to convert to a double.
  	 * @return A double value representing the BigLong number.
   	 */
   	public static double toDouble(BigLong n)
   	{
   		return n.toDouble();
   	}
   
   	
   	/**
   	 * Converts the BigLong number to a float.
   	 *
   	 * <p>
   	 * The toFloat method converts the BigLong number to a float value by parsing the string representation of the BigLong.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *   <li>A float value representing the BigLong number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Usage Example:</strong>
   	 * </p>
   	 * <pre>
   	 * 		BigLong num = new BigLong("1234567890123456789");
   	 * 		float floatValue = num.toFloat();
   	 * 		System.out.println(floatValue); // Output: 1.2345679E18
   	 * </pre>
   	 *
   	 * @return A float value representing the BigLong number.
   	 */
   	public float toFloat() {
   		String stringValue = toString();
	    return Float.parseFloat(stringValue);
	}
	   	
   	
   	/**
   	 * Converts the specified BigLong number to a float.
   	 *
   	 * <p>
   	 * The toFloat method converts the specified BigLong number to a float value by parsing the string representation of the BigLong.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong>Parameters:</strong>
   	 * </p>
   	 * <ul>
   	 *   <li><code>n</code> - The BigLong number to convert.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *   <li>A float value representing the BigLong number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Usage Example:</strong>
   	 * </p>
   	 * <pre>
   	 * 		BigLong num = new BigLong("1234567890123456789");
   	 * 		float floatValue = BigLong.toFloat(num);
   	 * 		System.out.println(floatValue); // Output: 1.2345679E18
   	 * </pre>
   	 *
   	 * @param n The BigLong number to convert to float.
   	 * @return A float value representing the BigLong number.
   	 */
   	public static float toFloat(BigLong n)
   	{
   		return Float.parseFloat(n.toString());
   	}
	   	   
   
   	/**
   	 * Destroys the `BigLong` number.
   	 *
   	 * <p>
   	 * The `destroy` method sets the value of the `BigLong` number to zero, effectively destroying the number.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>A new `BigLong` instance representing zero.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Usage Example:</strong>
   	 * </p>
   	 * <pre>
   	 *     BigLong number = new BigLong("123456");
   	 *     BigLong destroyedNumber = number.destroy();
   	 *     System.out.println("Destroyed Number: " + destroyedNumber);
   	 * </pre>
   	 *
   	 * @return A new `BigLong` instance representing zero.
   	 */
   	public BigLong destroy() {
   	    return this.multiply(new BigLong("0"));
   	}

   	
   	/**
   	 * Returns the greatest common divisor (GCD) of this `BigLong` number and the specified `BigLong` number.
   	 *
   	 * <p>
   	 * The GCD is the largest positive integer that divides both this `BigLong` number and the specified `BigLong` number without leaving a remainder.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong>Parameters:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>`other` - The `BigLong` number with which the GCD is computed.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>The GCD of this `BigLong` number and the specified `BigLong` number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Throws:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>`ArithmeticException` - If either this `BigLong` number or the specified `BigLong` number is zero.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Example:</strong>
   	 * </p>
   	 * <pre>
   	 *     BigLong number1 = new BigLong("24");
   	 *     BigLong number2 = new BigLong("36");
   	 *     BigLong gcd = number1.gcd(number2);
   	 *     System.out.println("GCD: " + gcd);
   	 * </pre>
   	 *
   	 * @param other The `BigLong` number with which the GCD is computed.
   	 * @return The GCD of this `BigLong` number and the specified `BigLong` number.
   	 * @throws ArithmeticException If either this `BigLong` number or the specified `BigLong` number is zero.
     *
     * @see <a herf = "https://en.wikipedia.org/wiki/Greatest_common_divisor">GCD</a>
   	 */
   	public BigLong gcd(BigLong other) throws ArithmeticException {
   	    if (this.isZero() || other.isZero()) {
   	        throw new ArithmeticException("GCD is undefined for zero values");
        }
   	    
        BigLong a = this.abs();
   	    BigLong b = other.abs();
        while (!b.isZero()) {
   	        BigLong temp = b;
   	        b = a.modulo(b);
   	        a = temp;
   	    }
        
        return a;
   	}

   	
   	/**
   	 * Computes the greatest common divisor (GCD) of two given `BigLong` numbers.
   	 *
   	 * <p>
   	 * The GCD is the largest positive integer that divides both this `BigLong` number and the specified `BigLong` number without leaving a remainder.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong>Parameters:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>`a` - The first `BigLong` number.</li>
   	 *     <li>`b` - The second `BigLong` number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>The GCD of the two `BigLong` numbers.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Throws:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>`ArithmeticException` - If either this `BigLong` number or the specified `BigLong` number is zero.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Note:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>This implementation uses the binary search algorithm to find the GCD.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Examples:</strong>
   	 * </p>
   	 * <pre>
   	 *     BigLong number1 = new BigLong("12");
   	 *     BigLong number2 = new BigLong("15");
   	 *     BigLong gcd = BigLong.gcd(number1, number2);
   	 *     System.out.println("GCD: " + gcd);
   	 * </pre>
   	 *
   	 * @param a The first `BigLong` number.
   	 * @param b The second `BigLong` number.
   	 * @return The GCD of the two `BigLong` numbers.
   	 * @throws ArithmeticException If either this `BigLong` number or the specified `BigLong` number is zero.
     *
     * @see <a herf = "https://en.wikipedia.org/wiki/Greatest_common_divisor">GCD</a>
   	 */
   	public static BigLong gcd(BigLong a, BigLong b) throws ArithmeticException {
   	    if (a.isZero() || b.isZero()) {
   	        throw new ArithmeticException("GCD is undefined for zero values");
   	    }
   	    while (!b.isZero()) {
   	        BigLong temp = b;
   	        b = a.modulo(b);
   	        a = temp;
   	    }
   	    return a;
   	}
   	
   	
   	/**
   	 * Returns the least common multiple (LCM) of two given `BigLong` numbers.
   	 *
   	 * <p>
   	 * The LCM is the smallest positive integer that is a multiple of both this `BigLong` number and the specified `BigLong` number.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong> Parameters:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>`a` - The first `BigLong` number.</li>
   	 *     <li>`b` - The second `BigLong` number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>The LCM of the two `BigLong` numbers.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Throws:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>`ArithmeticException` - If either this `BigLong` number or the specified `BigLong` number is zero.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Example:</strong>
   	 * </p>
   	 * <pre>
   	 *     BigLong number1 = new BigLong("12");
   	 *     BigLong number2 = new BigLong("15");
   	 *     BigLong lcm = BigLong.lcm(number1, number2);
   	 *     System.out.println("LCM: " + lcm);
   	 * </pre>
   	 *
   	 * @param a The first `BigLong` number.
   	 * @param b The second `BigLong` number.
   	 * @return The LCM of the two `BigLong` numbers.
   	 * @throws ArithmeticException If either this `BigLong` number or the specified `BigLong` number is zero.
     *
     * @see <a herf = "https://en.wikipedia.org/wiki/Least_common_multiple">LCM</a>
   	 */
   	public static BigLong lcm(BigLong a, BigLong b) throws ArithmeticException {
   		if(a.isZero() || b.isZero())
   			throw new ArithmeticException("LCM is undefined for zero values");
   	    return a.divide(a.gcd(b)).multiply(b);
   	}
   	
   	
   	/**
   	 * Computes the least common multiple (LCM) of this `BigLong` number and the specified `BigLong` number.
   	 *
   	 * <p>
   	 * The LCM is the smallest positive integer that is a multiple of both this `BigLong` number and the specified `BigLong` number.
   	 * </p>
   	 *
   	 * <p>
   	 * <strong>Parameters:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>`other` - The other `BigLong` number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong> Returns:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>The LCM of this `BigLong` number and the specified `BigLong` number.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Throws:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>`ArithmeticException` - If either this `BigLong` number or the specified `BigLong` number is zero.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Note:</strong>
   	 * </p>
   	 * <ul>
   	 *     <li>This implementation uses the Euclidean algorithm to compute the GCD and then multiplies it with the product of the two numbers divided by their GCD.</li>
   	 * </ul>
   	 *
   	 * <p>
   	 * <strong>Examples:</strong>
   	 * </p>
   	 * <pre>
   	 *     BigLong number1 = new BigLong("12");
   	 *     BigLong number2 = new BigLong("15");
   	 *     BigLong lcm = number1.lcm(number2);
   	 *     System.out.println("LCM: " + lcm);
   	 * </pre>
   	 *
   	 * @param other The other `BigLong` number.
   	 * @return The LCM of this `BigLong` number and the specified `BigLong` number.
   	 * @throws ArithmeticException If either this `BigLong` number or the specified `BigLong` number is zero.
     *
     * @see <a herf = "https://en.wikipedia.org/wiki/Least_common_multiple">LCM</a>
   	 */
   	public BigLong lcm(BigLong other) throws ArithmeticException {
   	    if (this.isZero() || other.isZero()) {
   	        throw new ArithmeticException("LCM is undefined for zero values");
   	    }
   	    BigLong a = this;
   	    BigLong b = other;
   	    return a.divide(a.gcd(b)).multiply(b);
   	}

	   	
   	/**
   	 * Checks if the `BigLong` number is even.
   	 *
   	 * <p>
   	 * The `isEven` method checks whether the `BigLong` number is an even number, which means it is divisible by 2 without a remainder.
   	 * </p>
 	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>`true` if the `BigLong` number is even.</li>
	 *     <li>`false` if the `BigLong` number is odd.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong number = new BigLong("123456");
	 *     boolean isEven = number.isEven();
	 *     System.out.println("Is Even: " + isEven);
	 * </pre>
	 *
	 * @return `true` if the `BigLong` number is even, `false` if it is odd.
	 */
	public boolean isEven() {
	    if (this.modulo(TWO).equals(ZERO))
	        return true;
	    else
	        return false;
	}
	   	
	   	
	/**
	 * Checks if the `BigLong` number is odd.
	 *
	 * <p>
	 * The `isOdd` method checks whether the `BigLong` number is an odd number, which means it is not divisible by 2 without a remainder.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>`true` if the `BigLong` number is odd.</li>
	 *     <li>`false` if the `BigLong` number is even.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong number = new BigLong("123456");
	 *     boolean isOdd = number.isOdd();
	 *     System.out.println("Is Odd: " + isOdd);
	 * </pre>
	 *
	 * @return `true` if the `BigLong` number is odd, `false` if it is even.
	 */
	public boolean isOdd() {
	    if (this.modulo(TWO).equals(ONE))
	        return true;
	    else
	        return false;
	}
  	
	 	
	/**
	 * Checks if the `BigLong` number is a prime number.
	 *
	 * <p>
	 * The `isPrime` method checks if the `BigLong` number is a prime number. A prime number is a number that is only divisible by 1 and itself.
	 * </p>
	 *
	 * <p>
	 * The method uses a probabilistic primality test called the Miller-Rabin primality test to determine if the number is likely to be prime.
	 * Although the Miller-Rabin test is highly accurate for large numbers, it may produce false positives for very large composite numbers.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li><code>true</code> if the `BigLong` number is determined to be prime.</li>
	 *     <li><code>false</code> if the `BigLong` number is determined to be composite.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong number = new BigLong("123456789");
	 *     boolean isPrime = number.isPrime();
	 *     System.out.println("Is Prime: " + isPrime); // Output: Is Prime: false
	 * </pre>
	 *
	 * @return <code>true</code> if the `BigLong` number is determined to be prime, <code>false</code> otherwise.
	 */
	public boolean isPrime() {
	    // Handle base cases for small numbers
	    if (this.compareTo(new BigLong("2")) < 0) {
	        return false;
	    }
	    if (this.compareTo(new BigLong("2")) == 0 || this.compareTo(new BigLong("3")) == 0) {
	        return true;
	    }
	    if (this.isEven() || this.compareTo(new BigLong("3")) < 0) {
	        return false;
	    }

	    // Perform Miller-Rabin primality test
	    int certainty = 20; // Number of iterations to increase accuracy
	    BigLong d = this.subtract(new BigLong("1"));
	    int s = 0;
	    while (d.isEven()) {
	        d = d.divide(new BigLong("2"));
	        s++;
	    }

	    for (int i = 0; i < certainty; i++) {
	        BigLong a = getRandomBase(this);
	        BigLong x = a.modPow(d, this);

	        if (x.compareTo(new BigLong("1")) == 0 || x.compareTo(this.subtract(new BigLong("1"))) == 0) {
	            continue;
	        }
            boolean isWitness = true;
	        for (int r = 1; r < s; r++) {
	            x = x.modPow(new BigLong("2"), this);
	            if (x.compareTo(new BigLong("1")) == 0) {
	                return false;
	            }
	            if (x.compareTo(this.subtract(new BigLong("1"))) == 0) {
	                isWitness = false;
	                break;
	            }
	   	    }

	        if (isWitness) {
	            return false;
	        }
	    }

	    return true;
	}

	   	
	/**
	 * Generates a random base within the range [2, n-2].
	 *
	 * <p>
	 * The `getRandomBase` method generates a random base within the range [2, n-2] for use in probabilistic primality testing algorithms,
	 * such as the Miller-Rabin primality test.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li><code>n</code>: The upper limit for the random base (exclusive).</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>A new `BigLong` instance representing the random base within the specified range.</p>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong n = new BigLong("123456789");
	 *     BigLong randomBase = getRandomBase(n);
	 *     System.out.println("Random Base: " + randomBase.toString());
	 * </pre>
	 *
	 * @param n The upper limit for the random base (exclusive).
	 * @return A new `BigLong` instance representing the random base within the specified range.
	 */
	private BigLong getRandomBase(BigLong n) {
	    // Generate a random base between 2 and n-2
	    Random random = new Random();
	    BigLong base = new BigLong("2");
	    BigLong maxLimit = n.subtract(new BigLong("2"));
	    BigLong randomBase = base.add(new BigLong(random.nextInt(maxLimit.toInt())));

        return randomBase;
	}

	   	
	/**
	 * Calculates the modular exponentiation of the `BigLong` number raised to the power of another `BigLong` exponent, modulo a given `BigLong` modulo.
	 *
	 * <p>
	 * The `modPow` method calculates the modular exponentiation of the `BigLong` number raised to the power of the `BigLong` exponent,
	 * modulo the `BigLong` modulo. Modular exponentiation is the process of raising a number to a power and then taking the remainder
	 * when divided by a modulo.
	 * </p>
	 *
	 * <p>
	 * This method uses the exponentiation by squaring algorithm to efficiently compute the result.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li><code>exponent</code>: The `BigLong` exponent to raise the number to.</li>
	 *     <li><code>modulo</code>: The `BigLong` modulo to apply after raising to the power.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <p>A new `BigLong` instance representing the result of the modular exponentiation.</p>
	 *
	 * <p>
	 * <strong>Throws:</strong>
	 * </p>
	 * <ul>
	 *     <li><code>IllegalArgumentException</code> if the modulo is not positive.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong base = new BigLong("123");
	 *     BigLong exponent = new BigLong("456");
	 *     BigLong modulo = new BigLong("789");
	 *
	 *     BigLong result = base.modPow(exponent, modulo);
	 *     System.out.println("Result: " + result.toString());
	 * </pre>
	 *
	 * @param exponent The `BigLong` exponent to raise the number to.
	 * @param modulo The `BigLong` modulo to apply after raising to the power.
	 * @return A new `BigLong` instance representing the result of the modular exponentiation.
	 * @throws IllegalArgumentException if the modulo is not positive.
	 */
	private BigLong modPow(BigLong exponent, BigLong modulo) {
	    if (modulo.compareTo(ZERO) <= 0) {
	        throw new IllegalArgumentException("modulo must be positive");
	    }
        BigLong base = this;
	    BigLong result = BigLong.ONE;
	    while (exponent.compareTo(ZERO) > 0) {
	        if (exponent.modulo(BigLong.TWO).equals(BigLong.ONE)) {
	            result = result.multiply(base).modulo(modulo);
	        }
	        base = base.multiply(base).modulo(modulo);
	        exponent = exponent.divide(BigLong.TWO);
	    }
	    return result;
	}
	   	
	   	
	/**
	 * Shifts this `BigLong` number to the right by a specified number of decimal places and returns a new `BigLong` representing the result.
	 *
	 * <p>
	 * The `shiftRight` method shifts this `BigLong` number to the right by the specified number of decimal places and returns the result as a new `BigLong` instance. 
	 * If the specified number of places is negative, an `IllegalArgumentException` is thrown.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li><strong>places:</strong> The number of decimal places to shift right. Must be non-negative.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A new `BigLong` instance representing the result of shifting right by the specified number of decimal places.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Throws:</strong>
	 * </p>
	 * <ul>
	 *     <li>`IllegalArgumentException` - If the `places` argument is negative.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong number = new BigLong("123456789");
	 *     int places = 3;
	 *     BigLong shifted = number.shiftRight(places);
	 *     System.out.println("Shifted Result: " + shifted); // Output: Shifted Result: 1234567
	 * </pre>
	 *
	 * @param places The number of decimal places to shift right. Must be non-negative.
	 * @return A new `BigLong` instance representing the result of shifting right by the specified number of decimal places.
	 * @throws IllegalArgumentException If the `places` argument is negative.
	*/
	public BigLong shiftRight(int places) {
	    if (places < 0) {
	        throw new IllegalArgumentException("Shift places must be non-negative.");
	    }
	        
	    BigLong result = new BigLong(this.value);
	    
	    for (int i = 0; i < places; i++) {
	        result = result.divide(TEN);
	    }
	    
	    return result;
	}


	/**
	 * Shifts this `BigLong` number to the left by a specified number of decimal places and returns a new `BigLong` representing the result.
	 *
	 * <p>
	 * The `shiftLeft` method shifts this `BigLong` number to the left by the specified number of decimal places and returns the result as a new `BigLong` instance. 
	 * If the specified number of places is negative, an `IllegalArgumentException` is thrown.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *     <li><strong>places:</strong> The number of decimal places to shift left. Must be non-negative.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>A new `BigLong` instance representing the result of shifting left by the specified number of decimal places.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Throws:</strong>
	 * </p>
	 * <ul>
	 *     <li>`IllegalArgumentException` - If the `places` argument is negative.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong number = new BigLong("12345");
	 *     int places = 3;
	 *     BigLong shifted = number.shiftLeft(places);
	 *     System.out.println("Shifted Result: " + shifted); // Output: Shifted Result: 12345000
	 * </pre>
	 *
	 * @param places The number of decimal places to shift left. Must be non-negative.
	 * @return A new `BigLong` instance representing the result of shifting left by the specified number of decimal places.
	 * @throws IllegalArgumentException If the `places` argument is negative.
	*/
	public BigLong shiftLeft(int places) {
	    if (places < 0) {
	        throw new IllegalArgumentException("Shift places must be non-negative.");
	    }
	        
	    BigLong result = new BigLong(this.value);
	        
	    for (int i = 0; i < places; i++) {
	        result = result.multiply(TEN);
	    }
	        
	    return result;
	}
	    

	/**
	 * Returns the hash code value for the `BigLong` number.
	 *
	 * <p>
	 * The hash code of a `BigLong` number is computed based on its internal representation as an array of long values.
	 * </p>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *     <li>The hash code value for the `BigLong` number.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Implementation Note:</strong>
	 * </p>
	 * <p>
	 * The hash code is computed by performing bitwise XOR (^) operations on the individual elements of the internal
	 * value array, starting from the most significant digit. The resulting value is then returned as the hash code.
	 * </p>
	 *
	 * <p>
	 * <strong>Overrides:</strong>
	 * </p>
	 * <ul>
	 *     <li>{@link java.lang.Object#hashCode()}</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Example:</strong>
	 * </p>
	 * <pre>
	 *     BigLong number = new BigLong("123456");
	 *     int hashCode = number.hashCode();
	 *     System.out.println("Hash Code: " + hashCode);
	 * </pre>
	 *
	 * @return The hash code value for the `BigLong` number.
    */
	@Override
	public int hashCode() {
	   	int result = 0;
	   	for (int i = value.length - 1; i >= 0; i--) {
	   	    result ^= (int) value[i];
	   	}
	   	return result;
	}

//---------------------------------------------------------------------------------------------------------------------------------
//                                                    ALL ADD METHODS                                                             |
//---------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Adds the value of another BigLong to this BigLong.
	 *
	 * <p>
	 * The add method performs addition between this BigLong and another BigLong. It creates a new BigLong object
	 * representing the sum of the two numbers.
	 * </p>
	 *
	 * <p>
	 * <strong>Parameters:</strong>
	 * </p>
	 * <ul>
	 *   <li><code>other</code> - The BigLong to be added.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Returns:</strong>
	 * </p>
	 * <ul>
	 *   <li>A new BigLong object representing the sum of this BigLong and the other BigLong.</li>
	 * </ul>
	 *
	 * <p>
	 * <strong>Usage Example:</strong>
	 * </p>
	 * <pre>
	 * BigLong num1 = new BigLong("1234567890");
	 * BigLong num2 = new BigLong("9876543210");
	 * BigLong sum = num1.add(num2);
	 * System.out.println(sum); // Output: 11111111100
	 * </pre>
	 *
	 * @param other The BigLong to be added.
	 * @return A new BigLong object representing the sum of this BigLong and the other BigLong.
	 */
   public BigLong add(BigLong other) {
	   	    if (this.isNegative() && other.isNegative()) {
	   	        return this.negate().add(other.negate()).negate();
	   	    } else if (this.isNegative()) {
	   	        return other.subtract(this.negate());
	   	    } else if (other.isNegative()) {
	   	        return this.subtract(other.negate());
	   	    }

	   	    int maxLength = Math.max(this.value.length, other.value.length) + 1;
	   	    long[] result = new long[maxLength];
	   	    int carry = 0;

	   	    for (int i = 0; i < maxLength; i++) {
	   	        long digit1 = i < this.value.length ? this.value[i] : 0;
	   	        long digit2 = i < other.value.length ? other.value[i] : 0;
	   	        long sum = digit1 + digit2 + carry;
	   	        result[i] = sum % 10;
	   	        carry = (int) (sum / 10);
	   	    }

	   	    return new BigLong(result);
	   	}


   /**
    * Adds a long value to this BigLong.
    *
    * <p>
    * The add method performs addition between this BigLong and a long value. It creates a new BigLong object
    * representing the sum of the two numbers.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>value</code> - The long value to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of this BigLong and the long value.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num = new BigLong("1234567890");
    * BigLong sum = num.add(9876543210L);
    * System.out.println(sum); // Output: 11111111100
    * </pre>
    *
    * @param value The long value to be added.
    * @return A new BigLong object representing the sum of this BigLong and the long value.
    */
   public BigLong add(long value) 
   {
       return this.add(new BigLong(value));
   }
   

   /**
    * Adds an int value to this BigLong.
    *
    * <p>
    * The add method performs addition between this BigLong and an int value. It creates a new BigLong object
    * representing the sum of the two numbers.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>value</code> - The int value to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of this BigLong and the int value.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num = new BigLong("1234567890");
    * BigLong sum = num.add(987654321);
    * System.out.println(sum); // Output: 2222222211
    * </pre>
    *
    * @param value The int value to be added.
    * @return A new BigLong object representing the sum of this BigLong and the int value.
    */
   public BigLong add(int value) 
   {
       return this.add(new BigLong(value));
   }
   

   /**
    * Adds a short value to this BigLong.
    *
    * <p>
    * The add method performs addition between this BigLong and a short value. It creates a new BigLong object
    * representing the sum of the two numbers.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>value</code> - The short value to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of this BigLong and the short value.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num = new BigLong("12345");
    * BigLong sum = num.add((short) 6789);
    * System.out.println(sum); // Output: 19134
    * </pre>
    *
    * @param value The short value to be added.
    * @return A new BigLong object representing the sum of this BigLong and the short value.
    */
   public BigLong add(short value) 
   {
       return this.add(new BigLong(value));
   }
   

   /**
    * Adds a byte value to this BigLong.
    *
    * <p>
    * The add method performs addition between this BigLong and a byte value. It creates a new BigLong object
    * representing the sum of the two numbers.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>value</code> - The byte value to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of this BigLong and the byte value.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num = new BigLong("12345");
    * BigLong sum = num.add((byte) 67);
    * System.out.println(sum); // Output: 12412
    * </pre>
    *
    * @param value The byte value to be added.
    * @return A new BigLong object representing the sum of this BigLong and the byte value.
    */
   public BigLong add(byte value) 
   {
   	return this.add(new BigLong(value));
   }
   

   /**
    * Adds a BigInteger value to this BigLong.
    *
    * <p>
    * The add method performs addition between this BigLong and a BigInteger value. It creates a new BigLong object
    * representing the sum of the two numbers.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>value</code> - The BigInteger value to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of this BigLong and the BigInteger value.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num = new BigLong("12345");
    * BigInteger value = new BigInteger("987654321");
    * BigLong sum = num.add(value);
    * System.out.println(sum); // Output: 987666666
    * </pre>
    *
    * @param value The BigInteger value to be added.
    * @return A new BigLong object representing the sum of this BigLong and the BigInteger value.
    */
   public BigLong add(BigInteger value)
   {
	   return this.add(new BigLong(value));
   }
   
   
   /**
    * Adds a float value to this BigLong.
    *
    * <p>
    * The add method performs addition between this BigLong and a float value. It creates a new BigLong object
    * representing the sum of the two numbers.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>value</code> - The float value to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of this BigLong and the float value.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num = new BigLong("12345");
    * float value = 9876.54321f;
    * BigLong sum = num.add(value);
    * System.out.println(sum); // Output: 988988.54321
    * </pre>
    *
    * @param value The float value to be added.
    * @return A new BigLong object representing the sum of this BigLong and the float value.
    */
   public BigLong add(float value) 
   {
       return this.add(new BigLong(value));
   }
   

   /**
    * Adds a double value to this BigLong.
    *
    * <p>
    * The add method performs addition between this BigLong and a double value. It creates a new BigLong object
    * representing the sum of the two numbers.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>value</code> - The double value to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of this BigLong and the double value.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num = new BigLong("12345");
    * double value = 9876.54321;
    * BigLong sum = num.add(value);
    * System.out.println(sum); // Output: 988988.54321
    * </pre>
    *
    * @param value The double value to be added.
    * @return A new BigLong object representing the sum of this BigLong and the double value.
    */
   public BigLong add(double value) 
   {
   	return this.add(new BigLong(value));
   }
   

   /**
    * Adds a BigDecimal value to this BigLong.
    *
    * <p>
    * The add method performs addition between this BigLong and a BigDecimal value. It creates a new BigLong object
    * representing the sum of the two numbers.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>value</code> - The BigDecimal value to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of this BigLong and the BigDecimal value.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num = new BigLong("12345");
    * BigDecimal value = new BigDecimal("9876.54321");
    * BigLong sum = num.add(value);
    * System.out.println(sum); // Output: 988988.54321
    * </pre>
    *
    * @param value The BigDecimal value to be added.
    * @return A new BigLong object representing the sum of this BigLong and the BigDecimal value.
    */
   public BigLong add(BigDecimal value)
   {
	   return this.add(new BigLong(value));
   }
   
   
   /**
    * Adds an array of BigLong values.
    *
    * <p>
    * The add method performs addition between multiple BigLong values. It takes an array of BigLong objects and returns
    * a new BigLong object representing the sum of all the values.
    * </p>
    *
    * <p>
    * <strong>Parameters:</strong>
    * </p>
    * <ul>
    *   <li><code>values</code> - An array of BigLong values to be added.</li>
    * </ul>
    *
    * <p>
    * <strong>Returns:</strong>
    * </p>
    * <ul>
    *   <li>A new BigLong object representing the sum of all the BigLong values.</li>
    * </ul>
    *
    * <p>
    * <strong>Usage Example:</strong>
    * </p>
    * <pre>
    * BigLong num1 = new BigLong("12345");
    * BigLong num2 = new BigLong("67890");
    * BigLong num3 = new BigLong("24680");
    * BigLong[] values = {num1, num2, num3};
    * BigLong sum = BigLong.add(values);
    * System.out.println(sum); // Output: 104015
    * </pre>
    *
    * @param values An array of BigLong values to be added.
    * @return A new BigLong object representing the sum of all the BigLong values.
    */
    public static BigLong add(BigLong[] values) 
    {
    	BigLong sum = BigLong.ZERO;
       for(BigLong val : values)
       {
    	   sum = sum.add(val);
       }
       return sum;
    }

    
    /**
     * Adds an array of long values.
     *
     * <p>
     * The add method performs addition between multiple long values. It takes an array of long values and returns a new
     * BigLong object representing the sum of all the values.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *   <li><code>value</code> - An array of long values to be added.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *   <li>A new BigLong object representing the sum of all the long values.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * long[] values = {12345L, 67890L, 24680L};
     * BigLong sum = BigLong.add(values);
     * System.out.println(sum); // Output: 104015
     * </pre>
     *
     * @param value An array of long values to be added.
     * @return A new BigLong object representing the sum of all the long values.
     */
    public static BigLong add(long[] value) 
    {
    	BigLong sum = BigLong.ZERO;
        for(long val : value)
        {
        	sum = sum.add(new BigLong(val));
        }
        return sum.trim();
    } 
   
    
    /**
     * Adds an array of int values.
     *
     * <p>
     * The add method performs addition between multiple int values. It takes an array of int values and returns a new
     * BigLong object representing the sum of all the values.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *   <li><code>value</code> - An array of int values to be added.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *   <li>A new BigLong object representing the sum of all the int values.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * int[] values = {12345, 67890, 24680};
     * BigLong sum = BigLong.add(values);
     * System.out.println(sum); // Output: 104015
     * </pre>
     *
     * @param value An array of int values to be added.
     * @return A new BigLong object representing the sum of all the int values.
     */
    public static BigLong add(int[] value) 
    {
    	BigLong sum = BigLong.ZERO;
        for(long val : value)
        {
        	sum = sum.add(new BigLong(val));
        }
        return sum.trim();
    }
   
    
    /**
     * Adds an array of short values.
     *
     * <p>
     * The add method performs addition between multiple short values. It takes an array of short values and returns a new
     * BigLong object representing the sum of all the values.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *   <li><code>value</code> - An array of short values to be added.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *   <li>A new BigLong object representing the sum of all the short values.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * short[] values = {123, 456, 789};
     * BigLong sum = BigLong.add(values);
     * System.out.println(sum); // Output: 1368
     * </pre>
     *
     * @param value An array of short values to be added.
     * @return A new BigLong object representing the sum of all the short values.
     */
    public static BigLong add(short[] value) 
    {
    	BigLong sum = BigLong.ZERO;
        for(long val : value)
        {
        	sum = sum.add(new BigLong(val));
        }
        return sum.trim();
    } 
   
    
    /**
     * Adds an array of byte values.
     *
     * <p>
     * The add method performs addition between multiple byte values. It takes an array of byte values and returns a new
     * BigLong object representing the sum of all the values.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *   <li><code>value</code> - An array of byte values to be added.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *   <li>A new BigLong object representing the sum of all the byte values.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * byte[] values = {10, 20, 30};
     * BigLong sum = BigLong.add(values);
     * System.out.println(sum); // Output: 60
     * </pre>
     *
     * @param value An array of byte values to be added.
     * @return A new BigLong object representing the sum of all the byte values.
     */
    public static BigLong add(byte[] value) 
    {
    	BigLong sum = BigLong.ZERO;
        for(long val : value)
        {
        	sum = sum.add(new BigLong(val));
        }
        return sum.trim();
    }
    

    /**
     * Adds an array of float values.
     *
     * <p>
     * The add method performs addition between multiple float values. It takes an array of float values and returns a new
     * BigLong object representing the sum of all the values.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *   <li><code>value</code> - An array of float values to be added.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *   <li>A new BigLong object representing the sum of all the float values.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * float[] values = {10.5f, 20.3f, 30.7f};
     * BigLong sum = BigLong.add(values);
     * System.out.println(sum); // Output: 62
     * </pre>
     *
     * @param value An array of float values to be added.
     * @return A new BigLong object representing the sum of all the float values.
     */
    public static BigLong add(float[] value) 
    {
    	BigLong sum = BigLong.ZERO;
        for(float val : value)
        {
        	sum = sum.add(new BigLong(val));
        }
        return sum.trim();
    }
   
    
    /**
     * Adds an array of double values.
     *
     * <p>
     * The add method performs addition between multiple double values. It takes an array of double values and returns a new
     * BigLong object representing the sum of all the values.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *   <li><code>value</code> - An array of double values to be added.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *   <li>A new BigLong object representing the sum of all the double values.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * double[] values = {10.5, 20.3, 30.7};
     * BigLong sum = BigLong.add(values);
     * System.out.println(sum); // Output: 62
     * </pre>
     *
     * @param value An array of double values to be added.
     * @return A new BigLong object representing the sum of all the double values.
     */
    public static BigLong add(double[] value) 
    {
    	BigLong sum = BigLong.ZERO;
        for(double val : value)
        {
        	sum = sum.add(new BigLong(val));
        }
        return sum.trim();
    } 
    
    /**
     * Adds an array of BigInteger values.
     *
     * <p>
     * The add method performs addition between multiple BigInteger values. It takes an array of BigInteger values and returns
     * a new BigLong object representing the sum of all the values.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *   <li><code>value</code> - An array of BigInteger values to be added.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *   <li>A new BigLong object representing the sum of all the BigInteger values.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * BigInteger[] values = {BigInteger.valueOf(10), BigInteger.valueOf(20), BigInteger.valueOf(30)};
     * BigLong sum = BigLong.add(values);
     * System.out.println(sum); // Output: 60
     * </pre>
     *
     * @param value An array of BigInteger values to be added.
     * @return A new BigLong object representing the sum of all the BigInteger values.
     */
    public static BigLong add(BigInteger[] value)
    {
    	BigLong sum = BigLong.ZERO;
        for(BigInteger val : value)
        {
        	sum = sum.add(new BigLong(val));
        }
        return sum.trim();
    }
    

    /**
     * Adds an array of BigDecimal values.
     *
     * <p>
     * The add method performs addition between multiple BigDecimal values. It takes an array of BigDecimal values and returns
     * a new BigLong object representing the sum of all the values.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *   <li><code>value</code> - An array of BigDecimal values to be added.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *   <li>A new BigLong object representing the sum of all the BigDecimal values.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * BigDecimal[] values = {BigDecimal.valueOf(10.5), BigDecimal.valueOf(20.7), BigDecimal.valueOf(30.3)};
     * BigLong sum = BigLong.add(values);
     * System.out.println(sum); // Output: 62
     * </pre>
     *
     * @param value An array of BigDecimal values to be added.
     * @return A new BigLong object representing the sum of all the BigDecimal values.
     */
    public static BigLong add(BigDecimal[] value)
    {
    	BigLong sum = BigLong.ZERO;
        for(BigDecimal val : value)
        {
        	sum = sum.add(new BigLong(val));
        }
        return sum.trim();
    }
   	
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -    
//                                           All other static add methods
//- - - - - - - - - - - - - - - - - - - - - ============================== - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    /**
     * Adds two `BigLong` numbers and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds two `BigLong` numbers and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `BigLong` operand.</li>
     *     <li><strong>b:</strong> The second `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `BigLong` operand.
     * @param b The second `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, BigLong b) {
        return a.add(b);
    }

    
    /**
     * Adds a `BigLong` number to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigLong` number to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     byte num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, byte b) {
        return a.add(b);
    }

    
    /**
     * Adds a `BigLong` number to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigLong` number to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     short num2 = 100;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, short b) {
        return a.add(b);
    }

    
    /**
     * Adds a `BigLong` number to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigLong` number to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     int num2 = 1000;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, int b) {
      return a.add(b);
    }

    
    /**
     * Adds a `BigLong` number to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigLong` number to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, long b) {
        return a.add(b);
    }

    
    /**
     * Adds a `BigLong` number to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigLong` number to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigInteger num2 = new BigInteger("1000000000");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, BigInteger b) {
        return a.add(b);
    }

    
    /**
     * Adds a `BigLong` number to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigLong` number to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     float num2 = 10.5f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, float b) {
        return a.add(b);
    }

    
    /**
     * Adds a `BigLong` number to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigLong` number to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     double num2 = 15.75;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, double b) {
        return a.add(b);
    }

    
    /**
     * Adds a `BigLong` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigLong` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigDecimal num2 = new BigDecimal("1000000000.5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigLong a, BigDecimal b) {
        return a.add(b);
    }

    
    /**
     * Adds a `BigInteger` number to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigInteger` number to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigInteger a, BigLong b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigInteger` number to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigInteger` number to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     byte num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigInteger a, byte b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigInteger` number to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigInteger` number to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     short num2 = 100;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigInteger a, short b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigInteger` number to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigInteger` number to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     int num2 = 1000;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigInteger a, int b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigInteger` number to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigInteger` number to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigInteger a, long b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigInteger` number to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigInteger` number to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     float num2 = 10.5f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigInteger a, float b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigInteger` number to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigInteger` number to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     double num2 = 15.75;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigInteger a, double b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigInteger` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigInteger` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     BigDecimal num2 = new BigDecimal("1000000000.5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigInteger a, BigDecimal b) {
        return new BigLong(a).add(b);
    }


    /**
     * Adds a `long` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `long` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, BigLong b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `long` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `long` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     byte num2 = 10;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, byte b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `long` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `long` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     short num2 = 1000;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, short b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `long` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `long` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     int num2 = 10000;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, int b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds two `long` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds two `long` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `long` operand.</li>
     *     <li><strong>b:</strong> The second `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     long num2 = 987654321;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `long` operand.
     * @param b The second `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, long b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `long` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `long` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigInteger num2 = new BigInteger("987654321987654321");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, BigInteger b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `long` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `long` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     float num2 = 0.123456789f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, float b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `long` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `long` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     double num2 = 0.987654321;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, double b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `long` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `long` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigDecimal num2 = new BigDecimal("987654321.987654321");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(long a, BigDecimal b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds an `int` value to a `BigLong` and returns the result as a new `BigLong` instance.
     *
     * <p>
     * The `add` method adds an `int` value to a `BigLong` and returns the result as a new `BigLong` instance.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigLong num2 = new BigLong("789012345678901234567890");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, BigLong b) {
        return new BigLong(a).add(b);
    }

    /**
     * Adds an `int` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds an `int` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     byte num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, byte b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds an `int` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds an `int` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     short num2 = 100;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, short b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds two `int` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds two `int` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `int` operand.</li>
     *     <li><strong>b:</strong> The second `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     int num2 = 789;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `int` operand.
     * @param b The second `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, int b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds an `int` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds an `int` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, long b) {
        return new BigLong(a).add(new BigLong(b));
    }

    
    /**
     * Adds an `int` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds an `int` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigInteger num2 = new BigInteger("789123456789");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, BigInteger b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds an `int` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds an `int` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     float num2 = 789.123f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, float b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds an `int` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds an `int` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     double num2 = 456.789;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, double b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds an `int` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds an `int` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigDecimal num2 = new BigDecimal("789.123");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result);
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(int a, BigDecimal b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `short` value to a `BigLong` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `short` value to a `BigLong` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigLong num2 = new BigLong("456");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, BigLong b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `short` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `short` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     byte num2 = 45;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, byte b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds two `short` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds two `short` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `short` operand.</li>
     *     <li><strong>b:</strong> The second `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     short num2 = 456;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `short` operand.
     * @param b The second `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, short b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `short` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `short` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     int num2 = 456;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, int b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `short` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `short` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     long num2 = 456789;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, long b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `short` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `short` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigInteger num2 = new BigInteger("456789");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, BigInteger b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `short` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `short` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     float num2 = 456.789f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, float b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `short` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `short` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     double num2 = 456.789;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, double b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `short` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `short` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigDecimal num2 = new BigDecimal("456.789");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(short a, BigDecimal b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to a `BigLong` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to a `BigLong` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigLong num2 = new BigLong("20");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, BigLong b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to another `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to another `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `byte` operand.</li>
     *     <li><strong>b:</strong> The second `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     byte num2 = 20;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `byte` operand.
     * @param b The second `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, byte b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     short num2 = 20;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, short b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     int num2 = 20;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, int b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     long num2 = 20L;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, long b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to a `BigInteger` and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to a `BigInteger` and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigInteger num2 = new BigInteger("20");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, BigInteger b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     float num2 = 20.5f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, float b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     double num2 = 20.5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, double b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `byte` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `byte` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigDecimal num2 = new BigDecimal("20.5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(byte a, BigDecimal b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `double` value to a `BigLong` and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `double` value to a `BigLong` and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigLong num2 = new BigLong("20");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 30.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, BigLong b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `double` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `double` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     byte num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, byte b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `double` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `double` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     short num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 15.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, short b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `double` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `double` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     int num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, int b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `double` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `double` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     long num2 = 5L;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 15.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, long b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `double` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `double` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, BigInteger b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `double` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `double` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, float b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds two `double` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds two `double` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `double` operand.</li>
     *     <li><strong>b:</strong> The second `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     double num2 = 5.5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `double` operand.
     * @param b The second `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, double b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `double` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `double` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(double a, BigDecimal b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `float` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `float` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, BigLong b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `float` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `float` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     byte num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, byte b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `float` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `float` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     short num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, short b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `float` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `float` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     int num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, int b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `float` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `float` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     long num2 = 5L;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, long b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `float` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `float` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, BigInteger b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds two `float` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds two `float` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `float` operand.</li>
     *     <li><strong>b:</strong> The second `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `float` operand.
     * @param b The second `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, float b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `float` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `float` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     double num2 = 5.5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, double b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `float` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `float` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result);
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(float a, BigDecimal b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigDecimal` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigDecimal` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, BigLong b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigDecimal` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigDecimal` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     byte num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, byte b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigDecimal` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigDecimal` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     short num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, short b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigDecimal` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigDecimal` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     int num2 = 5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, int b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigDecimal` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigDecimal` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     long num2 = 5L;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, long b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigDecimal` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigDecimal` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, BigInteger b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigDecimal` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigDecimal` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, float b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds a `BigDecimal` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds a `BigDecimal` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     double num2 = 5.5;
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, double b) {
        return new BigLong(a).add(b);
    }

    
    /**
     * Adds two `BigDecimal` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `add` method adds two `BigDecimal` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The second `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the addition.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigDecimal num2 = new BigDecimal("5");
     *     BigLong result = BigLong.add(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `BigDecimal` operand.
     * @param b The second `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the addition.
     */
    public static BigLong add(BigDecimal a, BigDecimal b) {
        return new BigLong(a).add(b);
    }


//---------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------------------
//                                                   ALL SUBTRACT METHODS                                                          |
//---------------------------------------------------------------------------------------------------------------------------------
    


    /**
     * Subtracts another `BigLong` number from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts another `BigLong` number from the current `BigLong` instance and returns the result as a new `BigLong`. If both the current instance and the other number are negative, the result will be positive. If the current instance is negative and the other number is positive, the result will be the negation of the addition of the absolute values. If the other number is negative, the result will be the addition of the current instance and the negation of the other number. If the current instance is greater than the other number, a normal subtraction is performed.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigLong` number to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 5
     * </pre>
     *
     * @param other The `BigLong` number to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(BigLong other) {
        if (this.isNegative() && other.isNegative()) {
            return other.negate().subtract(this.negate());
        } else if (this.isNegative()) {
            return this.negate().add(other).negate();
        } else if (other.isNegative()) {
            return this.add(other.negate());
        }

        if (this.compareTo(other) < 0) {
            return other.subtract(this).negate();
        }

        int maxLength = Math.max(this.value.length, other.value.length);
        long[] result = new long[maxLength];
        int borrow = 0;

        for (int i = 0; i < maxLength; i++) {
            long digit1 = i < this.value.length ? this.value[i] : 0;
            long digit2 = i < other.value.length ? other.value[i] : 0;
            long diff = digit1 - digit2 - borrow;

            if (diff < 0) {
                diff += 10;
                borrow = 1;
            } else {
                borrow = 0;
            }

            result[i] = diff;
        }

        BigLong res = new BigLong(result);
        return res.trim();
    }

    
    /**
     * Subtracts a `long` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts a `long` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>value:</strong> The `long` value to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     long num2 = 5L;
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 5
     * </pre>
     *
     * @param value The `long` value to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(long value) {
        return this.subtract(new BigLong(value));
    }

    
    /**
     * Subtracts an `int` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts an `int` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>value:</strong> The `int` value to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     int num2 = 5;
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 5
     * </pre>
     *
     * @param value The `int` value to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(int value) {
        return this.subtract(new BigLong(value));
    }

    
    /**
     * Subtracts a `short` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts a `short` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>value:</strong> The `short` value to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     short num2 = 5;
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 5
     * </pre>
     *
     * @param value The `short` value to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(short value) {
        return this.subtract(new BigLong(value));
    }
    

    /**
     * Subtracts a `byte` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts a `byte` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>value:</strong> The `byte` value to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     byte num2 = 5;
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 5
     * </pre>
     *
     * @param value The `byte` value to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(byte value) {
        return this.subtract(new BigLong(value));
    }

    
    /**
     * Subtracts a `BigInteger` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts a `BigInteger` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>value:</strong> The `BigInteger` value to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 5
     * </pre>
     *
     * @param value The `BigInteger` value to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(BigInteger value) {
        return this.subtract(new BigLong(value));
    }

    
    /**
     * Subtracts a `float` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts a `float` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>value:</strong> The `float` value to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     float num2 = 5.5f;
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 4.5
     * </pre>
     *
     * @param value The `float` value to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(float value) {
        return this.subtract(new BigLong(value));
    }

    
    /**
     * Subtracts a `double` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts a `double` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>value:</strong> The `double` value to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     double num2 = 5.5;
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 4.5
     * </pre>
     *
     * @param value The `double` value to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(double value) {
        return this.subtract(new BigLong(value));
    }

    
    /**
     * Subtracts a `BigDecimal` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method subtracts a `BigDecimal` value from the current `BigLong` instance and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>value:</strong> The `BigDecimal` value to be subtracted.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("10");
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = num1.subtract(num2);
     *     System.out.println("Result: " + result); // Output: Result: 4.5
     * </pre>
     *
     * @param value The `BigDecimal` value to be subtracted.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public BigLong subtract(BigDecimal value) {
        return this.subtract(new BigLong(value));
    }


    
//                                             All other static subtract methods
//                                            -----------------------------------
    
    /**
     * Subtracts two `BigLong` numbers and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts two `BigLong` numbers and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `BigLong` operand.</li>
     *     <li><strong>b:</strong> The second `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `BigLong` operand.
     * @param b The second `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, BigLong b) {
        return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigLong` number to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigLong` number to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     byte num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, byte b) {
        return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigLong` number to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigLong` number to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     short num2 = 100;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, short b) {
        return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigLong` number to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigLong` number to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     int num2 = 1000;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, int b) {
      return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigLong` number to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigLong` number to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, long b) {
        return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigLong` number to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigLong` number to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigInteger num2 = new BigInteger("1000000000");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, BigInteger b) {
        return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigLong` number to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigLong` number to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     float num2 = 10.5f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, float b) {
        return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigLong` number to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigLong` number to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     double num2 = 15.75;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, double b) {
        return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigLong` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigLong` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigDecimal num2 = new BigDecimal("1000000000.5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigLong a, BigDecimal b) {
        return a.subtract(b);
    }

    
    /**
     * Subtracts a `BigInteger` number to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigInteger` number to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigInteger a, BigLong b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigInteger` number to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigInteger` number to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     byte num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigInteger a, byte b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigInteger` number to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigInteger` number to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     short num2 = 100;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigInteger a, short b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigInteger` number to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigInteger` number to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     int num2 = 1000;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigInteger a, int b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigInteger` number to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigInteger` number to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigInteger a, long b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigInteger` number to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigInteger` number to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     float num2 = 10.5f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigInteger a, float b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigInteger` number to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigInteger` number to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     double num2 = 15.75;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigInteger a, double b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigInteger` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigInteger` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     BigDecimal num2 = new BigDecimal("1000000000.5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigInteger a, BigDecimal b) {
        return new BigLong(a).subtract(b);
    }


    /**
     * Subtracts a `long` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `long` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, BigLong b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `long` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `long` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     byte num2 = 10;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, byte b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `long` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `long` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     short num2 = 1000;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, short b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `long` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `long` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     int num2 = 10000;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, int b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts two `long` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts two `long` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `long` operand.</li>
     *     <li><strong>b:</strong> The second `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     long num2 = 987654321;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `long` operand.
     * @param b The second `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, long b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `long` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `long` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigInteger num2 = new BigInteger("987654321987654321");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, BigInteger b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `long` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `long` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     float num2 = 0.123456789f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, float b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `long` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `long` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     double num2 = 0.987654321;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, double b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `long` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `long` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigDecimal num2 = new BigDecimal("987654321.987654321");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(long a, BigDecimal b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts an `int` value to a `BigLong` and returns the result as a new `BigLong` instance.
     *
     * <p>
     * The `subtract` method Subtracts an `int` value to a `BigLong` and returns the result as a new `BigLong` instance.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigLong num2 = new BigLong("789012345678901234567890");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, BigLong b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts an `int` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts an `int` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     byte num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, byte b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts an `int` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts an `int` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     short num2 = 100;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, short b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts two `int` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts two `int` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `int` operand.</li>
     *     <li><strong>b:</strong> The second `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     int num2 = 789;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `int` operand.
     * @param b The second `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, int b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts an `int` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts an `int` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, long b) {
        return new BigLong(a).subtract(new BigLong(b));
    }

    
    /**
     * Subtracts an `int` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts an `int` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigInteger num2 = new BigInteger("789123456789");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, BigInteger b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts an `int` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts an `int` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     float num2 = 789.123f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, float b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts an `int` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts an `int` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     double num2 = 456.789;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, double b) {
        return new BigLong(a).subtract(b);
    }

    /**
     * Subtracts an `int` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts an `int` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigDecimal num2 = new BigDecimal("789.123");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result);
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(int a, BigDecimal b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `short` value to a `BigLong` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `short` value to a `BigLong` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigLong num2 = new BigLong("456");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, BigLong b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `short` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `short` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     byte num2 = 45;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, byte b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts two `short` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts two `short` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `short` operand.</li>
     *     <li><strong>b:</strong> The second `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     short num2 = 456;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `short` operand.
     * @param b The second `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, short b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `short` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `short` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     int num2 = 456;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, int b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `short` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `short` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     long num2 = 456789;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, long b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `short` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `short` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigInteger num2 = new BigInteger("456789");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, BigInteger b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `short` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `short` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     float num2 = 456.789f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, float b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `short` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `short` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     double num2 = 456.789;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, double b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `short` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `short` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigDecimal num2 = new BigDecimal("456.789");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(short a, BigDecimal b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to a `BigLong` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to a `BigLong` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigLong num2 = new BigLong("20");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, BigLong b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to another `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to another `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `byte` operand.</li>
     *     <li><strong>b:</strong> The second `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     byte num2 = 20;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `byte` operand.
     * @param b The second `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, byte b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     short num2 = 20;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, short b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     int num2 = 20;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, int b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     long num2 = 20L;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, long b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to a `BigInteger` and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to a `BigInteger` and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigInteger num2 = new BigInteger("20");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, BigInteger b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     float num2 = 20.5f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, float b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     double num2 = 20.5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, double b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `byte` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `byte` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigDecimal num2 = new BigDecimal("20.5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(byte a, BigDecimal b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `double` value to a `BigLong` and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `double` value to a `BigLong` and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigLong num2 = new BigLong("20");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 30.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, BigLong b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `double` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `double` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     byte num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, byte b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `double` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `double` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     short num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 15.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, short b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `double` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `double` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     int num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, int b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `double` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `double` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     long num2 = 5L;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 15.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, long b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `double` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `double` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, BigInteger b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `double` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `double` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, float b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts two `double` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts two `double` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `double` operand.</li>
     *     <li><strong>b:</strong> The second `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     double num2 = 5.5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `double` operand.
     * @param b The second `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, double b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `double` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `double` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(double a, BigDecimal b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `float` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `float` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, BigLong b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `float` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `float` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     byte num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, byte b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `float` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `float` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     short num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, short b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `float` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `float` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     int num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, int b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `float` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `float` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     long num2 = 5L;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, long b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `float` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `float` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, BigInteger b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts two `float` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts two `float` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `float` operand.</li>
     *     <li><strong>b:</strong> The second `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `float` operand.
     * @param b The second `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, float b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `float` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `float` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     double num2 = 5.5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, double b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `float` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `float` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result);
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(float a, BigDecimal b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigDecimal` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigDecimal` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, BigLong b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigDecimal` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigDecimal` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     byte num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, byte b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigDecimal` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigDecimal` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     short num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, short b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigDecimal` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigDecimal` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     int num2 = 5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, int b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigDecimal` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigDecimal` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     long num2 = 5L;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, long b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigDecimal` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigDecimal` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, BigInteger b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigDecimal` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigDecimal` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, float b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts a `BigDecimal` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts a `BigDecimal` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     double num2 = 5.5;
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, double b) {
        return new BigLong(a).subtract(b);
    }

    
    /**
     * Subtracts two `BigDecimal` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `subtract` method Subtracts two `BigDecimal` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The second `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the subtraction.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigDecimal num2 = new BigDecimal("5");
     *     BigLong result = BigLong.subtract(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `BigDecimal` operand.
     * @param b The second `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the subtraction.
     */
    public static BigLong subtract(BigDecimal a, BigDecimal b) {
        return new BigLong(a).subtract(b);
    }
    
//---------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------------------
//                                                  ALL MULTIPLY METHODS                                                          |
//---------------------------------------------------------------------------------------------------------------------------------

    
/*
  This is the implementation of the multiply(BigLong other) method in the BigLong class. The purpose of this method is to multiply
  the current BigLong object with another BigLong object (other) and return the result as a new BigLong object.

  The method starts by creating a new long array called result with a length that is the sum of the lengths of the two input 
  arrays, this.value and other.value. This array will store the individual digits of the result of the multiplication.

  The method then iterates over each digit in the this.value array, and for each digit, it multiplies it with each digit in the 
  other.value array. It also takes into account any carry value from the previous multiplication. The product is then added to 
  the corresponding index in the result array, and any carry value is stored for the next iteration.

  After all multiplications have been performed, the method checks if there is any carry left over. If there is, it is added to 
  the next index in the result array. The method then removes any leading zeros from the result by creating a new array with a 
  length equal to the number of non-zero digits in the result array.

  Finally, the method returns a new BigLong object that is initialized with the trimmed result array. 
*/    
    public BigLong multiply(BigLong other) {
        boolean thisNegative = this.isNegative();
        boolean otherNegative = other.isNegative();

        BigLong thisAbs = thisNegative ? this.negate() : this;
        BigLong otherAbs = otherNegative ? other.negate() : other;

        long[] result = new long[this.value.length + other.value.length];
        for (int i = 0; i < thisAbs.value.length; i++) {
            long carry = 0;
            for (int j = 0; j < otherAbs.value.length; j++) {
                long product = thisAbs.value[i] * otherAbs.value[j] + result[i + j] + carry;
                carry = product / 10;
                result[i + j] = product % 10;
            }
            result[i + otherAbs.value.length] = carry;
        }

        int k = result.length - 1;
        while (k > 0 && result[k] == 0) {
            k--;
        }
        long[] trimmedResult = new long[k + 1];
        System.arraycopy(result, 0, trimmedResult, 0, k + 1);

        return thisNegative ^ otherNegative ? new BigLong(trimmedResult).negate() : new BigLong(trimmedResult);
    }
    
    
    public BigLong multiply(long value) {
        return this.multiply(new BigLong(value));
    }
    public BigLong multiply(int value) 
    {
        return this.multiply(new BigLong(value));
    }
    public BigLong multiply(short value) 
    {
        return this.multiply(new BigLong(value));
    }
    public BigLong multiply(byte value) 
    {
    	return this.multiply(new BigLong(value));
    } 
    public BigLong multiply(BigInteger value)
    {
 	   return this.multiply(new BigLong(value));
    } 
    public BigLong multiply(float value) 
    {
        return this.multiply(new BigLong(value));
    }
    public BigLong multiply(double value) 
    {
    	return this.multiply(new BigLong(value));
    }
    public BigLong multiply(BigDecimal value)
    {
 	   return this.multiply(new BigLong(value));
    }
    
    
    
/*
  This is the implementation of the multiply(BigLong[] values) method in the BigLong class. This method takes an array of BigLong 
  values and returns their product as a new BigLong object.

  The method first initializes a new BigLong object called product with a value of 1. Then, for each BigLong value in the input 
  array, it multiplies the product by that value using the multiply(BigLong other) method of the BigLong class.

  After multiplying all the values, the final product is returned as the result. 
*/
    public static BigLong multiply(BigLong[] values) 
    {
    	BigLong product = new BigLong("1");
    	for (BigLong value : values) 
    	{
    		product = product.multiply(value);
    	}
    	return product;
    }
    public static BigLong multiply(long[] value) 
    {
    	BigLong prod = BigLong.ONE;
        for(long val : value)
        {
        	prod = prod.multiply(new BigLong(val));
        }
        return prod.trim();
    } 
    public static BigLong multiply(int[] value) 
    {
    	BigLong prod = BigLong.ONE;
        for(long val : value)
        {
        	prod = prod.multiply(new BigLong(val));
        }
        return prod.trim();
    }
    public static BigLong multiply(short[] value) 
    {
    	BigLong prod = BigLong.ONE;
        for(long val : value)
        {
        	prod = prod.multiply(new BigLong(val));
        }
        return prod.trim();
    }
    public static BigLong multiply(byte[] value) 
    {
    	BigLong prod = BigLong.ONE;
        for(long val : value)
        {
        	prod = prod.multiply(new BigLong(val));
        }
        return prod.trim();
    }
    public static BigLong multiply(BigInteger[] value) 
    {
    	BigLong prod = BigLong.ONE;
        for(BigInteger val : value)
        {
        	prod = prod.multiply(new BigLong(val));
        }
        return prod.trim();
    }
    public static BigLong multiply(float[] value) 
    {
    	BigLong prod = BigLong.ONE;
        for(float val : value)
        {
        	prod = prod.multiply(new BigLong(val));
        }
        return prod.trim();
    }
    public static BigLong multiply(double[] value) 
    {
    	BigLong prod = BigLong.ONE;
        for(double val : value)
        {
        	prod = prod.multiply(new BigLong(val));
        }
        return prod.trim();
    }    
    public static BigLong multiply(BigDecimal[] value)
    {
    	BigLong prod = BigLong.ONE;
        for(BigDecimal val : value)
        {
        	prod = prod.multiply(new BigLong(val));
        }
        return prod.trim();
    }
    
    
//                                All other static multiply methods
//                               -----------------------------------
    
    /**
     * Multiplies two `BigLong` numbers and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies two `BigLong` numbers and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `BigLong` operand.</li>
     *     <li><strong>b:</strong> The second `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `BigLong` operand.
     * @param b The second `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, BigLong b) {
        return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigLong` number to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigLong` number to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     byte num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, byte b) {
        return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigLong` number to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigLong` number to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     short num2 = 100;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, short b) {
        return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigLong` number to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigLong` number to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     int num2 = 1000;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, int b) {
      return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigLong` number to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigLong` number to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, long b) {
        return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigLong` number to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigLong` number to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigInteger num2 = new BigInteger("1000000000");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, BigInteger b) {
        return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigLong` number to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigLong` number to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     float num2 = 10.5f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, float b) {
        return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigLong` number to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigLong` number to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     double num2 = 15.75;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, double b) {
        return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigLong` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigLong` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigDecimal num2 = new BigDecimal("1000000000.5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigLong a, BigDecimal b) {
        return a.multiply(b);
    }

    
    /**
     * Multiplies a `BigInteger` number to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigInteger` number to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigInteger a, BigLong b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigInteger` number to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigInteger` number to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     byte num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigInteger a, byte b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigInteger` number to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigInteger` number to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     short num2 = 100;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigInteger a, short b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigInteger` number to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigInteger` number to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     int num2 = 1000;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigInteger a, int b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigInteger` number to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigInteger` number to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigInteger a, long b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigInteger` number to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigInteger` number to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     float num2 = 10.5f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigInteger a, float b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigInteger` number to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigInteger` number to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     double num2 = 15.75;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigInteger a, double b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigInteger` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigInteger` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     BigDecimal num2 = new BigDecimal("1000000000.5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigInteger a, BigDecimal b) {
        return new BigLong(a).multiply(b);
    }


    /**
     * Multiplies a `long` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `long` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, BigLong b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `long` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `long` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     byte num2 = 10;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, byte b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `long` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `long` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     short num2 = 1000;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, short b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `long` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `long` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     int num2 = 10000;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, int b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies two `long` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies two `long` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `long` operand.</li>
     *     <li><strong>b:</strong> The second `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     long num2 = 987654321;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `long` operand.
     * @param b The second `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, long b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `long` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `long` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigInteger num2 = new BigInteger("987654321987654321");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, BigInteger b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `long` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `long` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     float num2 = 0.123456789f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, float b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `long` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `long` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     double num2 = 0.987654321;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, double b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `long` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `long` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigDecimal num2 = new BigDecimal("987654321.987654321");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(long a, BigDecimal b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies an `int` value to a `BigLong` and returns the result as a new `BigLong` instance.
     *
     * <p>
     * The `multiply` method Multiplies an `int` value to a `BigLong` and returns the result as a new `BigLong` instance.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigLong num2 = new BigLong("789012345678901234567890");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, BigLong b) {
        return new BigLong(a).multiply(b);
    }

    /**
     * Multiplies an `int` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies an `int` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     byte num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, byte b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies an `int` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies an `int` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     short num2 = 100;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, short b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies two `int` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies two `int` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `int` operand.</li>
     *     <li><strong>b:</strong> The second `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     int num2 = 789;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `int` operand.
     * @param b The second `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, int b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies an `int` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies an `int` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, long b) {
        return new BigLong(a).multiply(new BigLong(b));
    }

    
    /**
     * Multiplies an `int` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies an `int` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigInteger num2 = new BigInteger("789123456789");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, BigInteger b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies an `int` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies an `int` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     float num2 = 789.123f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, float b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies an `int` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies an `int` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     double num2 = 456.789;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, double b) {
        return new BigLong(a).multiply(b);
    }

    /**
     * Multiplies an `int` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies an `int` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigDecimal num2 = new BigDecimal("789.123");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result);
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(int a, BigDecimal b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `short` value to a `BigLong` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `short` value to a `BigLong` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigLong num2 = new BigLong("456");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, BigLong b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `short` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `short` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     byte num2 = 45;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, byte b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies two `short` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies two `short` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `short` operand.</li>
     *     <li><strong>b:</strong> The second `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     short num2 = 456;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `short` operand.
     * @param b The second `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, short b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `short` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `short` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     int num2 = 456;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, int b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `short` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `short` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     long num2 = 456789;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, long b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `short` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `short` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigInteger num2 = new BigInteger("456789");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, BigInteger b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `short` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `short` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     float num2 = 456.789f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, float b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `short` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `short` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     double num2 = 456.789;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, double b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `short` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `short` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigDecimal num2 = new BigDecimal("456.789");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(short a, BigDecimal b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to a `BigLong` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to a `BigLong` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigLong num2 = new BigLong("20");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, BigLong b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to another `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to another `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `byte` operand.</li>
     *     <li><strong>b:</strong> The second `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     byte num2 = 20;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `byte` operand.
     * @param b The second `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, byte b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     short num2 = 20;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, short b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     int num2 = 20;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, int b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     long num2 = 20L;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, long b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to a `BigInteger` and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to a `BigInteger` and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigInteger num2 = new BigInteger("20");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, BigInteger b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     float num2 = 20.5f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, float b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     double num2 = 20.5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, double b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `byte` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `byte` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigDecimal num2 = new BigDecimal("20.5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(byte a, BigDecimal b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `double` value to a `BigLong` and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `double` value to a `BigLong` and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigLong num2 = new BigLong("20");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 30.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, BigLong b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `double` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `double` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     byte num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, byte b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `double` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `double` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     short num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 15.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, short b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `double` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `double` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     int num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, int b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `double` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `double` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     long num2 = 5L;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 15.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, long b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `double` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `double` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, BigInteger b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `double` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `double` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, float b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies two `double` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies two `double` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `double` operand.</li>
     *     <li><strong>b:</strong> The second `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     double num2 = 5.5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `double` operand.
     * @param b The second `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, double b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `double` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `double` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(double a, BigDecimal b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `float` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `float` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, BigLong b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `float` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `float` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     byte num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, byte b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `float` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `float` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     short num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, short b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `float` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `float` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     int num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, int b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `float` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `float` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     long num2 = 5L;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, long b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `float` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `float` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, BigInteger b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies two `float` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies two `float` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `float` operand.</li>
     *     <li><strong>b:</strong> The second `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `float` operand.
     * @param b The second `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, float b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `float` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `float` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     double num2 = 5.5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, double b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `float` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `float` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result);
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(float a, BigDecimal b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigDecimal` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigDecimal` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, BigLong b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigDecimal` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigDecimal` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     byte num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, byte b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigDecimal` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigDecimal` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     short num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, short b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigDecimal` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigDecimal` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     int num2 = 5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, int b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigDecimal` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigDecimal` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     long num2 = 5L;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, long b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigDecimal` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigDecimal` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, BigInteger b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigDecimal` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigDecimal` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, float b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies a `BigDecimal` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies a `BigDecimal` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     double num2 = 5.5;
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, double b) {
        return new BigLong(a).multiply(b);
    }

    
    /**
     * Multiplies two `BigDecimal` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `multiply` method Multiplies two `BigDecimal` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The second `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the multiplication.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigDecimal num2 = new BigDecimal("5");
     *     BigLong result = BigLong.multiply(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `BigDecimal` operand.
     * @param b The second `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the multiplication.
     */
    public static BigLong multiply(BigDecimal a, BigDecimal b) {
        return new BigLong(a).multiply(b);
    }
    
//---------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------
    
//---------------------------------------------------------------------------------------------------------------------------------
//                                               ALL DIVIDE METHODS                                                               |
//---------------------------------------------------------------------------------------------------------------------------------


    /**
     * Divides this `BigLong` number by the `other` `BigLong` number and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the `other` `BigLong` number and returns the quotient as a new `BigLong` number.
     * If the `other` number is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `other` number is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 0
     * </pre>
     *
     * @param other The `BigLong` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `other` number is zero.
     */
    public BigLong divide(BigLong other) {
        // Create a key for this divide operation.
        DivideCacheKey cacheKey = new DivideCacheKey(this, other);

        if (other.compareTo(new BigLong("0")) == 0) {
            throw new ArithmeticException("Division by zero");
        }

        // Check if the result is already cached.
        if (memoizationCacheForDivide.containsKey(cacheKey)) {
            return memoizationCacheForDivide.get(cacheKey);
        }

        BigLong quotient = new BigLong("0");
        BigLong remainder = new BigLong(this.value);
        BigLong divisor = new BigLong(other.value);

        // Determine the sign of the result.
        boolean negativeResult = this.isNegative() ^ other.isNegative();

        if (this.isNegative()) {
            remainder = remainder.negate();
        }

        if (other.isNegative()) {
            divisor = divisor.negate();
        }

        int compare;
        while ((compare = remainder.compareTo(divisor)) >= 0) {
            int shift = 0;

            while (remainder.compareTo(divisor.shiftLeft(shift + 1)) >= 0) {
                shift++;
            }

            BigLong shiftedDivisor = divisor.shiftLeft(shift);
            remainder = remainder.subtract(shiftedDivisor);
            BigLong shiftValue = new BigLong("1").shiftLeft(shift);
            quotient = quotient.add(shiftValue);
        }

        memoizationCacheForDivide.put(cacheKey, quotient.trim());

        return negativeResult ? quotient.negate().trim() : quotient.trim();
    }

    
    /**
     * Divides this `BigLong` number by the given `long` divisor and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the given `long` divisor and returns the quotient as a new `BigLong` number.
     * If the `divisor` is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `divisor` is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     long divisor = 9;
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 13717421
     * </pre>
     *
     * @param other The `long` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public BigLong divide(long other) {
        return this.divide(new BigLong(other));
    }

    
    /**
     * Divides this `BigLong` number by the given `short` divisor and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the given `short` divisor and returns the quotient as a new `BigLong` number.
     * If the `divisor` is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `divisor` is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     short divisor = 9;
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 13717421
     * </pre>
     *
     * @param other The `short` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public BigLong divide(short other) {
        return this.divide(new BigLong(other));
    }

    
    /**
     * Divides this `BigLong` number by the given `int` divisor and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the given `int` divisor and returns the quotient as a new `BigLong` number.
     * If the `divisor` is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `divisor` is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     int divisor = 9;
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 13717421
     * </pre>
     *
     * @param other The `int` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public BigLong divide(int other) {
        return this.divide(new BigLong(other));
    }

    
    /**
     * Divides this `BigLong` number by the given `byte` divisor and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the given `byte` divisor and returns the quotient as a new `BigLong` number.
     * If the `divisor` is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `divisor` is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     byte divisor = 9;
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 13717421
     * </pre>
     *
     * @param other The `byte` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public BigLong divide(byte other) {
        return this.divide(new BigLong(other));
    }

    
    /**
     * Divides this `BigLong` number by the given `BigInteger` divisor and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the given `BigInteger` divisor and returns the quotient as a new `BigLong` number.
     * If the `divisor` is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `divisor` is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigInteger divisor = new BigInteger("9");
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 13717421
     * </pre>
     *
     * @param other The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public BigLong divide(BigInteger other) {
        return this.divide(new BigLong(other));
    }

    
    /**
     * Divides this `BigLong` number by the given `float` divisor and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the given `float` divisor and returns the quotient as a new `BigLong` number.
     * If the `divisor` is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `divisor` is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     float divisor = 9.0f;
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 13717421
     * </pre>
     *
     * @param other The `float` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public BigLong divide(float other) {
        return this.divide(new BigLong(other));
    }

    
    /**
     * Divides this `BigLong` number by the given `double` divisor and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the given `double` divisor and returns the quotient as a new `BigLong` number.
     * If the `divisor` is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `divisor` is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     double divisor = 9.0;
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 13717421
     * </pre>
     *
     * @param other The `double` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public BigLong divide(double other) {
        return this.divide(new BigLong(other));
    }

    
    /**
     * Divides this `BigLong` number by the given `BigDecimal` divisor and returns the quotient as a new `BigLong` number.
     *
     * <p>
     * The `divide` method divides this `BigLong` number by the given `BigDecimal` divisor and returns the quotient as a new `BigLong` number.
     * If the `divisor` is zero, an `ArithmeticException` is thrown.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the quotient of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>`ArithmeticException` - If the `divisor` is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigDecimal divisor = new BigDecimal("9.0");
     *     BigLong result = dividend.divide(divisor);
     *     System.out.println("Quotient: " + result); // Output: Quotient: 13717421
     * </pre>
     *
     * @param other The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the quotient of the division.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public BigLong divide(BigDecimal other) {
        return this.divide(new BigLong(other));
    }

//                          All other static divide methods
//                         ---------------------------------  
    
    
    /**
     * Divides two `BigLong` numbers and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides two `BigLong` numbers and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `BigLong` operand.</li>
     *     <li><strong>b:</strong> The second `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `BigLong` operand.
     * @param b The second `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, BigLong b) {
        return a.divide(b);
    }

    
    /**
     * Divides a `BigLong` number to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigLong` number to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     byte num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, byte b) {
        return a.divide(b);
    }

    
    /**
     * Divides a `BigLong` number to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigLong` number to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     short num2 = 100;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, short b) {
        return a.divide(b);
    }

    
    /**
     * Divides a `BigLong` number to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigLong` number to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     int num2 = 1000;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, int b) {
      return a.divide(b);
    }

    
    /**
     * Divides a `BigLong` number to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigLong` number to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, long b) {
        return a.divide(b);
    }

    
    /**
     * Divides a `BigLong` number to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigLong` number to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigInteger num2 = new BigInteger("1000000000");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, BigInteger b) {
        return a.divide(b);
    }

    
    /**
     * Divides a `BigLong` number to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigLong` number to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     float num2 = 10.5f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, float b) {
        return a.divide(b);
    }

    
    /**
     * Divides a `BigLong` number to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigLong` number to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     double num2 = 15.75;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, double b) {
        return a.divide(b);
    }

    
    /**
     * Divides a `BigLong` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigLong` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigLong` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong num1 = new BigLong("123456789");
     *     BigDecimal num2 = new BigDecimal("1000000000.5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigLong` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigLong a, BigDecimal b) {
        return a.divide(b);
    }

    
    /**
     * Divides a `BigInteger` number to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigInteger` number to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigInteger a, BigLong b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigInteger` number to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigInteger` number to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     byte num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigInteger a, byte b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigInteger` number to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigInteger` number to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     short num2 = 100;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigInteger a, short b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigInteger` number to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigInteger` number to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     int num2 = 1000;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigInteger a, int b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigInteger` number to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigInteger` number to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigInteger a, long b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigInteger` number to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigInteger` number to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     float num2 = 10.5f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigInteger a, float b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigInteger` number to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigInteger` number to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     double num2 = 15.75;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigInteger a, double b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigInteger` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigInteger` number to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger num1 = new BigInteger("123456789");
     *     BigDecimal num2 = new BigDecimal("1000000000.5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigInteger` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigInteger a, BigDecimal b) {
        return new BigLong(a).divide(b);
    }


    /**
     * Divides a `long` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `long` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigLong num2 = new BigLong("987654321");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, BigLong b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `long` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `long` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     byte num2 = 10;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, byte b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `long` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `long` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     short num2 = 1000;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, short b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `long` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `long` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     int num2 = 10000;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, int b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides two `long` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides two `long` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `long` operand.</li>
     *     <li><strong>b:</strong> The second `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     long num2 = 987654321;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `long` operand.
     * @param b The second `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, long b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `long` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `long` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigInteger num2 = new BigInteger("987654321987654321");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, BigInteger b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `long` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `long` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     float num2 = 0.123456789f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, float b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `long` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `long` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     double num2 = 0.987654321;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, double b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `long` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `long` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long num1 = 123456789;
     *     BigDecimal num2 = new BigDecimal("987654321.987654321");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `long` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(long a, BigDecimal b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides an `int` value to a `BigLong` and returns the result as a new `BigLong` instance.
     *
     * <p>
     * The `divide` method Divides an `int` value to a `BigLong` and returns the result as a new `BigLong` instance.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigLong num2 = new BigLong("789012345678901234567890");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, BigLong b) {
        return new BigLong(a).divide(b);
    }

    /**
     * Divides an `int` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides an `int` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     byte num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, byte b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides an `int` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides an `int` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     short num2 = 100;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, short b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides two `int` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides two `int` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `int` operand.</li>
     *     <li><strong>b:</strong> The second `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     int num2 = 789;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `int` operand.
     * @param b The second `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, int b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides an `int` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides an `int` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     long num2 = 1000000L;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, long b) {
        return new BigLong(a).divide(new BigLong(b));
    }

    
    /**
     * Divides an `int` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides an `int` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigInteger num2 = new BigInteger("789123456789");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, BigInteger b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides an `int` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides an `int` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     float num2 = 789.123f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, float b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides an `int` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides an `int` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     double num2 = 456.789;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, double b) {
        return new BigLong(a).divide(b);
    }

    /**
     * Divides an `int` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides an `int` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int num1 = 123456;
     *     BigDecimal num2 = new BigDecimal("789.123");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result);
     * </pre>
     *
     * @param a The `int` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(int a, BigDecimal b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `short` value to a `BigLong` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `short` value to a `BigLong` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigLong num2 = new BigLong("456");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, BigLong b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `short` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `short` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     byte num2 = 45;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, byte b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides two `short` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides two `short` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `short` operand.</li>
     *     <li><strong>b:</strong> The second `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     short num2 = 456;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `short` operand.
     * @param b The second `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, short b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `short` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `short` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     int num2 = 456;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, int b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `short` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `short` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     long num2 = 456789;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, long b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `short` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `short` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigInteger num2 = new BigInteger("456789");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, BigInteger b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `short` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `short` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     float num2 = 456.789f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, float b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `short` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `short` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     double num2 = 456.789;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, double b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `short` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `short` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short num1 = 123;
     *     BigDecimal num2 = new BigDecimal("456.789");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `short` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(short a, BigDecimal b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to a `BigLong` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to a `BigLong` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigLong num2 = new BigLong("20");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, BigLong b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to another `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to another `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `byte` operand.</li>
     *     <li><strong>b:</strong> The second `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     byte num2 = 20;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `byte` operand.
     * @param b The second `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, byte b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     short num2 = 20;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, short b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     int num2 = 20;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, int b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     long num2 = 20L;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, long b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to a `BigInteger` and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to a `BigInteger` and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigInteger num2 = new BigInteger("20");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, BigInteger b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     float num2 = 20.5f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, float b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     double num2 = 20.5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, double b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `byte` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `byte` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte num1 = 10;
     *     BigDecimal num2 = new BigDecimal("20.5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `byte` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(byte a, BigDecimal b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `double` value to a `BigLong` and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `double` value to a `BigLong` and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigLong num2 = new BigLong("20");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 30.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, BigLong b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `double` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `double` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     byte num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, byte b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `double` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `double` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     short num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 15.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, short b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `double` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `double` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     int num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, int b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `double` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `double` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     long num2 = 5L;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); // Output: Result: 15.5
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, long b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `double` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `double` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, BigInteger b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `double` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `double` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, float b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides two `double` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides two `double` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `double` operand.</li>
     *     <li><strong>b:</strong> The second `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     double num2 = 5.5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `double` operand.
     * @param b The second `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, double b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `double` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `double` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double num1 = 10.5;
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `double` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(double a, BigDecimal b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `float` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `float` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, BigLong b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `float` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `float` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     byte num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, byte b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `float` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `float` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     short num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, short b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `float` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `float` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     int num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, int b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `float` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `float` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     long num2 = 5L;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, long b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `float` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `float` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, BigInteger b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides two `float` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides two `float` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `float` operand.</li>
     *     <li><strong>b:</strong> The second `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `float` operand.
     * @param b The second `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, float b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `float` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `float` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     double num2 = 5.5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, double b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `float` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `float` value to a `BigDecimal` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` operand.</li>
     *     <li><strong>b:</strong> The `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float num1 = 10.5f;
     *     BigDecimal num2 = new BigDecimal("5.5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result);
     * </pre>
     *
     * @param a The `float` operand.
     * @param b The `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(float a, BigDecimal b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigDecimal` value to a `BigLong` number and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigDecimal` value to a `BigLong` number and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `BigLong` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigLong num2 = new BigLong("5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `BigLong` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, BigLong b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigDecimal` value to a `byte` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigDecimal` value to a `byte` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `byte` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     byte num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `byte` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, byte b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigDecimal` value to a `short` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigDecimal` value to a `short` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `short` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     short num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `short` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, short b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigDecimal` value to an `int` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigDecimal` value to an `int` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `int` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     int num2 = 5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `int` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, int b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigDecimal` value to a `long` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigDecimal` value to a `long` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `long` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     long num2 = 5L;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `long` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, long b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigDecimal` value to a `BigInteger` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigDecimal` value to a `BigInteger` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `BigInteger` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigInteger num2 = new BigInteger("5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `BigInteger` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, BigInteger b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigDecimal` value to a `float` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigDecimal` value to a `float` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `float` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     float num2 = 5.5f;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `float` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, float b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides a `BigDecimal` value to a `double` value and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides a `BigDecimal` value to a `double` value and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The `double` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     double num2 = 5.5;
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The `BigDecimal` operand.
     * @param b The `double` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, double b) {
        return new BigLong(a).divide(b);
    }

    
    /**
     * Divides two `BigDecimal` values and returns the result as a new `BigLong`.
     *
     * <p>
     * The `divide` method Divides two `BigDecimal` values and returns the result as a new `BigLong`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The first `BigDecimal` operand.</li>
     *     <li><strong>b:</strong> The second `BigDecimal` operand.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal num1 = new BigDecimal("10.5");
     *     BigDecimal num2 = new BigDecimal("5");
     *     BigLong result = BigLong.divide(num1, num2);
     *     System.out.println("Result: " + result); 
     * </pre>
     *
     * @param a The first `BigDecimal` operand.
     * @param b The second `BigDecimal` operand.
     * @return A new `BigLong` instance representing the result of the division.
     */
    public static BigLong divide(BigDecimal a, BigDecimal b) {
        return new BigLong(a).divide(b);
    }
    
    
    /**
     * Divides this {@code BigLong} by another {@code BigLong} and returns the result as a {@code BigDecimal} with
     * specified precision.
     *
     * <p>
     * The {@code divideToBigDecimal} method performs division between two {@code BigLong} objects and returns the result
     * as a {@code BigDecimal}. It uses memoization to cache previously computed results for performance optimization.
     * The result is rounded to the specified precision using HALF_EVEN rounding mode.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>{@code other} - The {@code BigLong} divisor for division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <p>
     * The result of the division as a {@code BigDecimal} with specified precision.
     * </p>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     * BigLong dividend = new BigLong("123456");
     * BigLong divisor = new BigLong("789");
     * BigDecimal result = dividend.divideToBigDecimal(divisor);
     * </pre>
     *
     * @param other The {@code BigLong} divisor for division.
     * @return The result of the division as a {@code BigDecimal} with specified precision.
     */
    public BigDecimal divideToBigDecimal(BigLong other) {
        // Check if the result is already memoized
        DivideToBigDecimalCacheKey1 cacheKey = new DivideToBigDecimalCacheKey1(this, other);
        if (divideToBigDecimalCache1.containsKey(cacheKey)) {
            return divideToBigDecimalCache1.get(cacheKey);
        }

        BigDecimal a = new BigDecimal(this.toString());
        BigDecimal b = new BigDecimal(other.toString());

        BigDecimal result = a.divide(b, 1000, RoundingMode.HALF_EVEN);

        // Memoize the result
        divideToBigDecimalCache1.put(cacheKey, result);

        return result.stripTrailingZeros();
    }


    
    /**
     * Divides the `BigLong` number by the given `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     long divisor = 987654321L;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(long other) {
        return this.divideToBigDecimal(new BigLong(other));
    }

    
    /**
     * Divides the `BigLong` number by the given `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     short divisor = 987;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor);
     *     System.out.println("Result: " + result); // Output: Result: 125014.923957
     * </pre>
     *
     * @param other The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(short other) {
        return this.divideToBigDecimal(new BigLong(other));
    }

    
    /**
     * Divides the `BigLong` number by the given `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     int divisor = 987654321;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(int other) {
        return this.divideToBigDecimal(new BigLong(other));
    }

    
    /**
     * Divides the `BigLong` number by the given `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     byte divisor = 9;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor);
     *     System.out.println("Result: " + result); // Output: Result: 13717421.0000000000
     * </pre>
     *
     * @param other The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(byte other) {
        return this.divideToBigDecimal(new BigLong(other));
    }

    
    /**
     * Divides the `BigLong` number by the given `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigInteger divisor = new BigInteger("987654321987654321");
     *     BigDecimal result = dividend.divideToBigDecimal(divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001249999999999999999999999999987000045010
     * </pre>
     *
     * @param other The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(BigInteger other) {
        return this.divideToBigDecimal(new BigLong(other));
    }

    
    /**
     * Divides the `BigLong` number by the given `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     float divisor = 987654.321f;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor);
     *     System.out.println("Result: " + result); // Output: Result: 125014.9239574692920191256143450754245074380780853864834731728400366681116120718500515986651091501730421484
     * </pre>
     *
     * @param other The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(float other) {
        return this.divideToBigDecimal(new BigLong(other));
    }

    
    /**
     * Divides the `BigLong` number by the given `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     double divisor = 987654.321;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor);
     *     System.out.println("Result: " + result); // Output: Result: 125014.9239574692920191256143450754245074380780853864834731728400366681116120718500515986651091501730421484
     * </pre>
     *
     * @param other The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(double other) {
        return this.divideToBigDecimal(new BigLong(other));
    }

    
    /**
     * Divides the `BigLong` number by the given `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigDecimal divisor = new BigDecimal("987654321.987654321");
     *     BigDecimal result = dividend.divideToBigDecimal(divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001249999999999999999999999999987000045010
     * </pre>
     *
     * @param other The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(BigDecimal other) {
        return this.divideToBigDecimal(new BigLong(other));
    }

    
    /**
     * Divides the `BigLong` number by the given `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.12499999999999999999999999999999999999991666666666...
     * </pre>
     *
     * @param dividend The `BigLong` dividend.
     * @param divisor  The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong dividend, BigLong divisor) {
        return dividend.divideToBigDecimal(divisor);
    }

    
    /**
     * Divides the `BigLong` number by the given `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     byte divisor = 5;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 24691357.8
     * </pre>
     *
     * @param a The `BigLong` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong a, byte b) {
        return a.divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigLong` number by the given `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     short divisor = 100;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 1234567.89
     * </pre>
     *
     * @param a The `BigLong` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong a, short b) {
        return a.divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigLong` number by the given `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     int divisor = 3;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 41152263
     * </pre>
     *
     * @param a The `BigLong` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong a, int b) {
        return a.divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigLong` number by the given `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     long divisor = 7;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 17636684.142857142857142857142857142857142857142857142...
     * </pre>
     *
     * @param a The `BigLong` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong a, long b) {
        return a.divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigLong` number by the given `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigInteger divisor = new BigInteger("987654321987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001249999999999999999999999999987000045010
     * </pre>
     *
     * @param a The `BigLong` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong a, BigInteger b) {
        return a.divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigLong` number by the given `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     float divisor = 0.1f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 1234567890
     * </pre>
     *
     * @param a The `BigLong` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong a, float b) {
        return a.divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigLong` number by the given `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     double divisor = 0.5;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 246913578
     * </pre>
     *
     * @param a The `BigLong` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong a, double b) {
        return a.divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigLong` number by the given `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigDecimal divisor = new BigDecimal("0.12345");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 1000006.96467
     * </pre>
     *
     * @param a The `BigLong` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigLong a, BigDecimal b) {
        return a.divideToBigDecimal(b);
    }


    /**
     * Divides the given `BigInteger` dividend by the `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     BigLong divisor = new BigLong("987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 125216566.161290322580645161290322580645161290322580645...
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, BigLong b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the given `BigInteger` dividend by the `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     byte divisor = 7;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 17636684141093474.428571428571428571428571428571428571428571...
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, byte b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the given `BigInteger` dividend by the `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     short divisor = 5;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 24691357997530864.2000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, short b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the given `BigInteger` dividend by the `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     int divisor = 3;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 41152263220763107.000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, int b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the given `BigInteger` dividend by the `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     long divisor = 1000000000L;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 123456.7899876543210000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, long b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the given `BigInteger` dividend by the `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     BigInteger divisor = new BigInteger("987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 125216566.161290322580645161290322580645161290322580645...
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, BigInteger b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the given `BigInteger` dividend by the `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     float divisor = 0.12345f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 1000006.96467
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, float b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the given `BigInteger` dividend by the `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     double divisor = 0.000001;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 123456789987654321000000.000000
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, double b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the given `BigInteger` dividend by the `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigInteger` dividend by the given `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigInteger` dividend.</li>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789987654321");
     *     BigDecimal divisor = new BigDecimal("987654321.987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 125216566.161290322580645161290322580645161290322580645...
     * </pre>
     *
     * @param a The `BigInteger` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigInteger a, BigDecimal b) {
        return new BigLong(a).divideToBigDecimal(b);
    }


    /**
     * Divides the `long` dividend by the `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     BigLong divisor = new BigLong("987654321987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001249999999999999999999999999987000045010
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, BigLong b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `long` dividend by the `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     byte divisor = 10;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 12345678.9
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, byte b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `long` dividend by the `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     short divisor = 1000;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 123456.789
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, short b) {
        return new BigLong(a).divideToBigDecimal(b);
    }
    

    /**
     * Divides the `long` dividend by the `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     int divisor = 10000;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 12345.6789
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, int b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `long` dividend by the `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     long divisor = 1000000L;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 123.456789
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, long b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `long` dividend by the `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     BigInteger divisor = new BigInteger("987654321987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001249999999999999999999999999987000045010
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, BigInteger b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `long` dividend by the `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     float divisor = 1234.5678f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100000.0000469876428530272472741603858044189781560490...
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, float b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `long` dividend by the `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     double divisor = 1234.5678;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100000.0000469876428530272472741603858044189781560490...
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, double b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `long` dividend by the `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `long` dividend by the `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `long` dividend.</li>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     BigDecimal divisor = new BigDecimal("987654321987654321.987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001249999999999999999999999999987000045010
     * </pre>
     *
     * @param a The `long` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(long a, BigDecimal b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `int` dividend by the `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     BigLong divisor = new BigLong("1000");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 123.456
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, BigLong b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    /**
     * Divides the `int` dividend by the `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     byte divisor = 10;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 12345.600
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, byte b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `int` dividend by the `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     short divisor = 1234;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.03656457683425513905683192261130546158849374609170...
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, short b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `int` dividend by the `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     int divisor = 1234;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.03656457683425513905683192261130546158849374609170...
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, int b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `int` dividend by the `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     long divisor = 1234L;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.03656457683425513905683192261130546158849374609170...
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, long b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `int` dividend by the `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     BigInteger divisor = new BigInteger("987654321987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001249999999999999999999999999987000045010
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, BigInteger b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `int` dividend by the `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     float divisor = 1234.5678f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.00128
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, float b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `int` dividend by the `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     double divisor = 1234.5678;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.00128
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, double b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `int` dividend by the `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `int` dividend by the `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `int` dividend.</li>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123456;
     *     BigDecimal divisor = new BigDecimal("1234.5678");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.00128
     * </pre>
     *
     * @param a The `int` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(int a, BigDecimal b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     BigLong divisor = new BigLong("987654321");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 0.000001249414146366877175908078508698399166419943...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, BigLong b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     byte divisor = 12;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 102.8333333333333333333333333333333333333333333333...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, byte b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     short divisor = 12;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 102.8333333333333333333333333333333333333333333333...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, short b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     int divisor = 12;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 102.8333333333333333333333333333333333333333333333...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, int b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     long divisor = 12L;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 102.8333333333333333333333333333333333333333333333...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, long b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     BigInteger divisor = new BigInteger("12");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 102.8333333333333333333333333333333333333333333333...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, BigInteger b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     float divisor = 12.34f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.1615508885298869143780290794717671770972474654...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, float b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     double divisor = 12.34;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.1615508885298869143780290794717671770972474654...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, double b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `short` dividend by the `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `short` dividend by the `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `short` dividend.</li>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     BigDecimal divisor = new BigDecimal("12.34");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 100.1615508885298869143780290794717671770972474654...
     * </pre>
     *
     * @param a The `short` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(short a, BigDecimal b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     BigLong divisor = new BigLong("3");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, BigLong b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     byte divisor = 3;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, byte b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     short divisor = 3;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, short b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     int divisor = 3;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, int b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     long divisor = 3;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, long b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     BigInteger divisor = new BigInteger("3");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, BigInteger b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     float divisor = 3.0f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, float b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     double divisor = 3.0;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, double b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `byte` dividend by the `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `byte` dividend by the `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `byte` dividend.</li>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 12;
     *     BigDecimal divisor = new BigDecimal("3");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 4.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(byte a, BigDecimal b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     BigLong divisor = new BigLong("2");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, BigLong b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     byte divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, byte b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     short divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, short b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     int divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, int b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     long divisor = 2L;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, long b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     BigInteger divisor = new BigInteger("2");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, BigInteger b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     float divisor = 2.5f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 5.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, float b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     double divisor = 2.5;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 5.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, double b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `double` dividend by the `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `double` dividend by the `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `double` dividend.</li>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 12.5;
     *     BigDecimal divisor = new BigDecimal("2.5");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 5.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `double` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(double a, BigDecimal b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     BigLong divisor = new BigLong("2");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, BigLong b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     byte divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, byte b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     short divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, short b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     int divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, int b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     long divisor = 2L;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, long b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     BigInteger divisor = new BigInteger("2");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, BigInteger b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     float divisor = 2.0f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, float b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     double divisor = 2.0;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 6.2500000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, double b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `float` dividend by the `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `float` dividend by the `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `float` dividend.</li>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 12.5f;
     *     BigDecimal divisor = new BigDecimal("2.5");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 5.0000000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `float` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(float a, BigDecimal b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `BigLong` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     BigLong divisor = new BigLong("2");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `BigLong` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, BigLong b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `byte` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     byte divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `byte` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, byte b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `short` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     short divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `short` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, short b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `int` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     int divisor = 2;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `int` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, int b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `long` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     long divisor = 2L;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `long` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, long b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     BigInteger divisor = new BigInteger("2");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `BigInteger` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, BigInteger b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `float` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     float divisor = 2.0f;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `float` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, float b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `double` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     double divisor = 2.0;
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `double` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, double b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

    
    /**
     * Divides the `BigDecimal` dividend by the `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigDecimal` dividend by the `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision is set to 1000 decimal places, and the default rounding mode
     * `RoundingMode.HALF_EVEN` is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>a:</strong> The `BigDecimal` dividend.</li>
     *     <li><strong>b:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("123.45");
     *     BigDecimal divisor = new BigDecimal("2.0");
     *     BigDecimal result = divideToBigDecimal(dividend, divisor);
     *     System.out.println("Result: " + result); // Output: Result: 61.7250000000000000000000000000000000000000000000...
     * </pre>
     *
     * @param a The `BigDecimal` dividend.
     * @param b The `BigDecimal` divisor.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public static BigDecimal divideToBigDecimal(BigDecimal a, BigDecimal b) {
        return new BigLong(a).divideToBigDecimal(b);
    }

 
    
    
    /**
     * Divides the `BigLong` number by the given `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigLong` divisor and returns the result 
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a 
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigLong` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other The `BigLong` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(BigLong other, RoundingMode r) {
        // Create a cache key using the dividend, divisor, and rounding mode
        DivideToBigDecimalCacheKey2 cacheKey = new DivideToBigDecimalCacheKey2(this, other, r);

        // Check if the result is already memoized
        if (divideToBigDecimalCache2.containsKey(cacheKey)) {
            return divideToBigDecimalCache2.get(cacheKey);
        }

        BigDecimal a = new BigDecimal(this.toString());
        BigDecimal b = new BigDecimal(other.toString());

        BigDecimal result = a.divide(b, 1000, r);

        // Memoize the result for future use
        divideToBigDecimalCache2.put(cacheKey, result);

        return result.stripTrailingZeros();
    }

    
    /**
     * Divides the `BigLong` number by the given `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigInteger` divisor and returns the result
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigInteger` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigInteger divisor = new BigInteger("987654321");
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other The `BigInteger` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(BigInteger other, RoundingMode r) {
        return this.divideToBigDecimal(new BigLong(other), r);
    }

    
    /**
     * Divides the `BigLong` number by the given `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `long` divisor and returns the result
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `long` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     long divisor = 987654321;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other The `long` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(long other, RoundingMode r) {
        return this.divideToBigDecimal(new BigLong(other), r);
    }

    
    /**
     * Divides the `BigLong` number by the given `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `int` divisor and returns the result
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `int` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     int divisor = 987654321;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other The `int` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(int other, RoundingMode r) {
        return this.divideToBigDecimal(new BigLong(other), r);
    }

    
    /**
     * Divides the `BigLong` number by the given `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `short` divisor and returns the result
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `short` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     short divisor = 987;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 125014.923957
     * </pre>
     *
     * @param other The `short` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(short other, RoundingMode r) {
        return this.divideToBigDecimal(new BigLong(other), r);
    }

    
    /**
     * Divides the `BigLong` number by the given `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `byte` divisor and returns the result
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `byte` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     byte divisor = 9;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 13717421.000000
     * </pre>
     *
     * @param other The `byte` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(byte other, RoundingMode r) {
        return this.divideToBigDecimal(new BigLong(other), r);
    }

    
    /**
     * Divides the `BigLong` number by the given `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `float` divisor and returns the result
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `float` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     float divisor = 987654321.12345f;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001250
     * </pre>
     *
     * @param other The `float` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(float other, RoundingMode r) {
        return this.divideToBigDecimal(new BigLong(other), r);
    }

    
    /**
     * Divides the `BigLong` number by the given `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `double` divisor and returns the result
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `double` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     double divisor = 987654321.12345;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001250
     * </pre>
     *
     * @param other The `double` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(double other, RoundingMode r) {
        return this.divideToBigDecimal(new BigLong(other), r);
    }

    
    /**
     * Divides the `BigLong` number by the given `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigDecimal` divisor and returns the result
     * as a `BigDecimal`. The precision and rounding mode can be specified for the division operation. By default, a
     * precision of 1000 decimal places is used.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigDecimal` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigDecimal divisor = new BigDecimal("987654321.12345");
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode);
     *     System.out.println("Result: " + result); // Output: Result: 0.0000001250
     * </pre>
     *
     * @param other The `BigDecimal` divisor.
     * @param r     The `RoundingMode` to be used for the division.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(BigDecimal other, RoundingMode r) {
        return this.divideToBigDecimal(new BigLong(other), r);
    }


    
    
    /**
     * Divides the `BigLong` number by the given `BigLong` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigLong` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigLong` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other     The `BigLong` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(BigLong other, RoundingMode r, int precision) {
        // Create a cache key using the dividend, divisor, rounding mode, and precision
        DivideToBigDecimalCacheKey3 cacheKey = new DivideToBigDecimalCacheKey3(this, other, r, precision);

        // Check if the result is already memoized
        if (divideToBigDecimalCache3.containsKey(cacheKey)) {
            return divideToBigDecimalCache3.get(cacheKey);
        }

        BigDecimal a = new BigDecimal(this.toString());
        BigDecimal b = new BigDecimal(other.toString());

        BigDecimal result = a.divide(b, precision, r);

        // Memoize the result for future use
        divideToBigDecimalCache3.put(cacheKey, result);

        return result.stripTrailingZeros();
    }

    
    /**
     * Divides the `BigLong` number by the given `BigInteger` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigInteger` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigInteger` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigInteger divisor = new BigInteger("987654321");
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other     The `BigInteger` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(BigInteger other, RoundingMode r, int precision) {
        return this.divideToBigDecimal(new BigLong(other), r, precision);
    }

    
    /**
     * Divides the `BigLong` number by the given `long` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `long` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `long` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     long divisor = 987654321L;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other     The `long` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(long other, RoundingMode r, int precision) {
        return this.divideToBigDecimal(new BigLong(other), r, precision);
    }

    
    /**
     * Divides the `BigLong` number by the given `int` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `int` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `int` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     int divisor = 987654321;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other     The `int` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(int other, RoundingMode r, int precision) {
        return this.divideToBigDecimal(new BigLong(other), r, precision);
    }

    
    /**
     * Divides the `BigLong` number by the given `short` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `short` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `short` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     short divisor = 987;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 124935.9036144578
     * </pre>
     *
     * @param other     The `short` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(short other, RoundingMode r, int precision) {
        return this.divideToBigDecimal(new BigLong(other), r, precision);
    }

    
    /**
     * Divides the `BigLong` number by the given `byte` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `byte` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `byte` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     byte divisor = 9;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 13717421.0
     * </pre>
     *
     * @param other     The `byte` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(byte other, RoundingMode r, int precision) {
        return this.divideToBigDecimal(new BigLong(other), r, precision);
    }

    
    /**
     * Divides the `BigLong` number by the given `float` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `float` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `float` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     float divisor = 987654321.123f;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 0.000124936
     * </pre>
     *
     * @param other     The `float` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(float other, RoundingMode r, int precision) {
        return this.divideToBigDecimal(new BigLong(other), r, precision);
    }

    
    /**
     * Divides the `BigLong` number by the given `double` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `double` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `double` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     double divisor = 987654321.12345;
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 0.000124936
     * </pre>
     *
     * @param other     The `double` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(double other, RoundingMode r, int precision) {
        return this.divideToBigDecimal(new BigLong(other), r, precision);
    }

    
    /**
     * Divides the `BigLong` number by the given `BigDecimal` divisor and returns the result as a `BigDecimal`.
     *
     * <p>
     * The `divideToBigDecimal` method divides the `BigLong` number by the given `BigDecimal` divisor and returns the result as a `BigDecimal`. The precision and rounding mode can be specified for the division operation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>other:</strong> The `BigDecimal` divisor.</li>
     *     <li><strong>r:</strong> The `RoundingMode` to be used for the division.</li>
     *     <li><strong>precision:</strong> The desired precision of the result.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A `BigDecimal` instance representing the result of the division.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigDecimal divisor = new BigDecimal("987654321.12345");
     *     RoundingMode roundingMode = RoundingMode.HALF_UP;
     *     int precision = 10;
     *     BigDecimal result = dividend.divideToBigDecimal(divisor, roundingMode, precision);
     *     System.out.println("Result: " + result); // Output: Result: 0.125
     * </pre>
     *
     * @param other     The `BigDecimal` divisor.
     * @param r         The `RoundingMode` to be used for the division.
     * @param precision The desired precision of the result.
     * @return A `BigDecimal` instance representing the result of the division.
     */
    public BigDecimal divideToBigDecimal(BigDecimal other, RoundingMode r, int precision) {
        return this.divideToBigDecimal(new BigLong(other), r, precision);
    }

    
    
//---------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------
      
//---------------------------------------------------------------------------------------------------------------------------------
//                                                 ALL MODULO METHODS                                                          |
//---------------------------------------------------------------------------------------------------------------------------------

    
    
    /**
     * Returns the modulo of the `BigLong` number divided by the given divisor.
     *
     * <p>
     * The `modulo` method calculates the modulo of the `BigLong` number divided by the given divisor. It uses Python code internally to perform the calculation.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Throws:</strong>
     * </p>
     * <ul>
     *     <li>An `ArithmeticException` if the divisor is zero.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: 123456789
     * </pre>
     *
     * @param divisor The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the divisor is zero.
     */
    public BigLong modulo(BigLong divisor)
    {
        ModulusCacheKey cacheKey = new ModulusCacheKey(this, divisor);

        // Check if the result is already cached.
        if (memoizationCacheForModulus.containsKey(cacheKey)) {
            return memoizationCacheForModulus.get(cacheKey);
        }
        
        if(divisor.equals(ZERO))
        {
        	throw new ArithmeticException("No number is not divisible by 0");
        }

        BigLong quotient = this.divide(divisor);
        BigLong modulo = quotient.multiply(divisor).subtract(this).negate();

        memoizationCacheForModulus.put(cacheKey, modulo);

        return modulo;
    }

    
    /**
     * Returns the modulo of the `BigLong` number divided by the given `long` value.
     *
     * <p>
     * This method calculates the modulo of the `BigLong` number divided by the given `long` value.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`other` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     long divisor = 987654321L;
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param other The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     */
    public BigLong modulo(long other) {
        return this.modulo(new BigLong(other));
    }
    

    /**
     * Returns the modulo of the `BigLong` number divided by the given `short` value.
     *
     * <p>
     * This method calculates the modulo of the `BigLong` number divided by the given `short` value.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`other` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     short divisor = 9876;
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param other The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     */
    public BigLong modulo(short other) {
        return this.modulo(new BigLong(other));
    }

    
    /**
     * Returns the modulo of the `BigLong` number divided by the given `int` value.
     *
     * <p>
     * This method calculates the modulo of the `BigLong` number divided by the given `int` value.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`other` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     int divisor = 987654;
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param other The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     */
    public BigLong modulo(int other) {
        return this.modulo(new BigLong(other));
    }


    /**
     * Returns the modulo of the `BigLong` number divided by the given `byte` value.
     *
     * <p>
     * This method calculates the modulo of the `BigLong` number divided by the given `byte` value.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`other` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     byte divisor = 7;
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param other The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     */
    public BigLong modulo(byte other) {
        return this.modulo(new BigLong(other));
    }

    
    /**
     * Returns the modulo of the `BigLong` number divided by the given `BigInteger` value.
     *
     * <p>
     * This method calculates the modulo of the `BigLong` number divided by the given `BigInteger` value.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`other` - The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigInteger divisor = new BigInteger("987654321");
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param other The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     */
    public BigLong modulo(BigInteger other) {
        return this.modulo(new BigLong(other));
    }

    
    /**
     * Returns the modulo of the `BigLong` number divided by the given `float` value.
     *
     * <p>
     * This method calculates the modulo of the `BigLong` number divided by the given `float` value.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`other` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     float divisor = 7.5f;
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param other The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     */
    public BigLong modulo(float other) {
        return this.modulo(new BigLong(other));
    }

    
    /**
     * Returns the modulo of the `BigLong` number divided by the given `double` value.
     *
     * <p>
     * This method calculates the modulo of the `BigLong` number divided by the given `double` value.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`other` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     double divisor = 7.5;
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param other The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     */
    public BigLong modulo(double other) {
        return this.modulo(new BigLong(other));
    }

 
    /**
     * Returns the modulo of the `BigLong` number divided by the given `BigDecimal` value.
     *
     * <p>
     * This method calculates the modulo of the `BigLong` number divided by the given `BigDecimal` value.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`other` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigDecimal divisor = new BigDecimal("7.5");
     *     BigLong modulo = dividend.modulo(divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param other The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     */
    public BigLong modulo(BigDecimal other) {
        return this.modulo(new BigLong(other));
    }

    
//                                      All other static modulo methods
//                                     ----------------------------------
    
    /**
     * Returns the modulo of the first `BigLong` number divided by the second `BigLong` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `BigLong` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `BigLong` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `BigLong` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `BigLong` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, BigLong b) {
        return new BigLong(a).modulo(b);
    }


    /**
     * Returns the modulo of the first `BigLong` number divided by the second `byte` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `byte` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `byte` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     byte divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `byte` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `byte` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the first `BigLong` number divided by the second `short` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `short` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `short` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     short divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `short` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `short` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, short b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the first `BigLong` number divided by the second `int` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `int` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `int` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     int divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `int` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `int` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the first `BigLong` number divided by the second `long` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `long` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `long` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     long divisor = 7L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `long` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `long` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the first `BigLong` number divided by the second `BigInteger` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `BigInteger` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `BigInteger` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigInteger divisor = new BigInteger("987654321");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `BigInteger` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `BigInteger` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the first `BigLong` number divided by the second `float` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `float` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `float` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     float divisor = 7.5f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `float` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `float` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, float b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the first `BigLong` number divided by the second `double` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `double` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `double` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     double divisor = 7.5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `double` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `double` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the first `BigLong` number divided by the second `BigDecimal` number.
     *
     * <p>
     * This method calculates the modulo of the first `BigLong` number divided by the second `BigDecimal` number.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigLong` number (the dividend).</li>
     *     <li>`b` - The second `BigDecimal` number (the divisor).</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigDecimal divisor = new BigDecimal("987654321");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigLong` number (the dividend).
     * @param b The second `BigDecimal` number (the divisor).
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `BigDecimal` number (`b`) is zero.
     */
    public static BigLong modulo(BigLong a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }


    /**
     * Returns the modulo of the `BigInteger` number divided by the `BigLong` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigInteger` number divided by the `BigLong` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number (the dividend).</li>
     *     <li>`b` - The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigInteger` number (the dividend).
     * @param b The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigLong` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, BigLong b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigInteger` number divided by the `byte` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigInteger` number divided by the `byte` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number (the dividend).</li>
     *     <li>`b` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     byte divisor = 5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigInteger` number (the dividend).
     * @param b The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `byte` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigInteger` number divided by the `short` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigInteger` number divided by the `short` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number (the dividend).</li>
     *     <li>`b` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     short divisor = 5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigInteger` number (the dividend).
     * @param b The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `short` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, short b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigInteger` number divided by the `int` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigInteger` number divided by the `int` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number (the dividend).</li>
     *     <li>`b` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     int divisor = 5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigInteger` number (the dividend).
     * @param b The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `int` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigInteger` number divided by the `long` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigInteger` number divided by the `long` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number (the dividend).</li>
     *     <li>`b` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     long divisor = 50000000L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigInteger` number (the dividend).
     * @param b The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `long` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the first `BigInteger` number divided by the second `BigInteger` divisor.
     *
     * <p>
     * This method calculates the modulo of the first `BigInteger` number divided by the second `BigInteger` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The first `BigInteger` number (the dividend).</li>
     *     <li>`b` - The second `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     BigInteger divisor = new BigInteger("987654321");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The first `BigInteger` number (the dividend).
     * @param b The second `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the second `BigInteger` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigInteger` number divided by the `float` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigInteger` number divided by the `float` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number (the dividend).</li>
     *     <li>`b` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     float divisor = 9876.543f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigInteger` number (the dividend).
     * @param b The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `float` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, float b) {
        return new BigLong(a).modulo(b);
    }
    
    
    /**
     * Returns the modulo of the `BigInteger` number divided by the `double` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigInteger` number divided by the `double` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number (the dividend).</li>
     *     <li>`b` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     double divisor = 9876.543;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigInteger` number (the dividend).
     * @param b The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `double` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigInteger` number divided by the `BigDecimal` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigInteger` number divided by the `BigDecimal` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number (the dividend).</li>
     *     <li>`b` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger dividend = new BigInteger("123456789");
     *     BigDecimal divisor = new BigDecimal("9876.543");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigInteger` number (the dividend).
     * @param b The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigDecimal` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigInteger a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }


    /**
     * Returns the modulo of the `long` number divided by the `BigLong` divisor.
     *
     * <p>
     * This method calculates the modulo of the `long` number divided by the `BigLong` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     BigLong divisor = new BigLong("987654321");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigLong` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, BigLong b) {
        return new BigLong(a).modulo(b);
    }

    /**
     * Returns the modulo of the `long` number divided by the `byte` divisor.
     *
     * <p>
     * This method calculates the modulo of the `long` number divided by the `byte` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     byte divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `byte` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `long` number divided by the `short` divisor.
     *
     * <p>
     * This method calculates the modulo of the `long` number divided by the `short` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     short divisor = 42;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `short` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, short b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `long` number divided by the `int` divisor.
     *
     * <p>
     * This method calculates the modulo of the `long` number divided by the `int` divisor.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     int divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `int` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `long` number divided by another `long` number.
     *
     * <p>
     * This method calculates the modulo of the `long` number `a` divided by the `long` number `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     long divisor = 42L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `long` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `long` number divided by a `BigInteger` divisor.
     *
     * <p>
     * This method calculates the modulo of the `long` number `a` divided by the `BigInteger` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     BigInteger divisor = new BigInteger("987654321");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigInteger` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `long` number divided by a `float` divisor.
     *
     * <p>
     * This method calculates the modulo of the `long` number `a` divided by the `float` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     float divisor = 42.0f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `float` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, float b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `long` number divided by a `double` divisor.
     *
     * <p>
     * This method calculates the modulo of the `long` number `a` divided by the `double` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     double divisor = 42.0;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `double` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `long` number divided by a `BigDecimal` divisor.
     *
     * <p>
     * This method calculates the modulo of the `long` number `a` divided by the `BigDecimal` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `long` number (the dividend).</li>
     *     <li>`b` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long dividend = 123456789L;
     *     BigDecimal divisor = new BigDecimal("42.0");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `long` number (the dividend).
     * @param b The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigDecimal` divisor (`b`) is zero.
     */
    public static BigLong modulo(long a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number divided by a `BigLong` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `BigLong` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 12345;
     *     BigLong divisor = new BigLong("42");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigLong` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, BigLong b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number `a` divided by a `byte` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `byte` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 123;
     *     byte divisor = 4;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `byte` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number `a` divided by a `short` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `short` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 12345;
     *     short divisor = 42;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `short` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, short b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number `a` divided by another `int` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `int` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 12345;
     *     int divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `int` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number `a` divided by a `long` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `long` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 12345;
     *     long divisor = 7L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `long` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number `a` divided by a `BigInteger` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `BigInteger` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 12345;
     *     BigInteger divisor = new BigInteger("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigInteger` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number `a` divided by a `float` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `float` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 12345;
     *     float divisor = 7.5f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `float` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, float b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number `a` divided by a `double` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `double` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 12345;
     *     double divisor = 7.5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `double` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `int` number `a` divided by a `BigDecimal` divisor.
     *
     * <p>
     * This method calculates the modulo of the `int` number `a` divided by the `BigDecimal` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` number (the dividend).</li>
     *     <li>`b` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int dividend = 12345;
     *     BigDecimal divisor = new BigDecimal("7.5");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `int` number (the dividend).
     * @param b The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigDecimal` divisor (`b`) is zero.
     */
    public static BigLong modulo(int a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by a `BigLong` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `BigLong` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     BigLong divisor = new BigLong("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigLong` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, BigLong b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by a `byte` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `byte` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     byte divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `byte` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by a `short` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `short` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     short divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `short` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, short b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by an `int` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `int` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     int divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `int` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by a `long` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `long` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     long divisor = 7L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `long` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by a `BigInteger` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `BigInteger` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     BigInteger divisor = new BigInteger("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigInteger` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by a `float` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `float` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     float divisor = 7.5f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `float` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, float b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by a `double` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `double` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     double divisor = 7.5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `double` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `short` number `a` divided by a `BigDecimal` divisor.
     *
     * <p>
     * This method calculates the modulo of the `short` number `a` divided by the `BigDecimal` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` number (the dividend).</li>
     *     <li>`b` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short dividend = 1234;
     *     BigDecimal divisor = new BigDecimal("7.5");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `short` number (the dividend).
     * @param b The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigDecimal` divisor (`b`) is zero.
     */
    public static BigLong modulo(short a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `byte` number `a` divided by a `BigLong` divisor.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `BigLong` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` number (the dividend).</li>
     *     <li>`b` - The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     BigLong divisor = new BigLong("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` number (the dividend).
     * @param b The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigLong` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, BigLong b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of two `byte` numbers, `a` and `b`.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `byte` number `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` dividend.</li>
     *     <li>`b` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     byte divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` dividend.
     * @param b The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `byte` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `byte` number `a` divided by a `short` divisor.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `short` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` number (the dividend).</li>
     *     <li>`b` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     short divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` number (the dividend).
     * @param b The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `short` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, short b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `byte` number `a` divided by an `int` divisor.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `int` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` number (the dividend).</li>
     *     <li>`b` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     int divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` number (the dividend).
     * @param b The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `int` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `byte` number `a` divided by a `long` divisor.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `long` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` number (the dividend).</li>
     *     <li>`b` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     long divisor = 7L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` number (the dividend).
     * @param b The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `long` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `byte` number `a` divided by a `BigInteger` divisor.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `BigInteger` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` number (the dividend).</li>
     *     <li>`b` - The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     BigInteger divisor = new BigInteger("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` number (the dividend).
     * @param b The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigInteger` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `byte` number `a` divided by a `float` divisor.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `float` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` number (the dividend).</li>
     *     <li>`b` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     float divisor = 7.5f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` number (the dividend).
     * @param b The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `float` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, float b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `byte` number `a` divided by a `double` divisor.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `double` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` number (the dividend).</li>
     *     <li>`b` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     double divisor = 7.5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` number (the dividend).
     * @param b The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `double` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `byte` number `a` divided by a `BigDecimal` divisor.
     *
     * <p>
     * This method calculates the modulo of the `byte` number `a` divided by the `BigDecimal` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` number (the dividend).</li>
     *     <li>`b` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte dividend = 123;
     *     BigDecimal divisor = new BigDecimal("7.5");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `byte` number (the dividend).
     * @param b The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigDecimal` divisor (`b`) is zero.
     */
    public static BigLong modulo(byte a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `double` number `a` divided by a `BigLong` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `BigLong` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 123.45;
     *     BigLong divisor = new BigLong("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigLong` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, BigLong b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `double` number `a` divided by a `byte` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `byte` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 123.45;
     *     byte divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `byte` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `double` number `a` divided by a `short` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `short` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 123.45;
     *     short divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `short` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, short b) {
        return new BigLong(a).modulo(b);
    }


    /**
     * Returns the modulo of the `double` number `a` divided by an `int` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `int` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 1234.567;
     *     int divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `int` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `double` number `a` divided by a `long` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `long` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 1234.567;
     *     long divisor = 7L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `long` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `double` number `a` divided by a `BigInteger` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `BigInteger` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 1234.567;
     *     BigInteger divisor = new BigInteger("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigInteger` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `double` number `a` divided by a `float` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `float` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 1234.567;
     *     float divisor = 7.5f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `float` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, float b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `double` number `a` divided by a `double` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `double` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 1234.567;
     *     double divisor = 7.5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `double` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `double` number `a` divided by a `BigDecimal` divisor.
     *
     * <p>
     * This method calculates the modulo of the `double` number `a` divided by the `BigDecimal` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` number (the dividend).</li>
     *     <li>`b` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double dividend = 1234.567;
     *     BigDecimal divisor = new BigDecimal("7.5");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `double` number (the dividend).
     * @param b The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigDecimal` divisor (`b`) is zero.
     */
    public static BigLong modulo(double a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by a `BigLong` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `BigLong` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     BigLong divisor = new BigLong("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigLong` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, BigLong b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by a `byte` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `byte` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     byte divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `byte` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by a `short` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `short` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     short divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `short` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, short b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by an `int` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `int` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     int divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `int` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by a `long` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `long` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     long divisor = 7L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `long` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by a `BigInteger` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `BigInteger` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     BigInteger divisor = new BigInteger("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigInteger` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by a `float` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `float` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     float divisor = 7.5f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `float` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, float b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by a `double` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `double` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     double divisor = 7.5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `double` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `float` number `a` divided by a `BigDecimal` divisor.
     *
     * <p>
     * This method calculates the modulo of the `float` number `a` divided by the `BigDecimal` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` number (the dividend).</li>
     *     <li>`b` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float dividend = 1234.567f;
     *     BigDecimal divisor = new BigDecimal("7.5");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `float` number (the dividend).
     * @param b The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigDecimal` divisor (`b`) is zero.
     */
    public static BigLong modulo(float a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by a `BigLong` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `BigLong` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     BigLong divisor = new BigLong("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `BigLong` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigLong` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, BigLong b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by a `byte` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `byte` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     byte divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `byte` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `byte` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, byte b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by a `short` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `short` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     short divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `short` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `short` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, short b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by an `int` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `int` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     int divisor = 7;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `int` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `int` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, int b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by a `long` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `long` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     long divisor = 7L;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `long` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `long` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, long b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by a `BigInteger` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `BigInteger` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     BigInteger divisor = new BigInteger("7");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `BigInteger` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigInteger` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, BigInteger b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by a `float` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `float` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     float divisor = 7.5f;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `float` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `float` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, float b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by a `double` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `double` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     double divisor = 7.5;
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `double` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `double` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, double b) {
        return new BigLong(a).modulo(b);
    }

    
    /**
     * Returns the modulo of the `BigDecimal` number `a` divided by a `BigDecimal` divisor.
     *
     * <p>
     * This method calculates the modulo of the `BigDecimal` number `a` divided by the `BigDecimal` divisor `b`.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` number (the dividend).</li>
     *     <li>`b` - The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>A new `BigLong` instance representing the modulo.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal dividend = new BigDecimal("1234.567");
     *     BigDecimal divisor = new BigDecimal("7.5");
     *     BigLong modulo = BigLong.modulo(dividend, divisor);
     *     System.out.println(modulo); // Output: modulo result as a BigLong instance.
     * </pre>
     *
     * @param a The `BigDecimal` number (the dividend).
     * @param b The `BigDecimal` divisor.
     * @return A new `BigLong` instance representing the modulo.
     * @throws ArithmeticException If the `BigDecimal` divisor (`b`) is zero.
     */
    public static BigLong modulo(BigDecimal a, BigDecimal b) {
        return new BigLong(a).modulo(b);
    }

//------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------
//                                                ALL QUOTIENT AND MODULO METHODS
//                                                ================================
//------------------------------------------------                                ----------------------------------------------------
    
    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns an array containing two `BigLong` instances representing the quotient and remainder, 
     * respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing two `BigLong` instances representing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]); // Output: Quotient: 0
     *     System.out.println("Remainder: " + result[1]); // Output: Remainder: 123456789
     * </pre>
     *
     * @param divisor The `BigLong` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(BigLong divisor) 
    {
        return new BigLong[] {this.divide(divisor), this.modulo(divisor)};
    }


    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns An array containing one `BigLong` instance representing the quotient and one `BigInteger` instance representing the remainder, respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `BigInteger` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing one `BigLong` instance representing the quotient and one `BigInteger` instance representing the remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigInteger divisor = new BigInteger("987654321");
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]); // Output: Quotient: 0
     *     System.out.println("Remainder: " + result[1]); // Output: Remainder: 123456789
     * </pre>
     *
     * @param divisor The `BigInteger` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(BigInteger divisor)
    {
    	return this.quotientAndRemainder(new BigLong(divisor));
    }


    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns An array containing one `BigLong` instance representing the quotient and one `long` instance 
     * representing the remainder, respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `long` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing one `BigLong` instance representing the quotient and one `long` instance representing the 
     *         remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     long divisor = 987654321l;
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]);
     *     System.out.println("Remainder: " + result[1]);
     * </pre>
     *
     * @param divisor The `long` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(long divisor)
    {
    	return this.quotientAndRemainder(new BigLong(divisor));
    }


    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns An array containing one `BigLong` instance representing the quotient and one `int` instance 
     * representing the remainder, respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `int` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing one `BigLong` instance representing the quotient and one `int` instance representing the remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     int divisor = 9876543;
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]); 
     *     System.out.println("Remainder: " + result[1]); 
     * </pre>
     *
     * @param divisor The `int` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(int divisor)
    {
    	return this.quotientAndRemainder(new BigLong(divisor));
    }


    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns An array containing one `BigLong` instance representing the quotient and one `short` instance representing the remainder, respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `short` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing one `BigLong` instance representing the quotient and one `short` instance representing the remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     short divisor = 124;
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]);
     *     System.out.println("Remainder: " + result[1]);
     * </pre>
     *
     * @param divisor The `short` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(short divisor)
    {
    	return this.quotientAndRemainder(new BigLong(divisor));
    }


    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns An array containing one `BigLong` instance representing the quotient and one `byte` instance representing the remainder, respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `byte` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing one `BigLong` instance representing the quotient and one `byte` instance representing the remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     byte divisor = 92b;
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]);
     *     System.out.println("Remainder: " + result[1]);
     * </pre>
     *
     * @param divisor The `byte` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(byte divisor)
    {
    	return this.quotientAndRemainder(new BigLong(divisor));
    }


    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns An array containing one `BigLong` instance representing the quotient and one `float` instance representing the remainder, respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `float` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing one `BigLong` instance representing the quotient and one `float` instance representing the remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     float divisor = 98765.4321f;
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]);
     *     System.out.println("Remainder: " + result[1]);
     * </pre>
     *
     * @param divisor The `float` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(float divisor)
    {
    	return this.quotientAndRemainder(new BigLong(divisor));
    }


    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns An array containing one `BigLong` instance representing the quotient and one `double` instance representing the remainder, respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `double` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing one `BigLong` instance representing the quotient and one `double` instance representing the remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     double divisor = 987654321.1;
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]);
     *     System.out.println("Remainder: " + result[1]);
     * </pre>
     *
     * @param divisor The `double` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(double divisor)
    {
    	return this.quotientAndRemainder(new BigLong(divisor));
    }


    /**
     * Returns an array containing the quotient and remainder of dividing the `BigLong` number by the given divisor.
     *
     * <p>
     * The `quotientAndRemainder` method calculates the quotient and remainder of dividing the `BigLong` number by the 
     * given divisor. It returns An array containing one `BigLong` instance representing the quotient and one `BigDecimal` instance representing the remainder, respectively.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>divisor:</strong> The `BigDecimal` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array containing one `BigLong` instance representing the quotient and one `BigDecimal` instance representing the remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigDecimal divisor = new BigDecimal("987654321");
     *     BigLong[] result = dividend.quotientAndRemainder(divisor);
     *     System.out.println("Quotient: " + result[0]);
     *     System.out.println("Remainder: " + result[1]);
     * </pre>
     *
     * @param divisor The `BigDecimal` divisor.
     * @return An array containing two `BigLong` instances representing the quotient and remainder, respectively.
     */
    public BigLong[] quotientAndRemainder(BigDecimal divisor)
    {
    	return this.quotientAndRemainder(new BigLong(divisor));
    }
    
    
//                                          Static Quotient And modulo Methods
//                                          -----------------------------------

    /**
     * Divides the `dividend` `BigLong` number by the `divisor` `BigLong` number and returns an array
     * containing the quotient and remainder as `BigLong` instances.
     *
     * <p>
     * The `quotientAndRemainder` method divides the `dividend` `BigLong` number by the `divisor` `BigLong` number
     * and returns an array containing the quotient and remainder as `BigLong` instances. The quotient represents
     * the whole number resulting from the division, and the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li><strong>dividend:</strong> The `BigLong` number to be divided.</li>
     *     <li><strong>divisor:</strong> The `BigLong` divisor.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of `BigLong` instances, where index 0 represents the quotient and index 1 represents the remainder.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong dividend = new BigLong("123456789");
     *     BigLong divisor = new BigLong("987654321");
     *     BigLong[] result = BigLong.quotientAndRemainder(dividend, divisor);
     *     System.out.println("Quotient: " + result[0]);
     *     System.out.println("Remainder: " + result[1]);
     * </pre>
     *
     * <p>
     * <strong>Implementation Note:</strong>
     * </p>
     * <p>
     * The `quotientAndRemainder` method internally calls the `quotientAndRemainder` method of the `dividend` `BigLong` number,
     * which performs the actual division and returns the quotient and remainder. This method is a convenience method that
     * allows for a more concise usage by directly calling it on the `BigLong` class itself.
     * </p>
     *
     * @param dividend The `BigLong` number to be divided.
     * @param divisor  The `BigLong` divisor.
     * @return An array of `BigLong` instances, where index 0 represents the quotient and index 1 represents the remainder.
     * @throws ArithmeticException If the `divisor` is zero.
     */
    public static BigLong[] quotientAndRemainder(BigLong dividend, BigLong divisor) {
        return dividend.quotientAndRemainder(divisor);
    }
    

    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a byte value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the byte value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The byte value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     byte b = 5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The byte value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigLong a, byte b) {
    	return a.quotientAndRemainder(b);
    }
    

    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a short value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the short value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The short value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     short b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The short value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigLong a, short b) {
		return a.quotientAndRemainder(b);
    }
    

    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by an int value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the int value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The int value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     int b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The int value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigLong a, int b) {
    	return a.quotientAndRemainder(b);
    }
    

    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a long value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the long value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The long value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     long b = 10L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The long value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigLong a, long b) {
        return a.quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a `BigInteger` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the `BigInteger` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The `BigInteger` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     BigInteger b = new BigInteger("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The `BigInteger` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigLong a, BigInteger b) {
        return a.quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a `float` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the `float` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The `float` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     float b = 10.5f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The `float` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigLong a, float b) {
        return a.quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a `double` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the `double` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The `double` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     double b = 10.5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The `double` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigLong a, double b) {
        return a.quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a `BigDecimal` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     BigDecimal b = new BigDecimal("10.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The `BigDecimal` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigLong a, BigDecimal b) {
        return a.quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a `BigDecimal` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger a = new BigInteger("123456789");
     *     BigLong b = new BigLong("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigInteger` number to be divided.
     * @param b The `BigLong` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, BigLong b)
    {
		return new BigLong(a).quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `BigLong` number by a `float` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigLong` number `a` by the `float` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigLong` number to be divided.</li>
     *     <li>`b` - The `float` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigLong a = new BigLong("123456789");
     *     float b = 10.5f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigLong` number to be divided.
     * @param b The `float` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, byte b)
    {
    	return new BigLong(a).quotientAndRemainder(b);
    }
    
    
    /**
     * Computes the quotient and remainder of dividing a `BigInteger` number by a short value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigInteger` number `a` by the short value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number to be divided.</li>
     *     <li>`b` - The short value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger a = new BigInteger("123456789");
     *     short b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigInteger` number to be divided.
     * @param b The short value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, short b) {
        return new BigLong(a).quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `BigInteger` number by an integer value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigInteger` number `a` by the integer value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number to be divided.</li>
     *     <li>`b` - The integer value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger a = new BigInteger("123456789");
     *     int b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigInteger` number to be divided.
     * @param b The integer value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, int b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigInteger` number by a long value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigInteger` number `a` by the long value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number to be divided.</li>
     *     <li>`b` - The long value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger a = new BigInteger("123456789");
     *     long b = 10L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigInteger` number to be divided.
     * @param b The long value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, long b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigInteger` number by another `BigInteger` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigInteger` number `a` by the `BigInteger` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number to be divided.</li>
     *     <li>`b` - The `BigInteger` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger a = new BigInteger("123456789");
     *     BigInteger b = new BigInteger("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigInteger` number to be divided.
     * @param b The `BigInteger` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, BigInteger b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigInteger` number by a float value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigInteger` number `a` by the float value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number to be divided.</li>
     *     <li>`b` - The float value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger a = new BigInteger("123456789");
     *     float b = 10.5f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigInteger` number to be divided.
     * @param b The float value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, float b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigInteger` number by a double value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigInteger` number `a` by the double value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number to be divided.</li>
     *     <li>`b` - The double value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger a = new BigInteger("123456789");
     *     double b = 10.5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigInteger` number to be divided.
     * @param b The double value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, double b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigInteger` number by a `BigDecimal` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigInteger` number `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigInteger` number to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigInteger a = new BigInteger("123456789");
     *     BigDecimal b = new BigDecimal("10.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigInteger` number to be divided.
     * @param b The `BigDecimal` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigInteger a, BigDecimal b) {
        return new BigLong(a).quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a long value by a `BigLong` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the `BigLong` number `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The `BigLong` number to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     BigLong b = new BigLong("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The `BigLong` number to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, BigLong b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a long value by a byte value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the byte value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The byte value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     byte b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The byte value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, byte b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a long value by a short value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the short value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The short value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     short b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The short value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, short b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a long value by an int value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the int value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The int value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     int b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The int value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, int b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a long value by another long value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the long value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The long value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     long b = 10L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The long value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, long b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a long value by a `BigInteger` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the `BigInteger` number `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The `BigInteger` number to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     BigInteger b = new BigInteger("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The `BigInteger` number to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, BigInteger b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a long value by a float value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the float value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The float value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     float b = 10.5f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The float value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, float b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a long value by a double value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the double value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The double value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     double b = 10.5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The double value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, double b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a long value by a `BigDecimal` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the long value `a` by the `BigDecimal` number `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The long value to be divided.</li>
     *     <li>`b` - The `BigDecimal` number to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     long a = 123456789L;
     *     BigDecimal b = new BigDecimal("10.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The long value to be divided.
     * @param b The `BigDecimal` number to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(long a, BigDecimal b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing an `int` value by a `BigLong` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `BigLong` number `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `BigLong` number to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     BigLong b = new BigLong("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `BigLong` number to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, BigLong b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing an `int` value by a `byte` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `byte` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `byte` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     byte b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `byte` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, byte b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing an `int` value by a `short` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `short` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `short` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     short b = 1000;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `short` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, short b) {
        return new BigLong(a).quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing an `int` value by another `int` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `int` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `int` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     int b = 1000;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `int` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, int b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing an `int` value by a `long` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `long` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `long` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     long b = 1000000L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `long` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, long b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing an `int` value by a `BigInteger`.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `BigInteger` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `BigInteger` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     BigInteger b = new BigInteger("1000000000");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `BigInteger` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, BigInteger b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing an `int` value by a `float` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `float` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `float` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     float b = 1000.0f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `float` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, float b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing an `int` value by a `double` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `double` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `double` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     double b = 1000.5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `double` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, double b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing an `int` value by a `BigDecimal` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `int` value `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `int` value to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     int a = 123456789;
     *     BigDecimal b = new BigDecimal("1000000000.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `int` value to be divided.
     * @param b The `BigDecimal` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(int a, BigDecimal b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `short` value by a `BigLong` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `BigLong` number `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `BigLong` number to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     BigLong b = new BigLong("1000");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `BigLong` number to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, BigLong b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `short` value by a `byte` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `byte` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `byte` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     byte b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `byte` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, byte b) {
        return new BigLong(a).quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `short` value by a `short` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `short` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `short` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     short b = 1000;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `short` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, short b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `short` value by an `int` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `int` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `int` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     int b = 1000;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `int` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, int b) {
        return new BigLong(a).quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `short` value by a `long` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `long` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `long` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     long b = 1000L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `long` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, long b) {
        return new BigLong(a).quotientAndRemainder(b);
    }


    /**
     * Computes the quotient and remainder of dividing a `short` value by a `BigInteger`.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `BigInteger` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `BigInteger` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     BigInteger b = new BigInteger("1000");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `BigInteger` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, BigInteger b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `short` value by a `float`.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `float` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `float` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     float b = 1000.0f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `float` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, float b) {
        return new BigLong(a).quotientAndRemainder(b);
    }
    
    
    /**
     * Computes the quotient and remainder of dividing a `short` value by a `double`.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `double` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `double` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     double b = 1000.0;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `double` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, double b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `short` value by a `BigDecimal`.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `short` value `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `short` value to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     short a = 12345;
     *     BigDecimal b = new BigDecimal("1000.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `short` value to be divided.
     * @param b The `BigDecimal` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(short a, BigDecimal b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by a `BigLong` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `BigLong` number `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `BigLong` number to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     BigLong b = new BigLong("5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `BigLong` number to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, BigLong b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by another `byte` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `byte` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `byte` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     byte b = 5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `byte` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, byte b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by a `short` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `short` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `short` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     short b = 5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `short` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, short b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by an `int` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `int` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `int` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     int b = 5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `int` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, int b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by a `long` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `long` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `long` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     long b = 5L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `long` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, long b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by a `BigInteger` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `BigInteger` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `BigInteger` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     BigInteger b = new BigInteger("5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `BigInteger` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, BigInteger b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by a `float` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `float` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `float` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     float b = 5.5f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `float` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, float b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by a `double` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `double` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `double` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     double b = 5.5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `double` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, double b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `byte` value by a `BigDecimal` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `byte` value `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `byte` value to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     byte a = 20;
     *     BigDecimal b = new BigDecimal("5.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `byte` value to be divided.
     * @param b The `BigDecimal` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(byte a, BigDecimal b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `double` value by a `BigLong` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `BigLong` number `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `BigLong` number to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     BigLong b = new BigLong("100");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `BigLong` number to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, BigLong b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `double` value by a `byte` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `byte` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `byte` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     byte b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `byte` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, byte b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `double` value by a `short` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `short` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `short` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     short b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `short` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, short b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `double` value by an `int` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `int` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `int` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     int b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `int` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, int b) {
        return new BigLong(a).quotientAndRemainder(b);
    }
    
    
    /**
     * Computes the quotient and remainder of dividing a `double` value by a `long` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `long` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `long` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     long b = 10L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `long` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, long b) {
        return new BigLong(a).quotientAndRemainder(b);
    }
    
    
    /**
     * Computes the quotient and remainder of dividing a `double` value by a `BigInteger`.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `BigInteger` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `BigInteger` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     BigInteger b = new BigInteger("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `BigInteger` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, BigInteger b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `double` value by a `float` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `float` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `float` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     float b = 10.5f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `float` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, float b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `double` value by another `double` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `double` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `double` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     double b = 10.5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `double` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, double b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `double` value by a `BigDecimal`.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `double` value `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `double` value to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     double a = 1234.5678;
     *     BigDecimal b = new BigDecimal("10.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `double` value to be divided.
     * @param b The `BigDecimal` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(double a, BigDecimal b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `float` value by a `BigLong` number.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `BigLong` number `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `BigLong` number to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     BigLong b = new BigLong("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `BigLong` number to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, BigLong b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `float` value by a `byte` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `byte` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `byte` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     byte b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `byte` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, byte b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `float` value by a `short` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `short` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `short` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     short b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `short` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, short b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `float` value by an `int` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `int` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `int` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     int b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `int` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, int b) {
        return new BigLong(a).quotientAndRemainder(b);
    }
    
    
    /**
     * Computes the quotient and remainder of dividing a `float` value by a `long` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `long` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `long` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     long b = 10L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `long` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, long b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `float` value by a `BigInteger` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `BigInteger` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `BigInteger` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     BigInteger b = new BigInteger("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `BigInteger` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, BigInteger b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `float` value by another `float` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `float` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `float` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     float b = 10.0f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `float` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, float b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `float` value by a `double` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `double` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `double` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     double b = 10.0;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `double` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, double b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `float` value by a `BigDecimal` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `float` value `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `float` value to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     float a = 1234.5678f;
     *     BigDecimal b = new BigDecimal("10.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `float` value to be divided.
     * @param b The `BigDecimal` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(float a, BigDecimal b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigDecimal` value by a `BigLong` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `BigLong` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `BigLong` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     BigLong b = new BigLong(10);
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `BigLong` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, BigLong b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigDecimal` value by a `byte` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `byte` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `byte` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     byte b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `byte` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, byte b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigDecimal` value by a `short` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `short` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `short` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     short b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `short` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, short b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigDecimal` value by an `int` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `int` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `int` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     int b = 10;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `int` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, int b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigDecimal` value by a `long` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `long` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `long` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     long b = 10L;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `long` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, long b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigDecimal` value by a `BigInteger` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `BigInteger` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `BigInteger` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     BigInteger b = new BigInteger("10");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `BigInteger` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, BigInteger b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigDecimal` value by a `float` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `float` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `float` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     float b = 10.5f;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `float` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, float b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing a `BigDecimal` value by a `double` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `double` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `double` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     double b = 10.5;
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `double` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, double b) {
        return new BigLong(a).quotientAndRemainder(b);
    }

    
    /**
     * Computes the quotient and remainder of dividing one `BigDecimal` value by another `BigDecimal` value.
     *
     * <p>
     * The `quotientAndRemainder` method computes the quotient and remainder when dividing the `BigDecimal` value `a` by the `BigDecimal` value `b`.
     * The quotient represents the whole number part of the division, while the remainder represents the remaining value after the division.
     * </p>
     *
     * <p>
     * <strong>Parameters:</strong>
     * </p>
     * <ul>
     *     <li>`a` - The `BigDecimal` value to be divided.</li>
     *     <li>`b` - The `BigDecimal` value to divide `a` by.</li>
     * </ul>
     *
     * <p>
     * <strong>Returns:</strong>
     * </p>
     * <ul>
     *     <li>An array of two `BigLong` instances containing the quotient and remainder, respectively.</li>
     * </ul>
     *
     * <p>
     * <strong>Usage Example:</strong>
     * </p>
     * <pre>
     *     BigDecimal a = new BigDecimal("1234.5678");
     *     BigDecimal b = new BigDecimal("10.5");
     *     BigLong[] result = BigLong.quotientAndRemainder(a, b);
     *     BigLong quotient = result[0];
     *     BigLong remainder = result[1];
     *     System.out.println("Quotient: " + quotient);
     *     System.out.println("Remainder: " + remainder);
     * </pre>
     *
     * @param a The `BigDecimal` value to be divided.
     * @param b The `BigDecimal` value to divide `a` by.
     * @return An array of two `BigLong` instances containing the quotient and remainder, respectively.
     */
    public static BigLong[] quotientAndRemainder(BigDecimal a, BigDecimal b) {
        return new BigLong(a).quotientAndRemainder(b);
    }


}
